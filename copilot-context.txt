// ──────────────
// Projektüberblick & Architektur (für Entwickler & Copilot)
// ──────────────

Projekt: STM32G031G8 Sensortaster
- 12 RGB-LEDs (SK6812), gesteuert über DMA+PWM (TIM3_CH2, PA7)
- Piezo-Buzzer (PA4), 4kHz PWM-Signal via TIM14
- Logik über CY8CMBR3108 (I2C) → INT an PA1
- Konfigurationsbutton an PA3

Module:
- led_effect_*.c/h → Jeder Effekt in separater Datei, einheitliche API (start, update, stop)
- logic_*.c/h      → Verschiedene Logiken als modular auswählbar
- sound_*.c/h      → Piezo-Ton pro Ereignis

Globale Variablen:
- current_effect (uint8_t)
- effect_params (struct: hue, brightness, speed, duration)
- button_state, config_mode, output_state[]

Ziel:  
LED-Effekte und Sound zur Laufzeit ändern (z.B. nach Tastendruck), Piezo-Sound abspielen und IO schalten.

Designvorgaben:
- Effekte modular halten, keine hardcodierten Farben, Parameter nutzen
- Konfiguration & LED-Rückmeldung über config_mode
- Ton & LED gemeinsam nutzbar bei Ereignissen

// ──────────────
// Strategie & Verbesserungsplan (für Entwickler)
// ──────────────

1. SK6812-Treiber isoliert testen (DMA/PWM-Timing sicherstellen, einfache LED-Tests)
2. LED-Effekt-Engine kapseln: Effekte als Module mit einheitlicher API (start, update, stop), zentrales Effekt-Management, Beispiel-Effekte
3. Sound-Engine modularisieren: analoge API, Beispiel-Soundeffekte
4. Synchronisation & Timing: Parallele Ausführung von LED- und Soundeffekten testen, Timer/DMA-Konflikte vermeiden
5. Logik-Engine und Event-Handling: Logik kapseln, Effekte triggern, verschiedene Logikpfade testen
6. Erweiterbarkeit & Clean Code: Effekt-API dokumentieren, Beispielcode für neue Effekte

Empfohlene Reihenfolge:
1. SK6812-Treiber (kritisch)
2. LED-Effekt-Engine
3. Sound-Engine
4. Synchronisation/Timing
5. Logik-Engine
6. Dokumentation & Clean Code

Fazit:  
Mit dieser Strategie wird die Basis stabil und die Modularität verbessert. Neue Effekte und Funktionen können einfach hinzugefügt werden. Der kritischste Baustein (SK6812-Treiber) steht am Anfang, um spätere Fehler zu vermeiden.

// ──────────────
// Hinweise für Copilot & Entwickler
// ──────────────
// - Immer die API-Konventionen für Effekte und Logik einhalten
// - Zentrale Parameter in config.h pflegen
// - USER CODE Bereiche für eigene Anpassungen nutzen
// - Dokumentation aktuell halten

/*
CY8CMBR3108 – Beschreibbare Register laut TRM/EZ-Click

| Register Name         | Address |
|-----------------------|---------|
| SENSOR_EN             | 0x00    |
| FSS_EN                | 0x02    |
| TOGGLE_EN             | 0x04    |
| LED_ON_EN             | 0x06    |
| SENSITIVITY0          | 0x08    |
| SENSITIVITY1          | 0x09    |
| SENSITIVITY2          | 0x0A    |
| SENSITIVITY3          | 0x0B    |
| BASE_THRESHOLD0       | 0x0C    |
| BASE_THRESHOLD1       | 0x0D    |
| FINGER_THRESHOLD2     | 0x0E    |
| FINGER_THRESHOLD3     | 0x0F    |
| FINGER_THRESHOLD4     | 0x10    |
| FINGER_THRESHOLD5     | 0x11    |
| FINGER_THRESHOLD6     | 0x12    |
| FINGER_THRESHOLD7     | 0x13    |
| FINGER_THRESHOLD8     | 0x14    |
| FINGER_THRESHOLD9     | 0x15    |
| FINGER_THRESHOLD10    | 0x16    |
| FINGER_THRESHOLD11    | 0x17    |
| FINGER_THRESHOLD12    | 0x18    |
| FINGER_THRESHOLD13    | 0x19    |
| FINGER_THRESHOLD14    | 0x1A    |
| FINGER_THRESHOLD15    | 0x1B    |
| SENSOR_DEBOUNCE       | 0x1C    |
| BUTTON_HYS            | 0x1D    |
| BUTTON_LBR            | 0x1F    |
| BUTTON_NNT            | 0x20    |
| BUTTON_NT             | 0x21    |
| PROX_EN               | 0x26    |
| PROX_CFG              | 0x27    |
| PROX_CFG2             | 0x28    |
| PROX_TOUCH_TH0        | 0x2A    |
| PROX_TOUCH_TH1        | 0x2C    |
| PROX_RESOLUTION0      | 0x2E    |
| PROX_RESOLUTION1      | 0x2F    |
| PROX_HYS              | 0x30    |
| PROX_LBR              | 0x32    |
| PROX_NNT              | 0x33    |
| PROX_NT               | 0x34    |
| PROX_POSITIVE_TH0     | 0x35    |
| PROX_POSITIVE_TH1     | 0x36    |
| PROX_NEGATIVE_TH0     | 0x39    |
| PROX_NEGATIVE_TH1     | 0x3A    |
| LED_ON_TIME           | 0x3D    |
| BUZZER_CFG            | 0x3E    |
| BUZZER_ON_TIME        | 0x3F    |
| GPO_CFG               | 0x40    |
| PWM_DUTYCYCLE_CFG0    | 0x41    |
| PWM_DUTYCYCLE_CFG1    | 0x42    |
| PWM_DUTYCYCLE_CFG2    | 0x43    |
| PWM_DUTYCYCLE_CFG3    | 0x44    |
| PWM_DUTYCYCLE_CFG4    | 0x45    |
| PWM_DUTYCYCLE_CFG5    | 0x46    |
| PWM_DUTYCYCLE_CFG6    | 0x47    |
| PWM_DUTYCYCLE_CFG7    | 0x48    |
| SPO_CFG               | 0x4C    |
| DEVICE_CFG0           | 0x4D    |
| DEVICE_CFG1           | 0x4E    |
| DEVICE_CFG2           | 0x4F    |
| DEVICE_CFG3           | 0x50    |
| I2C_ADDR              | 0x51    |
| REFRESH_CTRL          | 0x52    |
| STATE_TIMEOUT         | 0x55    |
| SLIDER_CFG            | 0x5D    |
| SLIDER1_CFG           | 0x61    |
| SLIDER1_RESOLUTION    | 0x62    |
| SLIDER1_THRESHOLD     | 0x63    |
| SLIDER2_CFG           | 0x67    |
| SLIDER2_RESOLUTION    | 0x68    |
| SLIDER2_THRESHOLD     | 0x69    |
| SLIDER_LBR            | 0x71    |
| SLIDER_NNT            | 0x72    |
| SLIDER_NT             | 0x73    |
| SCRATCHPAD0           | 0x7A    |
| SCRATCHPAD1           | 0x7B    |
| CONFIG_CRC            | 0x7E    |
*/
