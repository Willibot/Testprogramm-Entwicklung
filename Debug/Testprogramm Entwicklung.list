
Testprogramm Entwicklung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003974  08003974  00004974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a60  08003a60  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003a60  08003a60  0000501c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003a60  08003a60  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a60  08003a60  00004a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a64  08003a64  00004a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003a68  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  2000001c  08003a84  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08003a84  00005454  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce7a  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003152  00000000  00000000  00011ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00015010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac0  00000000  00000000  00015e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c40  00000000  00000000  00016930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001468e  00000000  00000000  0002d570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d9a8  00000000  00000000  00041bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf5a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed0  00000000  00000000  000cf5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000d24bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800395c 	.word	0x0800395c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	0800395c 	.word	0x0800395c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <MX_DMA_Init+0x38>)
 80003f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80003fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000428 <MX_DMA_Init+0x38>)
 80003fc:	2101      	movs	r1, #1
 80003fe:	430a      	orrs	r2, r1
 8000400:	639a      	str	r2, [r3, #56]	@ 0x38
 8000402:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <MX_DMA_Init+0x38>)
 8000404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000406:	2201      	movs	r2, #1
 8000408:	4013      	ands	r3, r2
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2100      	movs	r1, #0
 8000412:	2009      	movs	r0, #9
 8000414:	f001 fb6a 	bl	8001aec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000418:	2009      	movs	r0, #9
 800041a:	f001 fb7c 	bl	8001b16 <HAL_NVIC_EnableIRQ>

}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	40021000 	.word	0x40021000

0800042c <MX_GPIO_Init>:
     PB5   ------> SPI1_MOSI
     PB7   ------> I2C1_SDA
     PB8   ------> I2C1_SCL
*/
void MX_GPIO_Init(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b089      	sub	sp, #36	@ 0x24
 8000430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	240c      	movs	r4, #12
 8000434:	193b      	adds	r3, r7, r4
 8000436:	0018      	movs	r0, r3
 8000438:	2314      	movs	r3, #20
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f003 fa57 	bl	80038f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	4b74      	ldr	r3, [pc, #464]	@ (8000614 <MX_GPIO_Init+0x1e8>)
 8000444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000446:	4b73      	ldr	r3, [pc, #460]	@ (8000614 <MX_GPIO_Init+0x1e8>)
 8000448:	2104      	movs	r1, #4
 800044a:	430a      	orrs	r2, r1
 800044c:	635a      	str	r2, [r3, #52]	@ 0x34
 800044e:	4b71      	ldr	r3, [pc, #452]	@ (8000614 <MX_GPIO_Init+0x1e8>)
 8000450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000452:	2204      	movs	r2, #4
 8000454:	4013      	ands	r3, r2
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045a:	4b6e      	ldr	r3, [pc, #440]	@ (8000614 <MX_GPIO_Init+0x1e8>)
 800045c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800045e:	4b6d      	ldr	r3, [pc, #436]	@ (8000614 <MX_GPIO_Init+0x1e8>)
 8000460:	2101      	movs	r1, #1
 8000462:	430a      	orrs	r2, r1
 8000464:	635a      	str	r2, [r3, #52]	@ 0x34
 8000466:	4b6b      	ldr	r3, [pc, #428]	@ (8000614 <MX_GPIO_Init+0x1e8>)
 8000468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800046a:	2201      	movs	r2, #1
 800046c:	4013      	ands	r3, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	4b68      	ldr	r3, [pc, #416]	@ (8000614 <MX_GPIO_Init+0x1e8>)
 8000474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000476:	4b67      	ldr	r3, [pc, #412]	@ (8000614 <MX_GPIO_Init+0x1e8>)
 8000478:	2102      	movs	r1, #2
 800047a:	430a      	orrs	r2, r1
 800047c:	635a      	str	r2, [r3, #52]	@ 0x34
 800047e:	4b65      	ldr	r3, [pc, #404]	@ (8000614 <MX_GPIO_Init+0x1e8>)
 8000480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000482:	2202      	movs	r2, #2
 8000484:	4013      	ands	r3, r2
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800048a:	23c8      	movs	r3, #200	@ 0xc8
 800048c:	0159      	lsls	r1, r3, #5
 800048e:	23a0      	movs	r3, #160	@ 0xa0
 8000490:	05db      	lsls	r3, r3, #23
 8000492:	2200      	movs	r2, #0
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fe4b 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800049a:	4b5f      	ldr	r3, [pc, #380]	@ (8000618 <MX_GPIO_Init+0x1ec>)
 800049c:	2200      	movs	r2, #0
 800049e:	2140      	movs	r1, #64	@ 0x40
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 fe45 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	4a5c      	ldr	r2, [pc, #368]	@ (800061c <MX_GPIO_Init+0x1f0>)
 80004aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2203      	movs	r2, #3
 80004b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	4a59      	ldr	r2, [pc, #356]	@ (8000620 <MX_GPIO_Init+0x1f4>)
 80004bc:	0019      	movs	r1, r3
 80004be:	0010      	movs	r0, r2
 80004c0:	f001 fcd2 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA5 PA6
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	4a57      	ldr	r2, [pc, #348]	@ (8000624 <MX_GPIO_Init+0x1f8>)
 80004c8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2203      	movs	r2, #3
 80004ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d6:	193a      	adds	r2, r7, r4
 80004d8:	23a0      	movs	r3, #160	@ 0xa0
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 fcc2 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2202      	movs	r2, #2
 80004e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	2288      	movs	r2, #136	@ 0x88
 80004ee:	0352      	lsls	r2, r2, #13
 80004f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	193a      	adds	r2, r7, r4
 80004fa:	23a0      	movs	r3, #160	@ 0xa0
 80004fc:	05db      	lsls	r3, r3, #23
 80004fe:	0011      	movs	r1, r2
 8000500:	0018      	movs	r0, r3
 8000502:	f001 fcb1 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2208      	movs	r2, #8
 800050a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2200      	movs	r2, #0
 8000510:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	193a      	adds	r2, r7, r4
 800051a:	23a0      	movs	r3, #160	@ 0xa0
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	0011      	movs	r1, r2
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fca1 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2201      	movs	r2, #1
 800052a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2203      	movs	r2, #3
 8000530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000538:	193b      	adds	r3, r7, r4
 800053a:	4a37      	ldr	r2, [pc, #220]	@ (8000618 <MX_GPIO_Init+0x1ec>)
 800053c:	0019      	movs	r1, r3
 800053e:	0010      	movs	r0, r2
 8000540:	f001 fc92 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2202      	movs	r2, #2
 8000548:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054a:	193b      	adds	r3, r7, r4
 800054c:	2200      	movs	r2, #0
 800054e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000556:	193b      	adds	r3, r7, r4
 8000558:	4a2f      	ldr	r2, [pc, #188]	@ (8000618 <MX_GPIO_Init+0x1ec>)
 800055a:	0019      	movs	r1, r3
 800055c:	0010      	movs	r0, r2
 800055e:	f001 fc83 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000562:	0021      	movs	r1, r4
 8000564:	187b      	adds	r3, r7, r1
 8000566:	22c8      	movs	r2, #200	@ 0xc8
 8000568:	0152      	lsls	r2, r2, #5
 800056a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	000c      	movs	r4, r1
 800056e:	193b      	adds	r3, r7, r4
 8000570:	2201      	movs	r2, #1
 8000572:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	193b      	adds	r3, r7, r4
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	193a      	adds	r2, r7, r4
 8000582:	23a0      	movs	r3, #160	@ 0xa0
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	0011      	movs	r1, r2
 8000588:	0018      	movs	r0, r3
 800058a:	f001 fc6d 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800058e:	193b      	adds	r3, r7, r4
 8000590:	2238      	movs	r2, #56	@ 0x38
 8000592:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2202      	movs	r2, #2
 8000598:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	193b      	adds	r3, r7, r4
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	4a1a      	ldr	r2, [pc, #104]	@ (8000618 <MX_GPIO_Init+0x1ec>)
 80005b0:	0019      	movs	r1, r3
 80005b2:	0010      	movs	r0, r2
 80005b4:	f001 fc58 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2240      	movs	r2, #64	@ 0x40
 80005bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2201      	movs	r2, #1
 80005c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	4a11      	ldr	r2, [pc, #68]	@ (8000618 <MX_GPIO_Init+0x1ec>)
 80005d4:	0019      	movs	r1, r3
 80005d6:	0010      	movs	r0, r2
 80005d8:	f001 fc46 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80005dc:	0021      	movs	r1, r4
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	22c0      	movs	r2, #192	@ 0xc0
 80005e2:	0052      	lsls	r2, r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2212      	movs	r2, #18
 80005ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2206      	movs	r2, #6
 80005fc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	4a05      	ldr	r2, [pc, #20]	@ (8000618 <MX_GPIO_Init+0x1ec>)
 8000602:	0019      	movs	r1, r3
 8000604:	0010      	movs	r0, r2
 8000606:	f001 fc2f 	bl	8001e68 <HAL_GPIO_Init>

}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b009      	add	sp, #36	@ 0x24
 8000610:	bd90      	pop	{r4, r7, pc}
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	40021000 	.word	0x40021000
 8000618:	50000400 	.word	0x50000400
 800061c:	0000c040 	.word	0x0000c040
 8000620:	50000800 	.word	0x50000800
 8000624:	00008065 	.word	0x00008065

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f001 f908 	bl	8001840 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f81a 	bl	8000668 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f7ff fefa 	bl	800042c <MX_GPIO_Init>
  MX_DMA_Init();
 8000638:	f7ff feda 	bl	80003f0 <MX_DMA_Init>
  MX_TIM3_Init();
 800063c:	f000 f8ce 	bl	80007dc <MX_TIM3_Init>
  MX_TIM14_Init();
 8000640:	f000 f94a 	bl	80008d8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  led_effect_engine_init();  // Initialisiert die Effekt-Engine und ggf. den LED-Treiber
 8000644:	f000 fe42 	bl	80012cc <led_effect_engine_init>
  led_effect_engine_set(LED_EFFECT_SOLID);
 8000648:	2001      	movs	r0, #1
 800064a:	f000 fe49 	bl	80012e0 <led_effect_engine_set>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
        led_effect_engine_update(HAL_GetTick());
 800064e:	f001 f973 	bl	8001938 <HAL_GetTick>
 8000652:	0003      	movs	r3, r0
 8000654:	0018      	movs	r0, r3
 8000656:	f000 fe53 	bl	8001300 <led_effect_engine_update>
        sound_engine_tick(); // Sound-Engine regelmäßig aufrufen!
 800065a:	f001 f88f 	bl	800177c <sound_engine_tick>
        HAL_Delay(1);
 800065e:	2001      	movs	r0, #1
 8000660:	f001 f974 	bl	800194c <HAL_Delay>
        led_effect_engine_update(HAL_GetTick());
 8000664:	46c0      	nop			@ (mov r8, r8)
 8000666:	e7f2      	b.n	800064e <main+0x26>

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b093      	sub	sp, #76	@ 0x4c
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	2410      	movs	r4, #16
 8000670:	193b      	adds	r3, r7, r4
 8000672:	0018      	movs	r0, r3
 8000674:	2338      	movs	r3, #56	@ 0x38
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f003 f939 	bl	80038f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067e:	003b      	movs	r3, r7
 8000680:	0018      	movs	r0, r3
 8000682:	2310      	movs	r3, #16
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f003 f932 	bl	80038f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2380      	movs	r3, #128	@ 0x80
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fd6b 	bl	800216c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2202      	movs	r2, #2
 800069a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2280      	movs	r2, #128	@ 0x80
 80006a0:	0052      	lsls	r2, r2, #1
 80006a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006a4:	0021      	movs	r1, r4
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2240      	movs	r2, #64	@ 0x40
 80006b0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2202      	movs	r2, #2
 80006bc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2208      	movs	r2, #8
 80006c8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2280      	movs	r2, #128	@ 0x80
 80006ce:	0292      	lsls	r2, r2, #10
 80006d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2280      	movs	r2, #128	@ 0x80
 80006d6:	0492      	lsls	r2, r2, #18
 80006d8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2280      	movs	r2, #128	@ 0x80
 80006de:	0592      	lsls	r2, r2, #22
 80006e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 fd8d 	bl	8002204 <HAL_RCC_OscConfig>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006ee:	f000 f819 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	003b      	movs	r3, r7
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2202      	movs	r2, #2
 80006fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	003b      	movs	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	003b      	movs	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070a:	003b      	movs	r3, r7
 800070c:	2102      	movs	r1, #2
 800070e:	0018      	movs	r0, r3
 8000710:	f002 f892 	bl	8002838 <HAL_RCC_ClockConfig>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000718:	f000 f804 	bl	8000724 <Error_Handler>
  }
}
 800071c:	46c0      	nop			@ (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b013      	add	sp, #76	@ 0x4c
 8000722:	bd90      	pop	{r4, r7, pc}

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	46c0      	nop			@ (mov r8, r8)
 800072e:	e7fd      	b.n	800072c <Error_Handler+0x8>

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <HAL_MspInit+0x44>)
 8000738:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <HAL_MspInit+0x44>)
 800073c:	2101      	movs	r1, #1
 800073e:	430a      	orrs	r2, r1
 8000740:	641a      	str	r2, [r3, #64]	@ 0x40
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <HAL_MspInit+0x44>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000746:	2201      	movs	r2, #1
 8000748:	4013      	ands	r3, r2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <HAL_MspInit+0x44>)
 8000750:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <HAL_MspInit+0x44>)
 8000754:	2180      	movs	r1, #128	@ 0x80
 8000756:	0549      	lsls	r1, r1, #21
 8000758:	430a      	orrs	r2, r1
 800075a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <HAL_MspInit+0x44>)
 800075e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000760:	2380      	movs	r3, #128	@ 0x80
 8000762:	055b      	lsls	r3, r3, #21
 8000764:	4013      	ands	r3, r2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  // Eigene globale Initialisierungen, z.B. NVIC-Prioritäten, können hier ergänzt werden.
  /* USER CODE END MspInit 1 */
}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	40021000 	.word	0x40021000

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	e7fd      	b.n	800077c <NMI_Handler+0x4>

08000780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	e7fd      	b.n	8000784 <HardFault_Handler+0x4>

08000788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a0:	f001 f8b8 	bl	8001914 <HAL_IncTick>
  timer_tick++; // Ergänzung: eigene Zeitbasis inkrementieren
 80007a4:	4b03      	ldr	r3, [pc, #12]	@ (80007b4 <SysTick_Handler+0x18>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	4b02      	ldr	r3, [pc, #8]	@ (80007b4 <SysTick_Handler+0x18>)
 80007ac:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ae:	46c0      	nop			@ (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000038 	.word	0x20000038

080007b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80007bc:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <DMA1_Channel1_IRQHandler+0x14>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fa50 	bl	8001c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	200000d4 	.word	0x200000d4

080007d0 <SystemInit>:
  * Erklärung:
  *   Wird beim Reset aufgerufen, bevor main() startet.
  *   Hier kann z.B. die Vektor-Tabelle umgesetzt werden.
  */
void SystemInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <MX_TIM3_Init>:
TIM_HandleTypeDef htim14;
DMA_HandleTypeDef hdma_tim3_ch2;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	@ 0x38
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	2328      	movs	r3, #40	@ 0x28
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	0018      	movs	r0, r3
 80007e8:	2310      	movs	r3, #16
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f003 f87f 	bl	80038f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f2:	231c      	movs	r3, #28
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	0018      	movs	r0, r3
 80007f8:	230c      	movs	r3, #12
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f003 f877 	bl	80038f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000802:	003b      	movs	r3, r7
 8000804:	0018      	movs	r0, r3
 8000806:	231c      	movs	r3, #28
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f003 f870 	bl	80038f0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000810:	4b2f      	ldr	r3, [pc, #188]	@ (80008d0 <MX_TIM3_Init+0xf4>)
 8000812:	4a30      	ldr	r2, [pc, #192]	@ (80008d4 <MX_TIM3_Init+0xf8>)
 8000814:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000816:	4b2e      	ldr	r3, [pc, #184]	@ (80008d0 <MX_TIM3_Init+0xf4>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b2c      	ldr	r3, [pc, #176]	@ (80008d0 <MX_TIM3_Init+0xf4>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 8000822:	4b2b      	ldr	r3, [pc, #172]	@ (80008d0 <MX_TIM3_Init+0xf4>)
 8000824:	224f      	movs	r2, #79	@ 0x4f
 8000826:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000828:	4b29      	ldr	r3, [pc, #164]	@ (80008d0 <MX_TIM3_Init+0xf4>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800082e:	4b28      	ldr	r3, [pc, #160]	@ (80008d0 <MX_TIM3_Init+0xf4>)
 8000830:	2280      	movs	r2, #128	@ 0x80
 8000832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000834:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <MX_TIM3_Init+0xf4>)
 8000836:	0018      	movs	r0, r3
 8000838:	f002 f9a8 	bl	8002b8c <HAL_TIM_Base_Init>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000840:	f7ff ff70 	bl	8000724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000844:	2128      	movs	r1, #40	@ 0x28
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2280      	movs	r2, #128	@ 0x80
 800084a:	0152      	lsls	r2, r2, #5
 800084c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800084e:	187a      	adds	r2, r7, r1
 8000850:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <MX_TIM3_Init+0xf4>)
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f002 fb51 	bl	8002efc <HAL_TIM_ConfigClockSource>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800085e:	f7ff ff61 	bl	8000724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000862:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_TIM3_Init+0xf4>)
 8000864:	0018      	movs	r0, r3
 8000866:	f002 f9e9 	bl	8002c3c <HAL_TIM_PWM_Init>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800086e:	f7ff ff59 	bl	8000724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000872:	211c      	movs	r1, #28
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000880:	187a      	adds	r2, r7, r1
 8000882:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <MX_TIM3_Init+0xf4>)
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f002 ffca 	bl	8003820 <HAL_TIMEx_MasterConfigSynchronization>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000890:	f7ff ff48 	bl	8000724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000894:	003b      	movs	r3, r7
 8000896:	2260      	movs	r2, #96	@ 0x60
 8000898:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800089a:	003b      	movs	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a0:	003b      	movs	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a6:	003b      	movs	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ac:	0039      	movs	r1, r7
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <MX_TIM3_Init+0xf4>)
 80008b0:	2204      	movs	r2, #4
 80008b2:	0018      	movs	r0, r3
 80008b4:	f002 fa22 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80008bc:	f7ff ff32 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008c0:	4b03      	ldr	r3, [pc, #12]	@ (80008d0 <MX_TIM3_Init+0xf4>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 f8ba 	bl	8000a3c <HAL_TIM_MspPostInit>

}
 80008c8:	46c0      	nop			@ (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b00e      	add	sp, #56	@ 0x38
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000003c 	.word	0x2000003c
 80008d4:	40000400 	.word	0x40000400

080008d8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */
 
  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80008de:	4b23      	ldr	r3, [pc, #140]	@ (800096c <MX_TIM14_Init+0x94>)
 80008e0:	4a23      	ldr	r2, [pc, #140]	@ (8000970 <MX_TIM14_Init+0x98>)
 80008e2:	601a      	str	r2, [r3, #0]

  htim14.Init.Prescaler = 1599; // 64 MHz / 1600 = 40 kHz
 80008e4:	4b21      	ldr	r3, [pc, #132]	@ (800096c <MX_TIM14_Init+0x94>)
 80008e6:	4a23      	ldr	r2, [pc, #140]	@ (8000974 <MX_TIM14_Init+0x9c>)
 80008e8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b20      	ldr	r3, [pc, #128]	@ (800096c <MX_TIM14_Init+0x94>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9;       // 40 kHz / 10 = 4 kHz
 80008f0:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <MX_TIM14_Init+0x94>)
 80008f2:	2209      	movs	r2, #9
 80008f4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <MX_TIM14_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	@ (800096c <MX_TIM14_Init+0x94>)
 80008fe:	2280      	movs	r2, #128	@ 0x80
 8000900:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&htim14) != HAL_OK) { Error_Handler(); }
 8000902:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_TIM14_Init+0x94>)
 8000904:	0018      	movs	r0, r3
 8000906:	f002 f941 	bl	8002b8c <HAL_TIM_Base_Init>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM14_Init+0x3a>
 800090e:	f7ff ff09 	bl	8000724 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK) { Error_Handler(); }
 8000912:	4b16      	ldr	r3, [pc, #88]	@ (800096c <MX_TIM14_Init+0x94>)
 8000914:	0018      	movs	r0, r3
 8000916:	f002 f991 	bl	8002c3c <HAL_TIM_PWM_Init>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM14_Init+0x4a>
 800091e:	f7ff ff01 	bl	8000724 <Error_Handler>

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	0018      	movs	r0, r3
 8000926:	231c      	movs	r3, #28
 8000928:	001a      	movs	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	f002 ffe0 	bl	80038f0 <memset>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2260      	movs	r2, #96	@ 0x60
 8000934:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5; // 50% Dutycycle
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2205      	movs	r2, #5
 800093a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) { Error_Handler(); }
 8000948:	1d39      	adds	r1, r7, #4
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <MX_TIM14_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	0018      	movs	r0, r3
 8000950:	f002 f9d4 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <MX_TIM14_Init+0x84>
 8000958:	f7ff fee4 	bl	8000724 <Error_Handler>

  HAL_TIM_MspPostInit(&htim14);
 800095c:	4b03      	ldr	r3, [pc, #12]	@ (800096c <MX_TIM14_Init+0x94>)
 800095e:	0018      	movs	r0, r3
 8000960:	f000 f86c 	bl	8000a3c <HAL_TIM_MspPostInit>
}
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b008      	add	sp, #32
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000088 	.word	0x20000088
 8000970:	40002000 	.word	0x40002000
 8000974:	0000063f 	.word	0x0000063f

08000978 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a28      	ldr	r2, [pc, #160]	@ (8000a28 <HAL_TIM_Base_MspInit+0xb0>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d137      	bne.n	80009fa <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800098a:	4b28      	ldr	r3, [pc, #160]	@ (8000a2c <HAL_TIM_Base_MspInit+0xb4>)
 800098c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800098e:	4b27      	ldr	r3, [pc, #156]	@ (8000a2c <HAL_TIM_Base_MspInit+0xb4>)
 8000990:	2102      	movs	r1, #2
 8000992:	430a      	orrs	r2, r1
 8000994:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000996:	4b25      	ldr	r3, [pc, #148]	@ (8000a2c <HAL_TIM_Base_MspInit+0xb4>)
 8000998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800099a:	2202      	movs	r2, #2
 800099c:	4013      	ands	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel1;
 80009a2:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <HAL_TIM_Base_MspInit+0xb8>)
 80009a4:	4a23      	ldr	r2, [pc, #140]	@ (8000a34 <HAL_TIM_Base_MspInit+0xbc>)
 80009a6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <HAL_TIM_Base_MspInit+0xb8>)
 80009aa:	2221      	movs	r2, #33	@ 0x21
 80009ac:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <HAL_TIM_Base_MspInit+0xb8>)
 80009b0:	2210      	movs	r2, #16
 80009b2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <HAL_TIM_Base_MspInit+0xb8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80009ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000a30 <HAL_TIM_Base_MspInit+0xb8>)
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <HAL_TIM_Base_MspInit+0xb8>)
 80009c2:	2280      	movs	r2, #128	@ 0x80
 80009c4:	0052      	lsls	r2, r2, #1
 80009c6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009c8:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <HAL_TIM_Base_MspInit+0xb8>)
 80009ca:	2280      	movs	r2, #128	@ 0x80
 80009cc:	00d2      	lsls	r2, r2, #3
 80009ce:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <HAL_TIM_Base_MspInit+0xb8>)
 80009d2:	2220      	movs	r2, #32
 80009d4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80009d6:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <HAL_TIM_Base_MspInit+0xb8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <HAL_TIM_Base_MspInit+0xb8>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f001 f8b6 	bl	8001b50 <HAL_DMA_Init>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80009e8:	f7ff fe9c 	bl	8000724 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a10      	ldr	r2, [pc, #64]	@ (8000a30 <HAL_TIM_Base_MspInit+0xb8>)
 80009f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <HAL_TIM_Base_MspInit+0xb8>)
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80009f8:	e012      	b.n	8000a20 <HAL_TIM_Base_MspInit+0xa8>
  else if(tim_baseHandle->Instance==TIM14)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000a38 <HAL_TIM_Base_MspInit+0xc0>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d10d      	bne.n	8000a20 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_TIM_Base_MspInit+0xb4>)
 8000a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_TIM_Base_MspInit+0xb4>)
 8000a0a:	2180      	movs	r1, #128	@ 0x80
 8000a0c:	0209      	lsls	r1, r1, #8
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_TIM_Base_MspInit+0xb4>)
 8000a14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a16:	2380      	movs	r3, #128	@ 0x80
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b004      	add	sp, #16
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40000400 	.word	0x40000400
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	200000d4 	.word	0x200000d4
 8000a34:	40020008 	.word	0x40020008
 8000a38:	40002000 	.word	0x40002000

08000a3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b08b      	sub	sp, #44	@ 0x2c
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	2414      	movs	r4, #20
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	0018      	movs	r0, r3
 8000a4a:	2314      	movs	r3, #20
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f002 ff4e 	bl	80038f0 <memset>
  if(timHandle->Instance==TIM3)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a29      	ldr	r2, [pc, #164]	@ (8000b00 <HAL_TIM_MspPostInit+0xc4>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d123      	bne.n	8000aa6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b29      	ldr	r3, [pc, #164]	@ (8000b04 <HAL_TIM_MspPostInit+0xc8>)
 8000a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a62:	4b28      	ldr	r3, [pc, #160]	@ (8000b04 <HAL_TIM_MspPostInit+0xc8>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	430a      	orrs	r2, r1
 8000a68:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a6a:	4b26      	ldr	r3, [pc, #152]	@ (8000b04 <HAL_TIM_MspPostInit+0xc8>)
 8000a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a76:	0021      	movs	r1, r4
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2280      	movs	r2, #128	@ 0x80
 8000a7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2202      	movs	r2, #2
 8000a82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2201      	movs	r2, #1
 8000a94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	187a      	adds	r2, r7, r1
 8000a98:	23a0      	movs	r3, #160	@ 0xa0
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	0011      	movs	r1, r2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f001 f9e2 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000aa4:	e027      	b.n	8000af6 <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM14)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a17      	ldr	r2, [pc, #92]	@ (8000b08 <HAL_TIM_MspPostInit+0xcc>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d122      	bne.n	8000af6 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <HAL_TIM_MspPostInit+0xc8>)
 8000ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <HAL_TIM_MspPostInit+0xc8>)
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	635a      	str	r2, [r3, #52]	@ 0x34
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <HAL_TIM_MspPostInit+0xc8>)
 8000abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ac8:	2114      	movs	r1, #20
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2210      	movs	r2, #16
 8000ace:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	187a      	adds	r2, r7, r1
 8000aea:	23a0      	movs	r3, #160	@ 0xa0
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	0011      	movs	r1, r2
 8000af0:	0018      	movs	r0, r3
 8000af2:	f001 f9b9 	bl	8001e68 <HAL_GPIO_Init>
}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b00b      	add	sp, #44	@ 0x2c
 8000afc:	bd90      	pop	{r4, r7, pc}
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	40000400 	.word	0x40000400
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40002000 	.word	0x40002000

08000b0c <hsv_to_rgb>:
// Diese Datei sollte von allen Effekten eingebunden werden, die Farboperationen benötigen.
// -----------------------------------------------------------------------------

#include "color_utils.h"

RGB_t hsv_to_rgb(uint8_t h, uint8_t s, uint8_t v) {
 8000b0c:	b5b0      	push	{r4, r5, r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	0004      	movs	r4, r0
 8000b14:	0008      	movs	r0, r1
 8000b16:	0011      	movs	r1, r2
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	1c22      	adds	r2, r4, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	1dbb      	adds	r3, r7, #6
 8000b20:	1c02      	adds	r2, r0, #0
 8000b22:	701a      	strb	r2, [r3, #0]
 8000b24:	1d7b      	adds	r3, r7, #5
 8000b26:	1c0a      	adds	r2, r1, #0
 8000b28:	701a      	strb	r2, [r3, #0]
    RGB_t rgb = {0, 0, 0};
 8000b2a:	210c      	movs	r1, #12
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2200      	movs	r2, #0
 8000b36:	705a      	strb	r2, [r3, #1]
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	709a      	strb	r2, [r3, #2]

    uint8_t region = h / 43;
 8000b3e:	2517      	movs	r5, #23
 8000b40:	197c      	adds	r4, r7, r5
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	212b      	movs	r1, #43	@ 0x2b
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff fadb 	bl	8000104 <__udivsi3>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	7023      	strb	r3, [r4, #0]
    uint8_t remainder = (h - (region * 43)) * 6;
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	7819      	ldrb	r1, [r3, #0]
 8000b56:	002c      	movs	r4, r5
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	069b      	lsls	r3, r3, #26
 8000b60:	1a9b      	subs	r3, r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	189b      	adds	r3, r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	189b      	adds	r3, r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	189b      	adds	r3, r3, r2
 8000b6e:	18cb      	adds	r3, r1, r3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2016      	movs	r0, #22
 8000b74:	183a      	adds	r2, r7, r0
 8000b76:	1c19      	adds	r1, r3, #0
 8000b78:	1c0b      	adds	r3, r1, #0
 8000b7a:	18db      	adds	r3, r3, r3
 8000b7c:	185b      	adds	r3, r3, r1
 8000b7e:	18db      	adds	r3, r3, r3
 8000b80:	7013      	strb	r3, [r2, #0]

    uint8_t p = (v * (255 - s)) >> 8;
 8000b82:	1d7b      	adds	r3, r7, #5
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	1dba      	adds	r2, r7, #6
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	21ff      	movs	r1, #255	@ 0xff
 8000b8c:	1a8a      	subs	r2, r1, r2
 8000b8e:	4353      	muls	r3, r2
 8000b90:	121a      	asrs	r2, r3, #8
 8000b92:	2315      	movs	r3, #21
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	701a      	strb	r2, [r3, #0]
    uint8_t q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8000b98:	1d7b      	adds	r3, r7, #5
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	1dba      	adds	r2, r7, #6
 8000b9e:	7812      	ldrb	r2, [r2, #0]
 8000ba0:	1839      	adds	r1, r7, r0
 8000ba2:	7809      	ldrb	r1, [r1, #0]
 8000ba4:	434a      	muls	r2, r1
 8000ba6:	1212      	asrs	r2, r2, #8
 8000ba8:	21ff      	movs	r1, #255	@ 0xff
 8000baa:	1a8a      	subs	r2, r1, r2
 8000bac:	4353      	muls	r3, r2
 8000bae:	121a      	asrs	r2, r3, #8
 8000bb0:	2314      	movs	r3, #20
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	701a      	strb	r2, [r3, #0]
    uint8_t t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8000bb6:	1d7b      	adds	r3, r7, #5
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	1dba      	adds	r2, r7, #6
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	1839      	adds	r1, r7, r0
 8000bc0:	7809      	ldrb	r1, [r1, #0]
 8000bc2:	20ff      	movs	r0, #255	@ 0xff
 8000bc4:	1a41      	subs	r1, r0, r1
 8000bc6:	434a      	muls	r2, r1
 8000bc8:	1212      	asrs	r2, r2, #8
 8000bca:	21ff      	movs	r1, #255	@ 0xff
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	4353      	muls	r3, r2
 8000bd0:	121a      	asrs	r2, r3, #8
 8000bd2:	2313      	movs	r3, #19
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	701a      	strb	r2, [r3, #0]

    switch (region) {
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	d854      	bhi.n	8000c8a <hsv_to_rgb+0x17e>
 8000be0:	009a      	lsls	r2, r3, #2
 8000be2:	4b43      	ldr	r3, [pc, #268]	@ (8000cf0 <hsv_to_rgb+0x1e4>)
 8000be4:	18d3      	adds	r3, r2, r3
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	469f      	mov	pc, r3
        case 0:
            rgb.r = v; rgb.g = t; rgb.b = p; break;
 8000bea:	210c      	movs	r1, #12
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	1d7a      	adds	r2, r7, #5
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	701a      	strb	r2, [r3, #0]
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2213      	movs	r2, #19
 8000bf8:	18ba      	adds	r2, r7, r2
 8000bfa:	7812      	ldrb	r2, [r2, #0]
 8000bfc:	705a      	strb	r2, [r3, #1]
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2215      	movs	r2, #21
 8000c02:	18ba      	adds	r2, r7, r2
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	709a      	strb	r2, [r3, #2]
 8000c08:	e04f      	b.n	8000caa <hsv_to_rgb+0x19e>
        case 1:
            rgb.r = q; rgb.g = v; rgb.b = p; break;
 8000c0a:	210c      	movs	r1, #12
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2214      	movs	r2, #20
 8000c10:	18ba      	adds	r2, r7, r2
 8000c12:	7812      	ldrb	r2, [r2, #0]
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	1d7a      	adds	r2, r7, #5
 8000c1a:	7812      	ldrb	r2, [r2, #0]
 8000c1c:	705a      	strb	r2, [r3, #1]
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2215      	movs	r2, #21
 8000c22:	18ba      	adds	r2, r7, r2
 8000c24:	7812      	ldrb	r2, [r2, #0]
 8000c26:	709a      	strb	r2, [r3, #2]
 8000c28:	e03f      	b.n	8000caa <hsv_to_rgb+0x19e>
        case 2:
            rgb.r = p; rgb.g = v; rgb.b = t; break;
 8000c2a:	210c      	movs	r1, #12
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2215      	movs	r2, #21
 8000c30:	18ba      	adds	r2, r7, r2
 8000c32:	7812      	ldrb	r2, [r2, #0]
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	1d7a      	adds	r2, r7, #5
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	705a      	strb	r2, [r3, #1]
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2213      	movs	r2, #19
 8000c42:	18ba      	adds	r2, r7, r2
 8000c44:	7812      	ldrb	r2, [r2, #0]
 8000c46:	709a      	strb	r2, [r3, #2]
 8000c48:	e02f      	b.n	8000caa <hsv_to_rgb+0x19e>
        case 3:
            rgb.r = p; rgb.g = q; rgb.b = v; break;
 8000c4a:	210c      	movs	r1, #12
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2215      	movs	r2, #21
 8000c50:	18ba      	adds	r2, r7, r2
 8000c52:	7812      	ldrb	r2, [r2, #0]
 8000c54:	701a      	strb	r2, [r3, #0]
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2214      	movs	r2, #20
 8000c5a:	18ba      	adds	r2, r7, r2
 8000c5c:	7812      	ldrb	r2, [r2, #0]
 8000c5e:	705a      	strb	r2, [r3, #1]
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	1d7a      	adds	r2, r7, #5
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	709a      	strb	r2, [r3, #2]
 8000c68:	e01f      	b.n	8000caa <hsv_to_rgb+0x19e>
        case 4:
            rgb.r = t; rgb.g = p; rgb.b = v; break;
 8000c6a:	210c      	movs	r1, #12
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2213      	movs	r2, #19
 8000c70:	18ba      	adds	r2, r7, r2
 8000c72:	7812      	ldrb	r2, [r2, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2215      	movs	r2, #21
 8000c7a:	18ba      	adds	r2, r7, r2
 8000c7c:	7812      	ldrb	r2, [r2, #0]
 8000c7e:	705a      	strb	r2, [r3, #1]
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	1d7a      	adds	r2, r7, #5
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	709a      	strb	r2, [r3, #2]
 8000c88:	e00f      	b.n	8000caa <hsv_to_rgb+0x19e>
        default:
            rgb.r = v; rgb.g = p; rgb.b = q; break;
 8000c8a:	210c      	movs	r1, #12
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	1d7a      	adds	r2, r7, #5
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2215      	movs	r2, #21
 8000c98:	18ba      	adds	r2, r7, r2
 8000c9a:	7812      	ldrb	r2, [r2, #0]
 8000c9c:	705a      	strb	r2, [r3, #1]
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2214      	movs	r2, #20
 8000ca2:	18ba      	adds	r2, r7, r2
 8000ca4:	7812      	ldrb	r2, [r2, #0]
 8000ca6:	709a      	strb	r2, [r3, #2]
 8000ca8:	46c0      	nop			@ (mov r8, r8)
    }

    return rgb;
 8000caa:	2010      	movs	r0, #16
 8000cac:	183b      	adds	r3, r7, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	18ba      	adds	r2, r7, r2
 8000cb2:	8811      	ldrh	r1, [r2, #0]
 8000cb4:	8019      	strh	r1, [r3, #0]
 8000cb6:	7892      	ldrb	r2, [r2, #2]
 8000cb8:	709a      	strb	r2, [r3, #2]
 8000cba:	183a      	adds	r2, r7, r0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	7811      	ldrb	r1, [r2, #0]
 8000cc0:	20ff      	movs	r0, #255	@ 0xff
 8000cc2:	4001      	ands	r1, r0
 8000cc4:	20ff      	movs	r0, #255	@ 0xff
 8000cc6:	4383      	bics	r3, r0
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	7851      	ldrb	r1, [r2, #1]
 8000ccc:	20ff      	movs	r0, #255	@ 0xff
 8000cce:	4001      	ands	r1, r0
 8000cd0:	0209      	lsls	r1, r1, #8
 8000cd2:	4808      	ldr	r0, [pc, #32]	@ (8000cf4 <hsv_to_rgb+0x1e8>)
 8000cd4:	4003      	ands	r3, r0
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	7892      	ldrb	r2, [r2, #2]
 8000cda:	21ff      	movs	r1, #255	@ 0xff
 8000cdc:	400a      	ands	r2, r1
 8000cde:	0412      	lsls	r2, r2, #16
 8000ce0:	4905      	ldr	r1, [pc, #20]	@ (8000cf8 <hsv_to_rgb+0x1ec>)
 8000ce2:	400b      	ands	r3, r1
 8000ce4:	4313      	orrs	r3, r2
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b006      	add	sp, #24
 8000cec:	bdb0      	pop	{r4, r5, r7, pc}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	080039d4 	.word	0x080039d4
 8000cf4:	ffff00ff 	.word	0xffff00ff
 8000cf8:	ff00ffff 	.word	0xff00ffff

08000cfc <encode_leds_to_pwm>:
// -----------------------------------------------------------------------------
// encode_leds_to_pwm
// Kodiert den aktuellen Zustand von led_state[] in das PWM-Bufferformat für DMA.
// Reihenfolge: GRB (wie von SK6812/WS2812 erwartet).
// -----------------------------------------------------------------------------
static void encode_leds_to_pwm(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
    uint16_t *p = pwm_buffer;
 8000d02:	4b35      	ldr	r3, [pc, #212]	@ (8000dd8 <encode_leds_to_pwm+0xdc>)
 8000d04:	617b      	str	r3, [r7, #20]

    for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8000d06:	2313      	movs	r3, #19
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	e04a      	b.n	8000da6 <encode_leds_to_pwm+0xaa>
        uint8_t colors[3] = { led_state[i].g, led_state[i].r, led_state[i].b };
 8000d10:	2013      	movs	r0, #19
 8000d12:	183b      	adds	r3, r7, r0
 8000d14:	781a      	ldrb	r2, [r3, #0]
 8000d16:	4931      	ldr	r1, [pc, #196]	@ (8000ddc <encode_leds_to_pwm+0xe0>)
 8000d18:	0013      	movs	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	189b      	adds	r3, r3, r2
 8000d1e:	18cb      	adds	r3, r1, r3
 8000d20:	3301      	adds	r3, #1
 8000d22:	781a      	ldrb	r2, [r3, #0]
 8000d24:	003b      	movs	r3, r7
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	183b      	adds	r3, r7, r0
 8000d2a:	781a      	ldrb	r2, [r3, #0]
 8000d2c:	492b      	ldr	r1, [pc, #172]	@ (8000ddc <encode_leds_to_pwm+0xe0>)
 8000d2e:	0013      	movs	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	189b      	adds	r3, r3, r2
 8000d34:	5c5a      	ldrb	r2, [r3, r1]
 8000d36:	003b      	movs	r3, r7
 8000d38:	705a      	strb	r2, [r3, #1]
 8000d3a:	183b      	adds	r3, r7, r0
 8000d3c:	781a      	ldrb	r2, [r3, #0]
 8000d3e:	4927      	ldr	r1, [pc, #156]	@ (8000ddc <encode_leds_to_pwm+0xe0>)
 8000d40:	0013      	movs	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	189b      	adds	r3, r3, r2
 8000d46:	18cb      	adds	r3, r1, r3
 8000d48:	3302      	adds	r3, #2
 8000d4a:	781a      	ldrb	r2, [r3, #0]
 8000d4c:	003b      	movs	r3, r7
 8000d4e:	709a      	strb	r2, [r3, #2]
        for (int c = 0; c < 3; ++c) {
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	e01e      	b.n	8000d94 <encode_leds_to_pwm+0x98>
            for (int bit = 7; bit >= 0; --bit) {
 8000d56:	2307      	movs	r3, #7
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	e015      	b.n	8000d88 <encode_leds_to_pwm+0x8c>
                *p++ = (colors[c] & (1 << bit)) ? TIMER_PWM_HIGH : TIMER_PWM_LOW;
 8000d5c:	003a      	movs	r2, r7
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	18d3      	adds	r3, r2, r3
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	001a      	movs	r2, r3
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	411a      	asrs	r2, r3
 8000d6a:	0013      	movs	r3, r2
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d001      	beq.n	8000d76 <encode_leds_to_pwm+0x7a>
 8000d72:	2141      	movs	r1, #65	@ 0x41
 8000d74:	e000      	b.n	8000d78 <encode_leds_to_pwm+0x7c>
 8000d76:	211e      	movs	r1, #30
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	1c9a      	adds	r2, r3, #2
 8000d7c:	617a      	str	r2, [r7, #20]
 8000d7e:	1c0a      	adds	r2, r1, #0
 8000d80:	801a      	strh	r2, [r3, #0]
            for (int bit = 7; bit >= 0; --bit) {
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	dae6      	bge.n	8000d5c <encode_leds_to_pwm+0x60>
        for (int c = 0; c < 3; ++c) {
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3301      	adds	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	dddd      	ble.n	8000d56 <encode_leds_to_pwm+0x5a>
    for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8000d9a:	2213      	movs	r2, #19
 8000d9c:	18bb      	adds	r3, r7, r2
 8000d9e:	18ba      	adds	r2, r7, r2
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	3201      	adds	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	2313      	movs	r3, #19
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b0b      	cmp	r3, #11
 8000dae:	d9af      	bls.n	8000d10 <encode_leds_to_pwm+0x14>
            }
        }
    }

    // Reset-Slots füllen (Latch-Zeit)
    for (int i = 0; i < LED_RESET_SLOTS; ++i) {
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	e007      	b.n	8000dc6 <encode_leds_to_pwm+0xca>
        *p++ = 0;
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	1c9a      	adds	r2, r3, #2
 8000dba:	617a      	str	r2, [r7, #20]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < LED_RESET_SLOTS; ++i) {
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dca:	ddf4      	ble.n	8000db6 <encode_leds_to_pwm+0xba>
    }
}
 8000dcc:	46c0      	nop			@ (mov r8, r8)
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b006      	add	sp, #24
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	20000130 	.word	0x20000130
 8000ddc:	200003d0 	.word	0x200003d0

08000de0 <led_driver_update>:
// -----------------------------------------------------------------------------
// led_driver_update
// Kodiert den aktuellen LED-Zustand in den DMA-Buffer (ohne Übertragung zu starten).
// Nach jedem Setzen von LEDs aufrufen!
// -----------------------------------------------------------------------------
void led_driver_update(void) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
    encode_leds_to_pwm();
 8000de4:	f7ff ff8a 	bl	8000cfc <encode_leds_to_pwm>
}
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <led_driver_set_all>:

// -----------------------------------------------------------------------------
// led_driver_set_all
// Setzt alle LEDs auf die gewünschte Farbe (RGB).
// -----------------------------------------------------------------------------
void led_driver_set_all(RGB_t color) {
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	6018      	str	r0, [r3, #0]
    for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e012      	b.n	8000e2a <led_driver_set_all+0x3a>
        led_state[i] = color;
 8000e04:	240f      	movs	r4, #15
 8000e06:	193b      	adds	r3, r7, r4
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	490d      	ldr	r1, [pc, #52]	@ (8000e40 <led_driver_set_all+0x50>)
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	189b      	adds	r3, r3, r2
 8000e12:	1d3a      	adds	r2, r7, #4
 8000e14:	18cb      	adds	r3, r1, r3
 8000e16:	0011      	movs	r1, r2
 8000e18:	2203      	movs	r2, #3
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f002 fd94 	bl	8003948 <memcpy>
    for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8000e20:	193b      	adds	r3, r7, r4
 8000e22:	193a      	adds	r2, r7, r4
 8000e24:	7812      	ldrb	r2, [r2, #0]
 8000e26:	3201      	adds	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b0b      	cmp	r3, #11
 8000e32:	d9e7      	bls.n	8000e04 <led_driver_set_all+0x14>
    }
}
 8000e34:	46c0      	nop			@ (mov r8, r8)
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b005      	add	sp, #20
 8000e3c:	bd90      	pop	{r4, r7, pc}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	200003d0 	.word	0x200003d0

08000e44 <led_driver_clear>:

// -----------------------------------------------------------------------------
// led_driver_clear
// Schaltet alle LEDs aus (setzt sie auf schwarz).
// -----------------------------------------------------------------------------
void led_driver_clear(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
    RGB_t black = {0, 0, 0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	705a      	strb	r2, [r3, #1]
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	709a      	strb	r2, [r3, #2]
    led_driver_set_all(black);
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	6818      	ldr	r0, [r3, #0]
 8000e60:	f7ff ffc6 	bl	8000df0 <led_driver_set_all>
}
 8000e64:	46c0      	nop			@ (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <led_effect_blink_update>:
    state = false;
    last_toggle = timer_tick;
    led_driver_clear();
}

void led_effect_blink_update(uint32_t tick) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    // Geschwindigkeit: speed 0–255 → Intervall 1000–200 ms
    uint32_t interval = 200 + (1000 - (uint32_t)effect_params.speed * 8);
 8000e74:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <led_effect_blink_update+0xb4>)
 8000e76:	789b      	ldrb	r3, [r3, #2]
 8000e78:	001a      	movs	r2, r3
 8000e7a:	2396      	movs	r3, #150	@ 0x96
 8000e7c:	1a9b      	subs	r3, r3, r2
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	613b      	str	r3, [r7, #16]

    if (tick - last_toggle >= interval) {
 8000e82:	4b28      	ldr	r3, [pc, #160]	@ (8000f24 <led_effect_blink_update+0xb8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d843      	bhi.n	8000f18 <led_effect_blink_update+0xac>
        last_toggle = tick;
 8000e90:	4b24      	ldr	r3, [pc, #144]	@ (8000f24 <led_effect_blink_update+0xb8>)
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	601a      	str	r2, [r3, #0]
        state = !state;
 8000e96:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <led_effect_blink_update+0xbc>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	1e5a      	subs	r2, r3, #1
 8000e9c:	4193      	sbcs	r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4053      	eors	r3, r2
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	1c1a      	adds	r2, r3, #0
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4013      	ands	r3, r2
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b1e      	ldr	r3, [pc, #120]	@ (8000f28 <led_effect_blink_update+0xbc>)
 8000eb0:	701a      	strb	r2, [r3, #0]

        if (state) {
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <led_effect_blink_update+0xbc>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d02a      	beq.n	8000f10 <led_effect_blink_update+0xa4>
            // KORREKTUR: Funktionsname hsv2rgb → hsv_to_rgb
            RGB_t color = hsv_to_rgb(effect_params.hue, 255, effect_params.brightness);
 8000eba:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <led_effect_blink_update+0xb4>)
 8000ebc:	7818      	ldrb	r0, [r3, #0]
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <led_effect_blink_update+0xb4>)
 8000ec0:	785b      	ldrb	r3, [r3, #1]
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	21ff      	movs	r1, #255	@ 0xff
 8000ec6:	f7ff fe21 	bl	8000b0c <hsv_to_rgb>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	001a      	movs	r2, r3
 8000ece:	230c      	movs	r3, #12
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	1c11      	adds	r1, r2, #0
 8000ed4:	7019      	strb	r1, [r3, #0]
 8000ed6:	0411      	lsls	r1, r2, #16
 8000ed8:	0e09      	lsrs	r1, r1, #24
 8000eda:	7059      	strb	r1, [r3, #1]
 8000edc:	0212      	lsls	r2, r2, #8
 8000ede:	0e12      	lsrs	r2, r2, #24
 8000ee0:	709a      	strb	r2, [r3, #2]
            for (int i = 0; i < LED_COUNT; i++) {
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	e00f      	b.n	8000f08 <led_effect_blink_update+0x9c>
                led_state[i] = color;
 8000ee8:	4910      	ldr	r1, [pc, #64]	@ (8000f2c <led_effect_blink_update+0xc0>)
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	0013      	movs	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	189b      	adds	r3, r3, r2
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	18ba      	adds	r2, r7, r2
 8000ef6:	18cb      	adds	r3, r1, r3
 8000ef8:	0011      	movs	r1, r2
 8000efa:	2203      	movs	r2, #3
 8000efc:	0018      	movs	r0, r3
 8000efe:	f002 fd23 	bl	8003948 <memcpy>
            for (int i = 0; i < LED_COUNT; i++) {
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b0b      	cmp	r3, #11
 8000f0c:	ddec      	ble.n	8000ee8 <led_effect_blink_update+0x7c>
 8000f0e:	e001      	b.n	8000f14 <led_effect_blink_update+0xa8>
            }
        } else {
            led_driver_clear();
 8000f10:	f7ff ff98 	bl	8000e44 <led_driver_clear>
        }

        led_driver_update();
 8000f14:	f7ff ff64 	bl	8000de0 <led_driver_update>
    }
}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b006      	add	sp, #24
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000041c 	.word	0x2000041c
 8000f24:	200003f8 	.word	0x200003f8
 8000f28:	200003f4 	.word	0x200003f4
 8000f2c:	200003d0 	.word	0x200003d0

08000f30 <led_effect_breathe_update>:
    brightness = 0;
    direction = 1;
    last_update = 0;
}

void led_effect_breathe_update(uint32_t tick) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    // Geschwindigkeit: Je höher effect_params.speed, desto schneller das Atmen
    uint32_t interval = 50 - effect_params.speed; // Wertebereich ggf. anpassen
 8000f38:	4b2c      	ldr	r3, [pc, #176]	@ (8000fec <led_effect_breathe_update+0xbc>)
 8000f3a:	789b      	ldrb	r3, [r3, #2]
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	2332      	movs	r3, #50	@ 0x32
 8000f40:	1a9b      	subs	r3, r3, r2
 8000f42:	613b      	str	r3, [r7, #16]

    if (tick - last_update < interval) return;
 8000f44:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff0 <led_effect_breathe_update+0xc0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d847      	bhi.n	8000fe2 <led_effect_breathe_update+0xb2>
    last_update = tick;
 8000f52:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <led_effect_breathe_update+0xc0>)
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	601a      	str	r2, [r3, #0]

    // Richtung umkehren bei Max/Min
    if (brightness == 255) direction = -1;
 8000f58:	4b26      	ldr	r3, [pc, #152]	@ (8000ff4 <led_effect_breathe_update+0xc4>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2bff      	cmp	r3, #255	@ 0xff
 8000f5e:	d102      	bne.n	8000f66 <led_effect_breathe_update+0x36>
 8000f60:	4b25      	ldr	r3, [pc, #148]	@ (8000ff8 <led_effect_breathe_update+0xc8>)
 8000f62:	22ff      	movs	r2, #255	@ 0xff
 8000f64:	701a      	strb	r2, [r3, #0]
    if (brightness == 0) direction = 1;
 8000f66:	4b23      	ldr	r3, [pc, #140]	@ (8000ff4 <led_effect_breathe_update+0xc4>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <led_effect_breathe_update+0x44>
 8000f6e:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <led_effect_breathe_update+0xc8>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]

    brightness += direction;
 8000f74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <led_effect_breathe_update+0xc4>)
 8000f76:	781a      	ldrb	r2, [r3, #0]
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <led_effect_breathe_update+0xc8>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	18d3      	adds	r3, r2, r3
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff4 <led_effect_breathe_update+0xc4>)
 8000f86:	701a      	strb	r2, [r3, #0]

    RGB_t color = hsv_to_rgb(effect_params.hue, 255, brightness);
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <led_effect_breathe_update+0xbc>)
 8000f8a:	7818      	ldrb	r0, [r3, #0]
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <led_effect_breathe_update+0xc4>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	001a      	movs	r2, r3
 8000f92:	21ff      	movs	r1, #255	@ 0xff
 8000f94:	f7ff fdba 	bl	8000b0c <hsv_to_rgb>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	1c11      	adds	r1, r2, #0
 8000fa2:	7019      	strb	r1, [r3, #0]
 8000fa4:	0411      	lsls	r1, r2, #16
 8000fa6:	0e09      	lsrs	r1, r1, #24
 8000fa8:	7059      	strb	r1, [r3, #1]
 8000faa:	0212      	lsls	r2, r2, #8
 8000fac:	0e12      	lsrs	r2, r2, #24
 8000fae:	709a      	strb	r2, [r3, #2]

    for (int i = 0; i < 12; i++) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e00f      	b.n	8000fd6 <led_effect_breathe_update+0xa6>
        led_state[i] = color;
 8000fb6:	4911      	ldr	r1, [pc, #68]	@ (8000ffc <led_effect_breathe_update+0xcc>)
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	0013      	movs	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	189b      	adds	r3, r3, r2
 8000fc0:	220c      	movs	r2, #12
 8000fc2:	18ba      	adds	r2, r7, r2
 8000fc4:	18cb      	adds	r3, r1, r3
 8000fc6:	0011      	movs	r1, r2
 8000fc8:	2203      	movs	r2, #3
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f002 fcbc 	bl	8003948 <memcpy>
    for (int i = 0; i < 12; i++) {
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	2b0b      	cmp	r3, #11
 8000fda:	ddec      	ble.n	8000fb6 <led_effect_breathe_update+0x86>
    }

    led_driver_update();
 8000fdc:	f7ff ff00 	bl	8000de0 <led_driver_update>
 8000fe0:	e000      	b.n	8000fe4 <led_effect_breathe_update+0xb4>
    if (tick - last_update < interval) return;
 8000fe2:	46c0      	nop			@ (mov r8, r8)
}
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b006      	add	sp, #24
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	2000041c 	.word	0x2000041c
 8000ff0:	20000400 	.word	0x20000400
 8000ff4:	200003fc 	.word	0x200003fc
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	200003d0 	.word	0x200003d0

08001000 <led_effect_chase_left_update>:
void led_effect_chase_left_start(void) {
    current_pos = 0;
    last_update = 0;
}

void led_effect_chase_left_update(uint32_t tick) {
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    // Geschwindigkeit: Je höher effect_params.speed, desto kürzer das Intervall
    uint32_t interval = 150 - effect_params.speed * 10;
 8001008:	4b33      	ldr	r3, [pc, #204]	@ (80010d8 <led_effect_chase_left_update+0xd8>)
 800100a:	789b      	ldrb	r3, [r3, #2]
 800100c:	001a      	movs	r2, r3
 800100e:	0013      	movs	r3, r2
 8001010:	075b      	lsls	r3, r3, #29
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	1a9b      	subs	r3, r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	3396      	adds	r3, #150	@ 0x96
 800101c:	613b      	str	r3, [r7, #16]
    if (tick - last_update < interval) return;
 800101e:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <led_effect_chase_left_update+0xdc>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	429a      	cmp	r2, r3
 800102a:	d850      	bhi.n	80010ce <led_effect_chase_left_update+0xce>
    last_update = tick;
 800102c:	4b2b      	ldr	r3, [pc, #172]	@ (80010dc <led_effect_chase_left_update+0xdc>)
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 12; i++) {
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e039      	b.n	80010ac <led_effect_chase_left_update+0xac>
        led_state[i] = (i == current_pos)
 8001038:	4b29      	ldr	r3, [pc, #164]	@ (80010e0 <led_effect_chase_left_update+0xe0>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	001a      	movs	r2, r3
            ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
            : (RGB_t){0, 0, 0};
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	4293      	cmp	r3, r2
 8001042:	d117      	bne.n	8001074 <led_effect_chase_left_update+0x74>
            ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
 8001044:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <led_effect_chase_left_update+0xd8>)
 8001046:	7818      	ldrb	r0, [r3, #0]
 8001048:	4b23      	ldr	r3, [pc, #140]	@ (80010d8 <led_effect_chase_left_update+0xd8>)
 800104a:	785a      	ldrb	r2, [r3, #1]
 800104c:	4d25      	ldr	r5, [pc, #148]	@ (80010e4 <led_effect_chase_left_update+0xe4>)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	001c      	movs	r4, r3
 8001052:	0064      	lsls	r4, r4, #1
 8001054:	18e4      	adds	r4, r4, r3
 8001056:	21ff      	movs	r1, #255	@ 0xff
 8001058:	f7ff fd58 	bl	8000b0c <hsv_to_rgb>
 800105c:	0003      	movs	r3, r0
 800105e:	1c1a      	adds	r2, r3, #0
 8001060:	5562      	strb	r2, [r4, r5]
 8001062:	041a      	lsls	r2, r3, #16
 8001064:	0e11      	lsrs	r1, r2, #24
 8001066:	192a      	adds	r2, r5, r4
 8001068:	7051      	strb	r1, [r2, #1]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	0e1a      	lsrs	r2, r3, #24
 800106e:	192b      	adds	r3, r5, r4
 8001070:	709a      	strb	r2, [r3, #2]
 8001072:	e018      	b.n	80010a6 <led_effect_chase_left_update+0xa6>
        led_state[i] = (i == current_pos)
 8001074:	491b      	ldr	r1, [pc, #108]	@ (80010e4 <led_effect_chase_left_update+0xe4>)
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	0013      	movs	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	189b      	adds	r3, r3, r2
 800107e:	2200      	movs	r2, #0
 8001080:	545a      	strb	r2, [r3, r1]
 8001082:	4918      	ldr	r1, [pc, #96]	@ (80010e4 <led_effect_chase_left_update+0xe4>)
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	0013      	movs	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	189b      	adds	r3, r3, r2
 800108c:	18cb      	adds	r3, r1, r3
 800108e:	3301      	adds	r3, #1
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	4913      	ldr	r1, [pc, #76]	@ (80010e4 <led_effect_chase_left_update+0xe4>)
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	0013      	movs	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	189b      	adds	r3, r3, r2
 800109e:	18cb      	adds	r3, r1, r3
 80010a0:	3302      	adds	r3, #2
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 12; i++) {
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	2b0b      	cmp	r3, #11
 80010b0:	ddc2      	ble.n	8001038 <led_effect_chase_left_update+0x38>
    }

    current_pos = (current_pos + 1) % 12;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <led_effect_chase_left_update+0xe0>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	210c      	movs	r1, #12
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff f992 	bl	80003e4 <__aeabi_idivmod>
 80010c0:	000b      	movs	r3, r1
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <led_effect_chase_left_update+0xe0>)
 80010c6:	701a      	strb	r2, [r3, #0]
    led_driver_update();
 80010c8:	f7ff fe8a 	bl	8000de0 <led_driver_update>
 80010cc:	e000      	b.n	80010d0 <led_effect_chase_left_update+0xd0>
    if (tick - last_update < interval) return;
 80010ce:	46c0      	nop			@ (mov r8, r8)
}
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b006      	add	sp, #24
 80010d4:	bdb0      	pop	{r4, r5, r7, pc}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	2000041c 	.word	0x2000041c
 80010dc:	20000408 	.word	0x20000408
 80010e0:	20000404 	.word	0x20000404
 80010e4:	200003d0 	.word	0x200003d0

080010e8 <led_effect_chase_right_update>:
void led_effect_chase_right_start(void) {
    current_pos = 11;
    last_update = 0;
}

void led_effect_chase_right_update(uint32_t tick) {
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    // Geschwindigkeit: Je höher effect_params.speed, desto kürzer das Intervall
    uint32_t interval = 150 - effect_params.speed * 10;
 80010f0:	4b33      	ldr	r3, [pc, #204]	@ (80011c0 <led_effect_chase_right_update+0xd8>)
 80010f2:	789b      	ldrb	r3, [r3, #2]
 80010f4:	001a      	movs	r2, r3
 80010f6:	0013      	movs	r3, r2
 80010f8:	075b      	lsls	r3, r3, #29
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	3396      	adds	r3, #150	@ 0x96
 8001104:	613b      	str	r3, [r7, #16]
    if (tick - last_update < interval) return;
 8001106:	4b2f      	ldr	r3, [pc, #188]	@ (80011c4 <led_effect_chase_right_update+0xdc>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d851      	bhi.n	80011b8 <led_effect_chase_right_update+0xd0>
    last_update = tick;
 8001114:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <led_effect_chase_right_update+0xdc>)
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 12; i++) {
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	e039      	b.n	8001194 <led_effect_chase_right_update+0xac>
        led_state[i] = (i == current_pos)
 8001120:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <led_effect_chase_right_update+0xe0>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	001a      	movs	r2, r3
            ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
            : (RGB_t){0, 0, 0};
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	4293      	cmp	r3, r2
 800112a:	d117      	bne.n	800115c <led_effect_chase_right_update+0x74>
            ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
 800112c:	4b24      	ldr	r3, [pc, #144]	@ (80011c0 <led_effect_chase_right_update+0xd8>)
 800112e:	7818      	ldrb	r0, [r3, #0]
 8001130:	4b23      	ldr	r3, [pc, #140]	@ (80011c0 <led_effect_chase_right_update+0xd8>)
 8001132:	785a      	ldrb	r2, [r3, #1]
 8001134:	4d25      	ldr	r5, [pc, #148]	@ (80011cc <led_effect_chase_right_update+0xe4>)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	001c      	movs	r4, r3
 800113a:	0064      	lsls	r4, r4, #1
 800113c:	18e4      	adds	r4, r4, r3
 800113e:	21ff      	movs	r1, #255	@ 0xff
 8001140:	f7ff fce4 	bl	8000b0c <hsv_to_rgb>
 8001144:	0003      	movs	r3, r0
 8001146:	1c1a      	adds	r2, r3, #0
 8001148:	5562      	strb	r2, [r4, r5]
 800114a:	041a      	lsls	r2, r3, #16
 800114c:	0e11      	lsrs	r1, r2, #24
 800114e:	192a      	adds	r2, r5, r4
 8001150:	7051      	strb	r1, [r2, #1]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	0e1a      	lsrs	r2, r3, #24
 8001156:	192b      	adds	r3, r5, r4
 8001158:	709a      	strb	r2, [r3, #2]
 800115a:	e018      	b.n	800118e <led_effect_chase_right_update+0xa6>
        led_state[i] = (i == current_pos)
 800115c:	491b      	ldr	r1, [pc, #108]	@ (80011cc <led_effect_chase_right_update+0xe4>)
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	0013      	movs	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	189b      	adds	r3, r3, r2
 8001166:	2200      	movs	r2, #0
 8001168:	545a      	strb	r2, [r3, r1]
 800116a:	4918      	ldr	r1, [pc, #96]	@ (80011cc <led_effect_chase_right_update+0xe4>)
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	0013      	movs	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	189b      	adds	r3, r3, r2
 8001174:	18cb      	adds	r3, r1, r3
 8001176:	3301      	adds	r3, #1
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	4913      	ldr	r1, [pc, #76]	@ (80011cc <led_effect_chase_right_update+0xe4>)
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	0013      	movs	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	189b      	adds	r3, r3, r2
 8001186:	18cb      	adds	r3, r1, r3
 8001188:	3302      	adds	r3, #2
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 12; i++) {
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2b0b      	cmp	r3, #11
 8001198:	ddc2      	ble.n	8001120 <led_effect_chase_right_update+0x38>
    }

    current_pos = (current_pos == 0) ? 11 : current_pos - 1;
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <led_effect_chase_right_update+0xe0>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <led_effect_chase_right_update+0xc4>
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <led_effect_chase_right_update+0xe0>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	e000      	b.n	80011ae <led_effect_chase_right_update+0xc6>
 80011ac:	220b      	movs	r2, #11
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <led_effect_chase_right_update+0xe0>)
 80011b0:	701a      	strb	r2, [r3, #0]
    led_driver_update();
 80011b2:	f7ff fe15 	bl	8000de0 <led_driver_update>
 80011b6:	e000      	b.n	80011ba <led_effect_chase_right_update+0xd2>
    if (tick - last_update < interval) return;
 80011b8:	46c0      	nop			@ (mov r8, r8)
}
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b006      	add	sp, #24
 80011be:	bdb0      	pop	{r4, r5, r7, pc}
 80011c0:	2000041c 	.word	0x2000041c
 80011c4:	20000410 	.word	0x20000410
 80011c8:	2000040c 	.word	0x2000040c
 80011cc:	200003d0 	.word	0x200003d0

080011d0 <led_effect_config_mode_update>:
    active_led = 0;
    last_update = 0;
    on = 1;
}

void led_effect_config_mode_update(uint32_t tick) {
 80011d0:	b5b0      	push	{r4, r5, r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    if (tick - last_update < (200 - effect_params.speed * 10)) return;
 80011d8:	4b37      	ldr	r3, [pc, #220]	@ (80012b8 <led_effect_config_mode_update+0xe8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	1ad1      	subs	r1, r2, r3
 80011e0:	4b36      	ldr	r3, [pc, #216]	@ (80012bc <led_effect_config_mode_update+0xec>)
 80011e2:	789b      	ldrb	r3, [r3, #2]
 80011e4:	001a      	movs	r2, r3
 80011e6:	0013      	movs	r3, r2
 80011e8:	075b      	lsls	r3, r3, #29
 80011ea:	1a9b      	subs	r3, r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	1a9b      	subs	r3, r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	33c8      	adds	r3, #200	@ 0xc8
 80011f4:	4299      	cmp	r1, r3
 80011f6:	d35b      	bcc.n	80012b0 <led_effect_config_mode_update+0xe0>
    last_update = tick;
 80011f8:	4b2f      	ldr	r3, [pc, #188]	@ (80012b8 <led_effect_config_mode_update+0xe8>)
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]

    on ^= 1;  // toggle LEDs an/aus
 80011fe:	4b30      	ldr	r3, [pc, #192]	@ (80012c0 <led_effect_config_mode_update+0xf0>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2201      	movs	r2, #1
 8001204:	4053      	eors	r3, r2
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b2d      	ldr	r3, [pc, #180]	@ (80012c0 <led_effect_config_mode_update+0xf0>)
 800120a:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 12; i++) {
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e03d      	b.n	800128e <led_effect_config_mode_update+0xbe>
        if (i == active_led && on) {
 8001212:	4b2c      	ldr	r3, [pc, #176]	@ (80012c4 <led_effect_config_mode_update+0xf4>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	001a      	movs	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4293      	cmp	r3, r2
 800121c:	d11b      	bne.n	8001256 <led_effect_config_mode_update+0x86>
 800121e:	4b28      	ldr	r3, [pc, #160]	@ (80012c0 <led_effect_config_mode_update+0xf0>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d017      	beq.n	8001256 <led_effect_config_mode_update+0x86>
            led_state[i] = hsv_to_rgb(effect_params.hue, 255, effect_params.brightness);
 8001226:	4b25      	ldr	r3, [pc, #148]	@ (80012bc <led_effect_config_mode_update+0xec>)
 8001228:	7818      	ldrb	r0, [r3, #0]
 800122a:	4b24      	ldr	r3, [pc, #144]	@ (80012bc <led_effect_config_mode_update+0xec>)
 800122c:	785a      	ldrb	r2, [r3, #1]
 800122e:	4d26      	ldr	r5, [pc, #152]	@ (80012c8 <led_effect_config_mode_update+0xf8>)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	001c      	movs	r4, r3
 8001234:	0064      	lsls	r4, r4, #1
 8001236:	18e4      	adds	r4, r4, r3
 8001238:	21ff      	movs	r1, #255	@ 0xff
 800123a:	f7ff fc67 	bl	8000b0c <hsv_to_rgb>
 800123e:	0003      	movs	r3, r0
 8001240:	1c1a      	adds	r2, r3, #0
 8001242:	5562      	strb	r2, [r4, r5]
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	0e11      	lsrs	r1, r2, #24
 8001248:	192a      	adds	r2, r5, r4
 800124a:	7051      	strb	r1, [r2, #1]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	0e1a      	lsrs	r2, r3, #24
 8001250:	192b      	adds	r3, r5, r4
 8001252:	709a      	strb	r2, [r3, #2]
 8001254:	e018      	b.n	8001288 <led_effect_config_mode_update+0xb8>
        } else {
            led_state[i].r = 0;
 8001256:	491c      	ldr	r1, [pc, #112]	@ (80012c8 <led_effect_config_mode_update+0xf8>)
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	0013      	movs	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	189b      	adds	r3, r3, r2
 8001260:	2200      	movs	r2, #0
 8001262:	545a      	strb	r2, [r3, r1]
            led_state[i].g = 0;
 8001264:	4918      	ldr	r1, [pc, #96]	@ (80012c8 <led_effect_config_mode_update+0xf8>)
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	0013      	movs	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	189b      	adds	r3, r3, r2
 800126e:	18cb      	adds	r3, r1, r3
 8001270:	3301      	adds	r3, #1
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
            led_state[i].b = 0;
 8001276:	4914      	ldr	r1, [pc, #80]	@ (80012c8 <led_effect_config_mode_update+0xf8>)
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	0013      	movs	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	189b      	adds	r3, r3, r2
 8001280:	18cb      	adds	r3, r1, r3
 8001282:	3302      	adds	r3, #2
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 12; i++) {
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b0b      	cmp	r3, #11
 8001292:	ddbe      	ble.n	8001212 <led_effect_config_mode_update+0x42>
        }
    }

    active_led = (active_led + 1) % 12;
 8001294:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <led_effect_config_mode_update+0xf4>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	210c      	movs	r1, #12
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff f8a1 	bl	80003e4 <__aeabi_idivmod>
 80012a2:	000b      	movs	r3, r1
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <led_effect_config_mode_update+0xf4>)
 80012a8:	701a      	strb	r2, [r3, #0]

    led_driver_update();
 80012aa:	f7ff fd99 	bl	8000de0 <led_driver_update>
 80012ae:	e000      	b.n	80012b2 <led_effect_config_mode_update+0xe2>
    if (tick - last_update < (200 - effect_params.speed * 10)) return;
 80012b0:	46c0      	nop			@ (mov r8, r8)
}
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b004      	add	sp, #16
 80012b6:	bdb0      	pop	{r4, r5, r7, pc}
 80012b8:	20000414 	.word	0x20000414
 80012bc:	2000041c 	.word	0x2000041c
 80012c0:	20000419 	.word	0x20000419
 80012c4:	20000418 	.word	0x20000418
 80012c8:	200003d0 	.word	0x200003d0

080012cc <led_effect_engine_init>:
led_effect_id_t current_effect = LED_EFFECT_NONE;

// KORREKTUR: Globale Definition von effect_params_t effect_params hinzufügen
effect_params_t effect_params;

void led_effect_engine_init(void) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
    current_effect = LED_EFFECT_NONE;
 80012d0:	4b02      	ldr	r3, [pc, #8]	@ (80012dc <led_effect_engine_init+0x10>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
}
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000041a 	.word	0x2000041a

080012e0 <led_effect_engine_set>:

void led_effect_engine_set(led_effect_id_t effect) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	0002      	movs	r2, r0
 80012e8:	1dfb      	adds	r3, r7, #7
 80012ea:	701a      	strb	r2, [r3, #0]
    current_effect = effect;
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <led_effect_engine_set+0x1c>)
 80012ee:	1dfa      	adds	r2, r7, #7
 80012f0:	7812      	ldrb	r2, [r2, #0]
 80012f2:	701a      	strb	r2, [r3, #0]
}
 80012f4:	46c0      	nop			@ (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000041a 	.word	0x2000041a

08001300 <led_effect_engine_update>:

void led_effect_engine_update(uint32_t tick) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
    switch (current_effect) {
 8001308:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <led_effect_engine_update+0x74>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b08      	cmp	r3, #8
 800130e:	d82c      	bhi.n	800136a <led_effect_engine_update+0x6a>
 8001310:	009a      	lsls	r2, r3, #2
 8001312:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <led_effect_engine_update+0x78>)
 8001314:	18d3      	adds	r3, r2, r3
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	469f      	mov	pc, r3
        case LED_EFFECT_SOLID:
            led_effect_solid_update(tick);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	0018      	movs	r0, r3
 800131e:	f000 f91b 	bl	8001558 <led_effect_solid_update>
            break;
 8001322:	e023      	b.n	800136c <led_effect_engine_update+0x6c>
        case LED_EFFECT_BLINK:
            led_effect_blink_update(tick);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	0018      	movs	r0, r3
 8001328:	f7ff fda0 	bl	8000e6c <led_effect_blink_update>
            break;
 800132c:	e01e      	b.n	800136c <led_effect_engine_update+0x6c>
        case LED_EFFECT_BREATHE:
            led_effect_breathe_update(tick);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff fdfd 	bl	8000f30 <led_effect_breathe_update>
            break;
 8001336:	e019      	b.n	800136c <led_effect_engine_update+0x6c>
        case LED_EFFECT_FLASH_ALT:
            led_effect_flash_alt_update(tick);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	0018      	movs	r0, r3
 800133c:	f000 f81e 	bl	800137c <led_effect_flash_alt_update>
            break;
 8001340:	e014      	b.n	800136c <led_effect_engine_update+0x6c>
        case LED_EFFECT_CHASE_LEFT:
            led_effect_chase_left_update(tick);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	0018      	movs	r0, r3
 8001346:	f7ff fe5b 	bl	8001000 <led_effect_chase_left_update>
            break;
 800134a:	e00f      	b.n	800136c <led_effect_engine_update+0x6c>
        case LED_EFFECT_CHASE_RIGHT:
            led_effect_chase_right_update(tick);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	0018      	movs	r0, r3
 8001350:	f7ff feca 	bl	80010e8 <led_effect_chase_right_update>
            break;
 8001354:	e00a      	b.n	800136c <led_effect_engine_update+0x6c>
        case LED_EFFECT_CONFIG_MODE:
            led_effect_config_mode_update(tick);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff ff39 	bl	80011d0 <led_effect_config_mode_update>
            break;
 800135e:	e005      	b.n	800136c <led_effect_engine_update+0x6c>
        case LED_EFFECT_SINGLE_LED:
            led_effect_single_led_update(tick);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	0018      	movs	r0, r3
 8001364:	f000 f888 	bl	8001478 <led_effect_single_led_update>
            break;
 8001368:	e000      	b.n	800136c <led_effect_engine_update+0x6c>
        default:
            break;
 800136a:	46c0      	nop			@ (mov r8, r8)
    }
}
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b002      	add	sp, #8
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000041a 	.word	0x2000041a
 8001378:	080039e8 	.word	0x080039e8

0800137c <led_effect_flash_alt_update>:
void led_effect_flash_alt_start(void) {
    flash_on = 0;
    last_update = 0;
}

void led_effect_flash_alt_update(uint32_t tick) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    if (tick - last_update < (300 - effect_params.speed * 20)) return;
 8001384:	4b36      	ldr	r3, [pc, #216]	@ (8001460 <led_effect_flash_alt_update+0xe4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	1ad1      	subs	r1, r2, r3
 800138c:	4b35      	ldr	r3, [pc, #212]	@ (8001464 <led_effect_flash_alt_update+0xe8>)
 800138e:	789b      	ldrb	r3, [r3, #2]
 8001390:	001a      	movs	r2, r3
 8001392:	0013      	movs	r3, r2
 8001394:	071b      	lsls	r3, r3, #28
 8001396:	1a9b      	subs	r3, r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	332d      	adds	r3, #45	@ 0x2d
 80013a0:	33ff      	adds	r3, #255	@ 0xff
 80013a2:	4299      	cmp	r1, r3
 80013a4:	d358      	bcc.n	8001458 <led_effect_flash_alt_update+0xdc>
    last_update = tick;
 80013a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001460 <led_effect_flash_alt_update+0xe4>)
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	601a      	str	r2, [r3, #0]

    flash_on ^= 1;
 80013ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001468 <led_effect_flash_alt_update+0xec>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	4053      	eors	r3, r2
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001468 <led_effect_flash_alt_update+0xec>)
 80013b8:	701a      	strb	r2, [r3, #0]

    RGB_t color = flash_on
        ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
 80013ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <led_effect_flash_alt_update+0xec>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
        : hsv_to_rgb((effect_params.hue + 128) % 256, 255, effect_params.brightness); // Kontrastfarbe
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d014      	beq.n	80013ec <led_effect_flash_alt_update+0x70>
        ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
 80013c2:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <led_effect_flash_alt_update+0xe8>)
 80013c4:	7818      	ldrb	r0, [r3, #0]
 80013c6:	4b27      	ldr	r3, [pc, #156]	@ (8001464 <led_effect_flash_alt_update+0xe8>)
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	001a      	movs	r2, r3
 80013cc:	21ff      	movs	r1, #255	@ 0xff
 80013ce:	f7ff fb9d 	bl	8000b0c <hsv_to_rgb>
 80013d2:	0003      	movs	r3, r0
 80013d4:	001a      	movs	r2, r3
 80013d6:	2308      	movs	r3, #8
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	1c11      	adds	r1, r2, #0
 80013dc:	7019      	strb	r1, [r3, #0]
 80013de:	0411      	lsls	r1, r2, #16
 80013e0:	0e09      	lsrs	r1, r1, #24
 80013e2:	7059      	strb	r1, [r3, #1]
 80013e4:	0212      	lsls	r2, r2, #8
 80013e6:	0e12      	lsrs	r2, r2, #24
 80013e8:	709a      	strb	r2, [r3, #2]
 80013ea:	e01c      	b.n	8001426 <led_effect_flash_alt_update+0xaa>
        : hsv_to_rgb((effect_params.hue + 128) % 256, 255, effect_params.brightness); // Kontrastfarbe
 80013ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <led_effect_flash_alt_update+0xe8>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	3380      	adds	r3, #128	@ 0x80
 80013f2:	4a1e      	ldr	r2, [pc, #120]	@ (800146c <led_effect_flash_alt_update+0xf0>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	d503      	bpl.n	8001400 <led_effect_flash_alt_update+0x84>
 80013f8:	3b01      	subs	r3, #1
 80013fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001470 <led_effect_flash_alt_update+0xf4>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	3301      	adds	r3, #1
 8001400:	b2d8      	uxtb	r0, r3
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <led_effect_flash_alt_update+0xe8>)
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	001a      	movs	r2, r3
 8001408:	21ff      	movs	r1, #255	@ 0xff
 800140a:	f7ff fb7f 	bl	8000b0c <hsv_to_rgb>
 800140e:	0003      	movs	r3, r0
 8001410:	001a      	movs	r2, r3
 8001412:	2308      	movs	r3, #8
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	1c11      	adds	r1, r2, #0
 8001418:	7019      	strb	r1, [r3, #0]
 800141a:	0411      	lsls	r1, r2, #16
 800141c:	0e09      	lsrs	r1, r1, #24
 800141e:	7059      	strb	r1, [r3, #1]
 8001420:	0212      	lsls	r2, r2, #8
 8001422:	0e12      	lsrs	r2, r2, #24
 8001424:	709a      	strb	r2, [r3, #2]

    for (int i = 0; i < 12; i++) {
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	e00f      	b.n	800144c <led_effect_flash_alt_update+0xd0>
        led_state[i] = color;
 800142c:	4911      	ldr	r1, [pc, #68]	@ (8001474 <led_effect_flash_alt_update+0xf8>)
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	0013      	movs	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	189b      	adds	r3, r3, r2
 8001436:	2208      	movs	r2, #8
 8001438:	18ba      	adds	r2, r7, r2
 800143a:	18cb      	adds	r3, r1, r3
 800143c:	0011      	movs	r1, r2
 800143e:	2203      	movs	r2, #3
 8001440:	0018      	movs	r0, r3
 8001442:	f002 fa81 	bl	8003948 <memcpy>
    for (int i = 0; i < 12; i++) {
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3301      	adds	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b0b      	cmp	r3, #11
 8001450:	ddec      	ble.n	800142c <led_effect_flash_alt_update+0xb0>
    }

    led_driver_update();
 8001452:	f7ff fcc5 	bl	8000de0 <led_driver_update>
 8001456:	e000      	b.n	800145a <led_effect_flash_alt_update+0xde>
    if (tick - last_update < (300 - effect_params.speed * 20)) return;
 8001458:	46c0      	nop			@ (mov r8, r8)
}
 800145a:	46bd      	mov	sp, r7
 800145c:	b004      	add	sp, #16
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000424 	.word	0x20000424
 8001464:	2000041c 	.word	0x2000041c
 8001468:	20000420 	.word	0x20000420
 800146c:	800000ff 	.word	0x800000ff
 8001470:	ffffff00 	.word	0xffffff00
 8001474:	200003d0 	.word	0x200003d0

08001478 <led_effect_single_led_update>:
void led_effect_single_led_start(void) {
    last_update = 0;
    led_on = 1;
}

void led_effect_single_led_update(uint32_t tick) {
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    if (tick - last_update < (500 - effect_params.speed * 20)) return;
 8001480:	4b31      	ldr	r3, [pc, #196]	@ (8001548 <led_effect_single_led_update+0xd0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	1ad1      	subs	r1, r2, r3
 8001488:	4b30      	ldr	r3, [pc, #192]	@ (800154c <led_effect_single_led_update+0xd4>)
 800148a:	789b      	ldrb	r3, [r3, #2]
 800148c:	001a      	movs	r2, r3
 800148e:	0013      	movs	r3, r2
 8001490:	071b      	lsls	r3, r3, #28
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	1a9b      	subs	r3, r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	33f5      	adds	r3, #245	@ 0xf5
 800149c:	33ff      	adds	r3, #255	@ 0xff
 800149e:	4299      	cmp	r1, r3
 80014a0:	d34d      	bcc.n	800153e <led_effect_single_led_update+0xc6>
    last_update = tick;
 80014a2:	4b29      	ldr	r3, [pc, #164]	@ (8001548 <led_effect_single_led_update+0xd0>)
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	601a      	str	r2, [r3, #0]
    led_on ^= 1;
 80014a8:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <led_effect_single_led_update+0xd8>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2201      	movs	r2, #1
 80014ae:	4053      	eors	r3, r2
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b27      	ldr	r3, [pc, #156]	@ (8001550 <led_effect_single_led_update+0xd8>)
 80014b4:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 12; i++) {
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	e03a      	b.n	8001532 <led_effect_single_led_update+0xba>
        if (i == 0 && led_on) {
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d11b      	bne.n	80014fa <led_effect_single_led_update+0x82>
 80014c2:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <led_effect_single_led_update+0xd8>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d017      	beq.n	80014fa <led_effect_single_led_update+0x82>
            led_state[i] = hsv_to_rgb(effect_params.hue, 255, effect_params.brightness);
 80014ca:	4b20      	ldr	r3, [pc, #128]	@ (800154c <led_effect_single_led_update+0xd4>)
 80014cc:	7818      	ldrb	r0, [r3, #0]
 80014ce:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <led_effect_single_led_update+0xd4>)
 80014d0:	785a      	ldrb	r2, [r3, #1]
 80014d2:	4d20      	ldr	r5, [pc, #128]	@ (8001554 <led_effect_single_led_update+0xdc>)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	001c      	movs	r4, r3
 80014d8:	0064      	lsls	r4, r4, #1
 80014da:	18e4      	adds	r4, r4, r3
 80014dc:	21ff      	movs	r1, #255	@ 0xff
 80014de:	f7ff fb15 	bl	8000b0c <hsv_to_rgb>
 80014e2:	0003      	movs	r3, r0
 80014e4:	1c1a      	adds	r2, r3, #0
 80014e6:	5562      	strb	r2, [r4, r5]
 80014e8:	041a      	lsls	r2, r3, #16
 80014ea:	0e11      	lsrs	r1, r2, #24
 80014ec:	192a      	adds	r2, r5, r4
 80014ee:	7051      	strb	r1, [r2, #1]
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	0e1a      	lsrs	r2, r3, #24
 80014f4:	192b      	adds	r3, r5, r4
 80014f6:	709a      	strb	r2, [r3, #2]
 80014f8:	e018      	b.n	800152c <led_effect_single_led_update+0xb4>
        } else {
            led_state[i].r = 0;
 80014fa:	4916      	ldr	r1, [pc, #88]	@ (8001554 <led_effect_single_led_update+0xdc>)
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	0013      	movs	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	189b      	adds	r3, r3, r2
 8001504:	2200      	movs	r2, #0
 8001506:	545a      	strb	r2, [r3, r1]
            led_state[i].g = 0;
 8001508:	4912      	ldr	r1, [pc, #72]	@ (8001554 <led_effect_single_led_update+0xdc>)
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	0013      	movs	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	189b      	adds	r3, r3, r2
 8001512:	18cb      	adds	r3, r1, r3
 8001514:	3301      	adds	r3, #1
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
            led_state[i].b = 0;
 800151a:	490e      	ldr	r1, [pc, #56]	@ (8001554 <led_effect_single_led_update+0xdc>)
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	0013      	movs	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	189b      	adds	r3, r3, r2
 8001524:	18cb      	adds	r3, r1, r3
 8001526:	3302      	adds	r3, #2
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 12; i++) {
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3301      	adds	r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b0b      	cmp	r3, #11
 8001536:	ddc1      	ble.n	80014bc <led_effect_single_led_update+0x44>
        }
    }

    led_driver_update();
 8001538:	f7ff fc52 	bl	8000de0 <led_driver_update>
 800153c:	e000      	b.n	8001540 <led_effect_single_led_update+0xc8>
    if (tick - last_update < (500 - effect_params.speed * 20)) return;
 800153e:	46c0      	nop			@ (mov r8, r8)
}
 8001540:	46bd      	mov	sp, r7
 8001542:	b004      	add	sp, #16
 8001544:	bdb0      	pop	{r4, r5, r7, pc}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	20000428 	.word	0x20000428
 800154c:	2000041c 	.word	0x2000041c
 8001550:	2000042c 	.word	0x2000042c
 8001554:	200003d0 	.word	0x200003d0

08001558 <led_effect_solid_update>:
void led_effect_solid_start(void) {
    prev_hue = 255;         // Erzwingt Update beim ersten Tick
    prev_brightness = 255;
}

void led_effect_solid_update(uint32_t tick) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    (void)tick;

    if (effect_params.hue != prev_hue || effect_params.brightness != prev_brightness) {
 8001560:	4b21      	ldr	r3, [pc, #132]	@ (80015e8 <led_effect_solid_update+0x90>)
 8001562:	781a      	ldrb	r2, [r3, #0]
 8001564:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <led_effect_solid_update+0x94>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d105      	bne.n	8001578 <led_effect_solid_update+0x20>
 800156c:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <led_effect_solid_update+0x90>)
 800156e:	785a      	ldrb	r2, [r3, #1]
 8001570:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <led_effect_solid_update+0x98>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d033      	beq.n	80015e0 <led_effect_solid_update+0x88>
        RGB_t color = hsv_to_rgb(effect_params.hue, 255, effect_params.brightness);
 8001578:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <led_effect_solid_update+0x90>)
 800157a:	7818      	ldrb	r0, [r3, #0]
 800157c:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <led_effect_solid_update+0x90>)
 800157e:	785b      	ldrb	r3, [r3, #1]
 8001580:	001a      	movs	r2, r3
 8001582:	21ff      	movs	r1, #255	@ 0xff
 8001584:	f7ff fac2 	bl	8000b0c <hsv_to_rgb>
 8001588:	0003      	movs	r3, r0
 800158a:	001a      	movs	r2, r3
 800158c:	2308      	movs	r3, #8
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	1c11      	adds	r1, r2, #0
 8001592:	7019      	strb	r1, [r3, #0]
 8001594:	0411      	lsls	r1, r2, #16
 8001596:	0e09      	lsrs	r1, r1, #24
 8001598:	7059      	strb	r1, [r3, #1]
 800159a:	0212      	lsls	r2, r2, #8
 800159c:	0e12      	lsrs	r2, r2, #24
 800159e:	709a      	strb	r2, [r3, #2]
        for (int i = 0; i < 12; i++) {
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	e00f      	b.n	80015c6 <led_effect_solid_update+0x6e>
            led_state[i] = color;
 80015a6:	4913      	ldr	r1, [pc, #76]	@ (80015f4 <led_effect_solid_update+0x9c>)
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	0013      	movs	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	189b      	adds	r3, r3, r2
 80015b0:	2208      	movs	r2, #8
 80015b2:	18ba      	adds	r2, r7, r2
 80015b4:	18cb      	adds	r3, r1, r3
 80015b6:	0011      	movs	r1, r2
 80015b8:	2203      	movs	r2, #3
 80015ba:	0018      	movs	r0, r3
 80015bc:	f002 f9c4 	bl	8003948 <memcpy>
        for (int i = 0; i < 12; i++) {
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b0b      	cmp	r3, #11
 80015ca:	ddec      	ble.n	80015a6 <led_effect_solid_update+0x4e>
        }
        led_driver_update();
 80015cc:	f7ff fc08 	bl	8000de0 <led_driver_update>
        prev_hue = effect_params.hue;
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <led_effect_solid_update+0x90>)
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <led_effect_solid_update+0x94>)
 80015d6:	701a      	strb	r2, [r3, #0]
        prev_brightness = effect_params.brightness;
 80015d8:	4b03      	ldr	r3, [pc, #12]	@ (80015e8 <led_effect_solid_update+0x90>)
 80015da:	785a      	ldrb	r2, [r3, #1]
 80015dc:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <led_effect_solid_update+0x98>)
 80015de:	701a      	strb	r2, [r3, #0]
    }
}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b004      	add	sp, #16
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000041c 	.word	0x2000041c
 80015ec:	20000005 	.word	0x20000005
 80015f0:	20000006 	.word	0x20000006
 80015f4:	200003d0 	.word	0x200003d0

080015f8 <piezo_beep>:
void piezo_init(void) {
    HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 0);
}

void piezo_beep(uint16_t freq_hz, uint16_t duration_ms) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	0002      	movs	r2, r0
 8001600:	1dbb      	adds	r3, r7, #6
 8001602:	801a      	strh	r2, [r3, #0]
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	1c0a      	adds	r2, r1, #0
 8001608:	801a      	strh	r2, [r3, #0]
    uint32_t timer_clock = HAL_RCC_GetPCLK1Freq(); // z.B. 64 MHz
 800160a:	f001 faa9 	bl	8002b60 <HAL_RCC_GetPCLK1Freq>
 800160e:	0003      	movs	r3, r0
 8001610:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = 1;
 8001612:	2301      	movs	r3, #1
 8001614:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / freq_hz) - 1;
 8001616:	1dbb      	adds	r3, r7, #6
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	0019      	movs	r1, r3
 800161c:	6978      	ldr	r0, [r7, #20]
 800161e:	f7fe fd71 	bl	8000104 <__udivsi3>
 8001622:	0003      	movs	r3, r0
 8001624:	3b01      	subs	r3, #1
 8001626:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_PRESCALER(&htim14, prescaler);
 8001628:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <piezo_beep+0x68>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim14, period);
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <piezo_beep+0x68>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <piezo_beep+0x68>)
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, period / 2);
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <piezo_beep+0x68>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	0852      	lsrs	r2, r2, #1
 8001646:	635a      	str	r2, [r3, #52]	@ 0x34

    beep_end_time = HAL_GetTick() + duration_ms;
 8001648:	f000 f976 	bl	8001938 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	18d2      	adds	r2, r2, r3
 8001654:	4b03      	ldr	r3, [pc, #12]	@ (8001664 <piezo_beep+0x6c>)
 8001656:	601a      	str	r2, [r3, #0]
}
 8001658:	46c0      	nop			@ (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b006      	add	sp, #24
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000088 	.word	0x20000088
 8001664:	20000430 	.word	0x20000430

08001668 <sound_beep_start>:
extern uint32_t timer_tick; // <-- hinzufügen

static bool beep_active = false;
static uint32_t beep_end_time = 0;

void sound_beep_start(uint16_t duration_ms, uint16_t frequency_hz) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	0002      	movs	r2, r0
 8001670:	1dbb      	adds	r3, r7, #6
 8001672:	801a      	strh	r2, [r3, #0]
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	1c0a      	adds	r2, r1, #0
 8001678:	801a      	strh	r2, [r3, #0]
    piezo_beep(frequency_hz, duration_ms); // <-- piezo_beep statt piezo_on
 800167a:	1dbb      	adds	r3, r7, #6
 800167c:	881a      	ldrh	r2, [r3, #0]
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	0011      	movs	r1, r2
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff ffb7 	bl	80015f8 <piezo_beep>
    beep_end_time = timer_tick + duration_ms;
 800168a:	1dbb      	adds	r3, r7, #6
 800168c:	881a      	ldrh	r2, [r3, #0]
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <sound_beep_start+0x40>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	18d2      	adds	r2, r2, r3
 8001694:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <sound_beep_start+0x44>)
 8001696:	601a      	str	r2, [r3, #0]
    beep_active = true;
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <sound_beep_start+0x48>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			@ (mov r8, r8)
 80016a8:	20000038 	.word	0x20000038
 80016ac:	20000438 	.word	0x20000438
 80016b0:	20000434 	.word	0x20000434

080016b4 <sound_config_mode_start>:
    CONFIG_BEEP2
} config_state = CONFIG_IDLE;

static uint32_t timestamp = 0;

void sound_config_mode_start(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
    config_state = CONFIG_BEEP1;
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <sound_config_mode_start+0x28>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
    piezo_beep(4000, 100); // 100 ms, 4 kHz
 80016be:	23fa      	movs	r3, #250	@ 0xfa
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	2164      	movs	r1, #100	@ 0x64
 80016c4:	0018      	movs	r0, r3
 80016c6:	f7ff ff97 	bl	80015f8 <piezo_beep>
    timestamp = timer_tick + 100;
 80016ca:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <sound_config_mode_start+0x2c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3364      	adds	r3, #100	@ 0x64
 80016d0:	001a      	movs	r2, r3
 80016d2:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <sound_config_mode_start+0x30>)
 80016d4:	601a      	str	r2, [r3, #0]
}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000043c 	.word	0x2000043c
 80016e0:	20000038 	.word	0x20000038
 80016e4:	20000440 	.word	0x20000440

080016e8 <sound_double_beep_start>:
static uint16_t len1 = 80;
static uint16_t pause = 50;
static uint16_t freq2 = 4000;
static uint16_t len2 = 80;

void sound_double_beep_start(uint16_t freq, uint16_t len_ms, uint16_t pause_ms) {
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	0004      	movs	r4, r0
 80016f0:	0008      	movs	r0, r1
 80016f2:	0011      	movs	r1, r2
 80016f4:	1dbb      	adds	r3, r7, #6
 80016f6:	1c22      	adds	r2, r4, #0
 80016f8:	801a      	strh	r2, [r3, #0]
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	1c02      	adds	r2, r0, #0
 80016fe:	801a      	strh	r2, [r3, #0]
 8001700:	1cbb      	adds	r3, r7, #2
 8001702:	1c0a      	adds	r2, r1, #0
 8001704:	801a      	strh	r2, [r3, #0]
    freq1 = freq;
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <sound_double_beep_start+0x74>)
 8001708:	1dba      	adds	r2, r7, #6
 800170a:	8812      	ldrh	r2, [r2, #0]
 800170c:	801a      	strh	r2, [r3, #0]
    len1 = len_ms;
 800170e:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <sound_double_beep_start+0x78>)
 8001710:	1d3a      	adds	r2, r7, #4
 8001712:	8812      	ldrh	r2, [r2, #0]
 8001714:	801a      	strh	r2, [r3, #0]
    pause = pause_ms;
 8001716:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <sound_double_beep_start+0x7c>)
 8001718:	1cba      	adds	r2, r7, #2
 800171a:	8812      	ldrh	r2, [r2, #0]
 800171c:	801a      	strh	r2, [r3, #0]
    freq2 = freq;   // Optional: zweiten Ton parametrierbar machen
 800171e:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <sound_double_beep_start+0x80>)
 8001720:	1dba      	adds	r2, r7, #6
 8001722:	8812      	ldrh	r2, [r2, #0]
 8001724:	801a      	strh	r2, [r3, #0]
    len2 = len_ms;  // Optional: zweite Länge parametrierbar machen
 8001726:	4b11      	ldr	r3, [pc, #68]	@ (800176c <sound_double_beep_start+0x84>)
 8001728:	1d3a      	adds	r2, r7, #4
 800172a:	8812      	ldrh	r2, [r2, #0]
 800172c:	801a      	strh	r2, [r3, #0]

    piezo_beep(freq1, len1);
 800172e:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <sound_double_beep_start+0x74>)
 8001730:	881a      	ldrh	r2, [r3, #0]
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <sound_double_beep_start+0x78>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	0019      	movs	r1, r3
 8001738:	0010      	movs	r0, r2
 800173a:	f7ff ff5d 	bl	80015f8 <piezo_beep>
    state = DBEEP_FIRST_BEEP;
 800173e:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <sound_double_beep_start+0x88>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
    timestamp = timer_tick + len1;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <sound_double_beep_start+0x78>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	001a      	movs	r2, r3
 800174a:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <sound_double_beep_start+0x8c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	18d2      	adds	r2, r2, r3
 8001750:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <sound_double_beep_start+0x90>)
 8001752:	601a      	str	r2, [r3, #0]
}
 8001754:	46c0      	nop			@ (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b003      	add	sp, #12
 800175a:	bd90      	pop	{r4, r7, pc}
 800175c:	20000008 	.word	0x20000008
 8001760:	2000000a 	.word	0x2000000a
 8001764:	2000000c 	.word	0x2000000c
 8001768:	2000000e 	.word	0x2000000e
 800176c:	20000010 	.word	0x20000010
 8001770:	20000444 	.word	0x20000444
 8001774:	20000038 	.word	0x20000038
 8001778:	20000448 	.word	0x20000448

0800177c <sound_engine_tick>:

void sound_engine_play(sound_id_t sound) {
    sound_engine_set(sound, 1);
}

void sound_engine_tick(void) {
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
    if (current_sound == SOUND_NONE) return;
 8001780:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <sound_engine_tick+0x68>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d02a      	beq.n	80017de <sound_engine_tick+0x62>

    switch (current_sound) {
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <sound_engine_tick+0x68>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b03      	cmp	r3, #3
 800178e:	d014      	beq.n	80017ba <sound_engine_tick+0x3e>
 8001790:	dc16      	bgt.n	80017c0 <sound_engine_tick+0x44>
 8001792:	2b01      	cmp	r3, #1
 8001794:	d002      	beq.n	800179c <sound_engine_tick+0x20>
 8001796:	2b02      	cmp	r3, #2
 8001798:	d007      	beq.n	80017aa <sound_engine_tick+0x2e>
            break;
        case SOUND_CONFIG_MODE:
            sound_config_mode_start();
            break;
        default:
            break;
 800179a:	e011      	b.n	80017c0 <sound_engine_tick+0x44>
            sound_beep_start(80, 4000); // Beispiel: 80 ms, 4 kHz
 800179c:	23fa      	movs	r3, #250	@ 0xfa
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	0019      	movs	r1, r3
 80017a2:	2050      	movs	r0, #80	@ 0x50
 80017a4:	f7ff ff60 	bl	8001668 <sound_beep_start>
            break;
 80017a8:	e00b      	b.n	80017c2 <sound_engine_tick+0x46>
            sound_double_beep_start(4000, 80, 50); // freq, len, pause
 80017aa:	23fa      	movs	r3, #250	@ 0xfa
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	2232      	movs	r2, #50	@ 0x32
 80017b0:	2150      	movs	r1, #80	@ 0x50
 80017b2:	0018      	movs	r0, r3
 80017b4:	f7ff ff98 	bl	80016e8 <sound_double_beep_start>
            break;
 80017b8:	e003      	b.n	80017c2 <sound_engine_tick+0x46>
            sound_config_mode_start();
 80017ba:	f7ff ff7b 	bl	80016b4 <sound_config_mode_start>
            break;
 80017be:	e000      	b.n	80017c2 <sound_engine_tick+0x46>
            break;
 80017c0:	46c0      	nop			@ (mov r8, r8)
    }

    if (--sound_repeat_counter == 0) {
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <sound_engine_tick+0x6c>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b07      	ldr	r3, [pc, #28]	@ (80017e8 <sound_engine_tick+0x6c>)
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <sound_engine_tick+0x6c>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d104      	bne.n	80017e0 <sound_engine_tick+0x64>
        current_sound = SOUND_NONE;
 80017d6:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <sound_engine_tick+0x68>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e000      	b.n	80017e0 <sound_engine_tick+0x64>
    if (current_sound == SOUND_NONE) return;
 80017de:	46c0      	nop			@ (mov r8, r8)
    }
}
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	2000044c 	.word	0x2000044c
 80017e8:	2000044d 	.word	0x2000044d

080017ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017ec:	480d      	ldr	r0, [pc, #52]	@ (8001824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017f0:	f7fe ffee 	bl	80007d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f4:	480c      	ldr	r0, [pc, #48]	@ (8001828 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f6:	490d      	ldr	r1, [pc, #52]	@ (800182c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001830 <LoopForever+0xe>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800180c:	4c0a      	ldr	r4, [pc, #40]	@ (8001838 <LoopForever+0x16>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800181a:	f002 f871 	bl	8003900 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800181e:	f7fe ff03 	bl	8000628 <main>

08001822 <LoopForever>:

LoopForever:
  b LoopForever
 8001822:	e7fe      	b.n	8001822 <LoopForever>
  ldr   r0, =_estack
 8001824:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001830:	08003a68 	.word	0x08003a68
  ldr r2, =_sbss
 8001834:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001838:	20000454 	.word	0x20000454

0800183c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC1_IRQHandler>
	...

08001840 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <HAL_Init+0x3c>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <HAL_Init+0x3c>)
 8001852:	2180      	movs	r1, #128	@ 0x80
 8001854:	0049      	lsls	r1, r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800185a:	2003      	movs	r0, #3
 800185c:	f000 f810 	bl	8001880 <HAL_InitTick>
 8001860:	1e03      	subs	r3, r0, #0
 8001862:	d003      	beq.n	800186c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001864:	1dfb      	adds	r3, r7, #7
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e001      	b.n	8001870 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800186c:	f7fe ff60 	bl	8000730 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001870:	1dfb      	adds	r3, r7, #7
 8001872:	781b      	ldrb	r3, [r3, #0]
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b002      	add	sp, #8
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40022000 	.word	0x40022000

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001888:	230f      	movs	r3, #15
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001890:	4b1d      	ldr	r3, [pc, #116]	@ (8001908 <HAL_InitTick+0x88>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d02b      	beq.n	80018f0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001898:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <HAL_InitTick+0x8c>)
 800189a:	681c      	ldr	r4, [r3, #0]
 800189c:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <HAL_InitTick+0x88>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	0019      	movs	r1, r3
 80018a2:	23fa      	movs	r3, #250	@ 0xfa
 80018a4:	0098      	lsls	r0, r3, #2
 80018a6:	f7fe fc2d 	bl	8000104 <__udivsi3>
 80018aa:	0003      	movs	r3, r0
 80018ac:	0019      	movs	r1, r3
 80018ae:	0020      	movs	r0, r4
 80018b0:	f7fe fc28 	bl	8000104 <__udivsi3>
 80018b4:	0003      	movs	r3, r0
 80018b6:	0018      	movs	r0, r3
 80018b8:	f000 f93d 	bl	8001b36 <HAL_SYSTICK_Config>
 80018bc:	1e03      	subs	r3, r0, #0
 80018be:	d112      	bne.n	80018e6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d80a      	bhi.n	80018dc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	2301      	movs	r3, #1
 80018ca:	425b      	negs	r3, r3
 80018cc:	2200      	movs	r2, #0
 80018ce:	0018      	movs	r0, r3
 80018d0:	f000 f90c 	bl	8001aec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_InitTick+0x90>)
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e00d      	b.n	80018f8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80018dc:	230f      	movs	r3, #15
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	e008      	b.n	80018f8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018e6:	230f      	movs	r3, #15
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	e003      	b.n	80018f8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018f0:	230f      	movs	r3, #15
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80018f8:	230f      	movs	r3, #15
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	781b      	ldrb	r3, [r3, #0]
}
 80018fe:	0018      	movs	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	b005      	add	sp, #20
 8001904:	bd90      	pop	{r4, r7, pc}
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	20000018 	.word	0x20000018
 800190c:	20000000 	.word	0x20000000
 8001910:	20000014 	.word	0x20000014

08001914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <HAL_IncTick+0x1c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	001a      	movs	r2, r3
 800191e:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <HAL_IncTick+0x20>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	18d2      	adds	r2, r2, r3
 8001924:	4b03      	ldr	r3, [pc, #12]	@ (8001934 <HAL_IncTick+0x20>)
 8001926:	601a      	str	r2, [r3, #0]
}
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			@ (mov r8, r8)
 8001930:	20000018 	.word	0x20000018
 8001934:	20000450 	.word	0x20000450

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b02      	ldr	r3, [pc, #8]	@ (8001948 <HAL_GetTick+0x10>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	20000450 	.word	0x20000450

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff fff0 	bl	8001938 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3301      	adds	r3, #1
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <HAL_Delay+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	001a      	movs	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	189b      	adds	r3, r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	f7ff ffe0 	bl	8001938 <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d8f7      	bhi.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	46c0      	nop			@ (mov r8, r8)
 8001986:	46c0      	nop			@ (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	b004      	add	sp, #16
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	20000018 	.word	0x20000018

08001994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	0002      	movs	r2, r0
 800199c:	1dfb      	adds	r3, r7, #7
 800199e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80019a6:	d809      	bhi.n	80019bc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a8:	1dfb      	adds	r3, r7, #7
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	001a      	movs	r2, r3
 80019ae:	231f      	movs	r3, #31
 80019b0:	401a      	ands	r2, r3
 80019b2:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <__NVIC_EnableIRQ+0x30>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	4091      	lsls	r1, r2
 80019b8:	000a      	movs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80019bc:	46c0      	nop			@ (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	0002      	movs	r2, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	1dfb      	adds	r3, r7, #7
 80019d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b7f      	cmp	r3, #127	@ 0x7f
 80019dc:	d828      	bhi.n	8001a30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019de:	4a2f      	ldr	r2, [pc, #188]	@ (8001a9c <__NVIC_SetPriority+0xd4>)
 80019e0:	1dfb      	adds	r3, r7, #7
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	33c0      	adds	r3, #192	@ 0xc0
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	589b      	ldr	r3, [r3, r2]
 80019ee:	1dfa      	adds	r2, r7, #7
 80019f0:	7812      	ldrb	r2, [r2, #0]
 80019f2:	0011      	movs	r1, r2
 80019f4:	2203      	movs	r2, #3
 80019f6:	400a      	ands	r2, r1
 80019f8:	00d2      	lsls	r2, r2, #3
 80019fa:	21ff      	movs	r1, #255	@ 0xff
 80019fc:	4091      	lsls	r1, r2
 80019fe:	000a      	movs	r2, r1
 8001a00:	43d2      	mvns	r2, r2
 8001a02:	401a      	ands	r2, r3
 8001a04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	019b      	lsls	r3, r3, #6
 8001a0a:	22ff      	movs	r2, #255	@ 0xff
 8001a0c:	401a      	ands	r2, r3
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	0018      	movs	r0, r3
 8001a14:	2303      	movs	r3, #3
 8001a16:	4003      	ands	r3, r0
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a1c:	481f      	ldr	r0, [pc, #124]	@ (8001a9c <__NVIC_SetPriority+0xd4>)
 8001a1e:	1dfb      	adds	r3, r7, #7
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b25b      	sxtb	r3, r3
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	430a      	orrs	r2, r1
 8001a28:	33c0      	adds	r3, #192	@ 0xc0
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a2e:	e031      	b.n	8001a94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a30:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa0 <__NVIC_SetPriority+0xd8>)
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	0019      	movs	r1, r3
 8001a38:	230f      	movs	r3, #15
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	3b08      	subs	r3, #8
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3306      	adds	r3, #6
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	18d3      	adds	r3, r2, r3
 8001a46:	3304      	adds	r3, #4
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	1dfa      	adds	r2, r7, #7
 8001a4c:	7812      	ldrb	r2, [r2, #0]
 8001a4e:	0011      	movs	r1, r2
 8001a50:	2203      	movs	r2, #3
 8001a52:	400a      	ands	r2, r1
 8001a54:	00d2      	lsls	r2, r2, #3
 8001a56:	21ff      	movs	r1, #255	@ 0xff
 8001a58:	4091      	lsls	r1, r2
 8001a5a:	000a      	movs	r2, r1
 8001a5c:	43d2      	mvns	r2, r2
 8001a5e:	401a      	ands	r2, r3
 8001a60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	019b      	lsls	r3, r3, #6
 8001a66:	22ff      	movs	r2, #255	@ 0xff
 8001a68:	401a      	ands	r2, r3
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	0018      	movs	r0, r3
 8001a70:	2303      	movs	r3, #3
 8001a72:	4003      	ands	r3, r0
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a78:	4809      	ldr	r0, [pc, #36]	@ (8001aa0 <__NVIC_SetPriority+0xd8>)
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	001c      	movs	r4, r3
 8001a80:	230f      	movs	r3, #15
 8001a82:	4023      	ands	r3, r4
 8001a84:	3b08      	subs	r3, #8
 8001a86:	089b      	lsrs	r3, r3, #2
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	3306      	adds	r3, #6
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	18c3      	adds	r3, r0, r3
 8001a90:	3304      	adds	r3, #4
 8001a92:	601a      	str	r2, [r3, #0]
}
 8001a94:	46c0      	nop			@ (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b003      	add	sp, #12
 8001a9a:	bd90      	pop	{r4, r7, pc}
 8001a9c:	e000e100 	.word	0xe000e100
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	1e5a      	subs	r2, r3, #1
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	045b      	lsls	r3, r3, #17
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d301      	bcc.n	8001abc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e010      	b.n	8001ade <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <SysTick_Config+0x44>)
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	3a01      	subs	r2, #1
 8001ac2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	425b      	negs	r3, r3
 8001ac8:	2103      	movs	r1, #3
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7ff ff7c 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <SysTick_Config+0x44>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <SysTick_Config+0x44>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	0018      	movs	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b002      	add	sp, #8
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	210f      	movs	r1, #15
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	1c02      	adds	r2, r0, #0
 8001afc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	187b      	adds	r3, r7, r1
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	0011      	movs	r1, r2
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff ff5d 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0e:	46c0      	nop			@ (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b004      	add	sp, #16
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	1dfb      	adds	r3, r7, #7
 8001b20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b25b      	sxtb	r3, r3
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7ff ff33 	bl	8001994 <__NVIC_EnableIRQ>
}
 8001b2e:	46c0      	nop			@ (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b002      	add	sp, #8
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff ffaf 	bl	8001aa4 <SysTick_Config>
 8001b46:	0003      	movs	r3, r0
}
 8001b48:	0018      	movs	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b002      	add	sp, #8
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e077      	b.n	8001c52 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a3d      	ldr	r2, [pc, #244]	@ (8001c5c <HAL_DMA_Init+0x10c>)
 8001b68:	4694      	mov	ip, r2
 8001b6a:	4463      	add	r3, ip
 8001b6c:	2114      	movs	r1, #20
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f7fe fac8 	bl	8000104 <__udivsi3>
 8001b74:	0003      	movs	r3, r0
 8001b76:	009a      	lsls	r2, r3, #2
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2225      	movs	r2, #37	@ 0x25
 8001b80:	2102      	movs	r1, #2
 8001b82:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4934      	ldr	r1, [pc, #208]	@ (8001c60 <HAL_DMA_Init+0x110>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f000 f8fb 	bl	8001dc8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	01db      	lsls	r3, r3, #7
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d102      	bne.n	8001be4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bec:	213f      	movs	r1, #63	@ 0x3f
 8001bee:	400a      	ands	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001bfa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d011      	beq.n	8001c28 <HAL_DMA_Init+0xd8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d80d      	bhi.n	8001c28 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f000 f906 	bl	8001e20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	e008      	b.n	8001c3a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2225      	movs	r2, #37	@ 0x25
 8001c44:	2101      	movs	r1, #1
 8001c46:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2224      	movs	r2, #36	@ 0x24
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	0018      	movs	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b002      	add	sp, #8
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	bffdfff8 	.word	0xbffdfff8
 8001c60:	ffff800f 	.word	0xffff800f

08001c64 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001c6c:	4b55      	ldr	r3, [pc, #340]	@ (8001dc4 <HAL_DMA_IRQHandler+0x160>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	221c      	movs	r2, #28
 8001c80:	4013      	ands	r3, r2
 8001c82:	2204      	movs	r2, #4
 8001c84:	409a      	lsls	r2, r3
 8001c86:	0013      	movs	r3, r2
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d027      	beq.n	8001cde <HAL_DMA_IRQHandler+0x7a>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2204      	movs	r2, #4
 8001c92:	4013      	ands	r3, r2
 8001c94:	d023      	beq.n	8001cde <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d107      	bne.n	8001cb2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2104      	movs	r1, #4
 8001cae:	438a      	bics	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001cb2:	4b44      	ldr	r3, [pc, #272]	@ (8001dc4 <HAL_DMA_IRQHandler+0x160>)
 8001cb4:	6859      	ldr	r1, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	221c      	movs	r2, #28
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	4b40      	ldr	r3, [pc, #256]	@ (8001dc4 <HAL_DMA_IRQHandler+0x160>)
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d100      	bne.n	8001cd2 <HAL_DMA_IRQHandler+0x6e>
 8001cd0:	e073      	b.n	8001dba <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	0010      	movs	r0, r2
 8001cda:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001cdc:	e06d      	b.n	8001dba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	221c      	movs	r2, #28
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	0013      	movs	r3, r2
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d02e      	beq.n	8001d50 <HAL_DMA_IRQHandler+0xec>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d02a      	beq.n	8001d50 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2220      	movs	r2, #32
 8001d02:	4013      	ands	r3, r2
 8001d04:	d10b      	bne.n	8001d1e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	210a      	movs	r1, #10
 8001d12:	438a      	bics	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2225      	movs	r2, #37	@ 0x25
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001d1e:	4b29      	ldr	r3, [pc, #164]	@ (8001dc4 <HAL_DMA_IRQHandler+0x160>)
 8001d20:	6859      	ldr	r1, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	221c      	movs	r2, #28
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	4b25      	ldr	r3, [pc, #148]	@ (8001dc4 <HAL_DMA_IRQHandler+0x160>)
 8001d30:	430a      	orrs	r2, r1
 8001d32:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2224      	movs	r2, #36	@ 0x24
 8001d38:	2100      	movs	r1, #0
 8001d3a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03a      	beq.n	8001dba <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	0010      	movs	r0, r2
 8001d4c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001d4e:	e034      	b.n	8001dba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	221c      	movs	r2, #28
 8001d56:	4013      	ands	r3, r2
 8001d58:	2208      	movs	r2, #8
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	0013      	movs	r3, r2
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4013      	ands	r3, r2
 8001d62:	d02b      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x158>
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2208      	movs	r2, #8
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d027      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	210e      	movs	r1, #14
 8001d78:	438a      	bics	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001d7c:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <HAL_DMA_IRQHandler+0x160>)
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	221c      	movs	r2, #28
 8001d86:	4013      	ands	r3, r2
 8001d88:	2201      	movs	r2, #1
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <HAL_DMA_IRQHandler+0x160>)
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2225      	movs	r2, #37	@ 0x25
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	@ 0x24
 8001da4:	2100      	movs	r1, #0
 8001da6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	0010      	movs	r0, r2
 8001db8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001dba:	46c0      	nop			@ (mov r8, r8)
 8001dbc:	46c0      	nop			@ (mov r8, r8)
}
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b004      	add	sp, #16
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40020000 	.word	0x40020000

08001dc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	4a10      	ldr	r2, [pc, #64]	@ (8001e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001dd8:	4694      	mov	ip, r2
 8001dda:	4463      	add	r3, ip
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	001a      	movs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	001a      	movs	r2, r3
 8001dea:	23ff      	movs	r3, #255	@ 0xff
 8001dec:	4013      	ands	r3, r2
 8001dee:	3b08      	subs	r3, #8
 8001df0:	2114      	movs	r1, #20
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7fe f986 	bl	8000104 <__udivsi3>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a07      	ldr	r2, [pc, #28]	@ (8001e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001e00:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	221f      	movs	r2, #31
 8001e06:	4013      	ands	r3, r2
 8001e08:	2201      	movs	r2, #1
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001e10:	46c0      	nop			@ (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b004      	add	sp, #16
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	10008200 	.word	0x10008200
 8001e1c:	40020880 	.word	0x40020880

08001e20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	223f      	movs	r2, #63	@ 0x3f
 8001e2e:	4013      	ands	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001e36:	4694      	mov	ip, r2
 8001e38:	4463      	add	r3, ip
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	001a      	movs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001e46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2201      	movs	r2, #1
 8001e52:	409a      	lsls	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001e58:	46c0      	nop			@ (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b004      	add	sp, #16
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	1000823f 	.word	0x1000823f
 8001e64:	40020940 	.word	0x40020940

08001e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e76:	e147      	b.n	8002108 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4091      	lsls	r1, r2
 8001e82:	000a      	movs	r2, r1
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d100      	bne.n	8001e90 <HAL_GPIO_Init+0x28>
 8001e8e:	e138      	b.n	8002102 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2203      	movs	r2, #3
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d005      	beq.n	8001ea8 <HAL_GPIO_Init+0x40>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d130      	bne.n	8001f0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	0013      	movs	r3, r2
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	0013      	movs	r3, r2
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ede:	2201      	movs	r2, #1
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	409a      	lsls	r2, r3
 8001efc:	0013      	movs	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2203      	movs	r2, #3
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d017      	beq.n	8001f46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	409a      	lsls	r2, r3
 8001f24:	0013      	movs	r3, r2
 8001f26:	43da      	mvns	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	409a      	lsls	r2, r3
 8001f38:	0013      	movs	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d123      	bne.n	8001f9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	08da      	lsrs	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3208      	adds	r2, #8
 8001f5a:	0092      	lsls	r2, r2, #2
 8001f5c:	58d3      	ldr	r3, [r2, r3]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2207      	movs	r2, #7
 8001f64:	4013      	ands	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	220f      	movs	r2, #15
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2107      	movs	r1, #7
 8001f7e:	400b      	ands	r3, r1
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	409a      	lsls	r2, r3
 8001f84:	0013      	movs	r3, r2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	08da      	lsrs	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3208      	adds	r2, #8
 8001f94:	0092      	lsls	r2, r2, #2
 8001f96:	6939      	ldr	r1, [r7, #16]
 8001f98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	43da      	mvns	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	401a      	ands	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	0013      	movs	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	23c0      	movs	r3, #192	@ 0xc0
 8001fd4:	029b      	lsls	r3, r3, #10
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d100      	bne.n	8001fdc <HAL_GPIO_Init+0x174>
 8001fda:	e092      	b.n	8002102 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001fdc:	4a50      	ldr	r2, [pc, #320]	@ (8002120 <HAL_GPIO_Init+0x2b8>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3318      	adds	r3, #24
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	589b      	ldr	r3, [r3, r2]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2203      	movs	r2, #3
 8001fee:	4013      	ands	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	0013      	movs	r3, r2
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	23a0      	movs	r3, #160	@ 0xa0
 8002004:	05db      	lsls	r3, r3, #23
 8002006:	429a      	cmp	r2, r3
 8002008:	d013      	beq.n	8002032 <HAL_GPIO_Init+0x1ca>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a45      	ldr	r2, [pc, #276]	@ (8002124 <HAL_GPIO_Init+0x2bc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00d      	beq.n	800202e <HAL_GPIO_Init+0x1c6>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a44      	ldr	r2, [pc, #272]	@ (8002128 <HAL_GPIO_Init+0x2c0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0x1c2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a43      	ldr	r2, [pc, #268]	@ (800212c <HAL_GPIO_Init+0x2c4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_GPIO_Init+0x1be>
 8002022:	2303      	movs	r3, #3
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x1cc>
 8002026:	2305      	movs	r3, #5
 8002028:	e004      	b.n	8002034 <HAL_GPIO_Init+0x1cc>
 800202a:	2302      	movs	r3, #2
 800202c:	e002      	b.n	8002034 <HAL_GPIO_Init+0x1cc>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x1cc>
 8002032:	2300      	movs	r3, #0
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	2103      	movs	r1, #3
 8002038:	400a      	ands	r2, r1
 800203a:	00d2      	lsls	r2, r2, #3
 800203c:	4093      	lsls	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002044:	4936      	ldr	r1, [pc, #216]	@ (8002120 <HAL_GPIO_Init+0x2b8>)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3318      	adds	r3, #24
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002052:	4b33      	ldr	r3, [pc, #204]	@ (8002120 <HAL_GPIO_Init+0x2b8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43da      	mvns	r2, r3
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	2380      	movs	r3, #128	@ 0x80
 8002068:	035b      	lsls	r3, r3, #13
 800206a:	4013      	ands	r3, r2
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002076:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <HAL_GPIO_Init+0x2b8>)
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800207c:	4b28      	ldr	r3, [pc, #160]	@ (8002120 <HAL_GPIO_Init+0x2b8>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	43da      	mvns	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	2380      	movs	r3, #128	@ 0x80
 8002092:	039b      	lsls	r3, r3, #14
 8002094:	4013      	ands	r3, r2
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <HAL_GPIO_Init+0x2b8>)
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002120 <HAL_GPIO_Init+0x2b8>)
 80020a8:	2384      	movs	r3, #132	@ 0x84
 80020aa:	58d3      	ldr	r3, [r2, r3]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	43da      	mvns	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	2380      	movs	r3, #128	@ 0x80
 80020be:	029b      	lsls	r3, r3, #10
 80020c0:	4013      	ands	r3, r2
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020cc:	4914      	ldr	r1, [pc, #80]	@ (8002120 <HAL_GPIO_Init+0x2b8>)
 80020ce:	2284      	movs	r2, #132	@ 0x84
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80020d4:	4a12      	ldr	r2, [pc, #72]	@ (8002120 <HAL_GPIO_Init+0x2b8>)
 80020d6:	2380      	movs	r3, #128	@ 0x80
 80020d8:	58d3      	ldr	r3, [r2, r3]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43da      	mvns	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	2380      	movs	r3, #128	@ 0x80
 80020ec:	025b      	lsls	r3, r3, #9
 80020ee:	4013      	ands	r3, r2
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020fa:	4909      	ldr	r1, [pc, #36]	@ (8002120 <HAL_GPIO_Init+0x2b8>)
 80020fc:	2280      	movs	r2, #128	@ 0x80
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3301      	adds	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	40da      	lsrs	r2, r3
 8002110:	1e13      	subs	r3, r2, #0
 8002112:	d000      	beq.n	8002116 <HAL_GPIO_Init+0x2ae>
 8002114:	e6b0      	b.n	8001e78 <HAL_GPIO_Init+0x10>
  }
}
 8002116:	46c0      	nop			@ (mov r8, r8)
 8002118:	46c0      	nop			@ (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b006      	add	sp, #24
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021800 	.word	0x40021800
 8002124:	50000400 	.word	0x50000400
 8002128:	50000800 	.word	0x50000800
 800212c:	50000c00 	.word	0x50000c00

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	0008      	movs	r0, r1
 800213a:	0011      	movs	r1, r2
 800213c:	1cbb      	adds	r3, r7, #2
 800213e:	1c02      	adds	r2, r0, #0
 8002140:	801a      	strh	r2, [r3, #0]
 8002142:	1c7b      	adds	r3, r7, #1
 8002144:	1c0a      	adds	r2, r1, #0
 8002146:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002148:	1c7b      	adds	r3, r7, #1
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002150:	1cbb      	adds	r3, r7, #2
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002158:	e003      	b.n	8002162 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800215a:	1cbb      	adds	r3, r7, #2
 800215c:	881a      	ldrh	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002174:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a19      	ldr	r2, [pc, #100]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800217a:	4013      	ands	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	430a      	orrs	r2, r1
 8002184:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	2380      	movs	r3, #128	@ 0x80
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	429a      	cmp	r2, r3
 800218e:	d11f      	bne.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002190:	4b14      	ldr	r3, [pc, #80]	@ (80021e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	0013      	movs	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	189b      	adds	r3, r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4912      	ldr	r1, [pc, #72]	@ (80021e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800219e:	0018      	movs	r0, r3
 80021a0:	f7fd ffb0 	bl	8000104 <__udivsi3>
 80021a4:	0003      	movs	r3, r0
 80021a6:	3301      	adds	r3, #1
 80021a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021aa:	e008      	b.n	80021be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	e001      	b.n	80021be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e009      	b.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021be:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	2380      	movs	r3, #128	@ 0x80
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	401a      	ands	r2, r3
 80021c8:	2380      	movs	r3, #128	@ 0x80
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d0ed      	beq.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b004      	add	sp, #16
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	40007000 	.word	0x40007000
 80021e0:	fffff9ff 	.word	0xfffff9ff
 80021e4:	20000000 	.word	0x20000000
 80021e8:	000f4240 	.word	0x000f4240

080021ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80021f0:	4b03      	ldr	r3, [pc, #12]	@ (8002200 <LL_RCC_GetAPB1Prescaler+0x14>)
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	23e0      	movs	r3, #224	@ 0xe0
 80021f6:	01db      	lsls	r3, r3, #7
 80021f8:	4013      	ands	r3, r2
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000

08002204 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e2fe      	b.n	8002814 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2201      	movs	r2, #1
 800221c:	4013      	ands	r3, r2
 800221e:	d100      	bne.n	8002222 <HAL_RCC_OscConfig+0x1e>
 8002220:	e07c      	b.n	800231c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002222:	4bc3      	ldr	r3, [pc, #780]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2238      	movs	r2, #56	@ 0x38
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800222c:	4bc0      	ldr	r3, [pc, #768]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2203      	movs	r2, #3
 8002232:	4013      	ands	r3, r2
 8002234:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b10      	cmp	r3, #16
 800223a:	d102      	bne.n	8002242 <HAL_RCC_OscConfig+0x3e>
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d002      	beq.n	8002248 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2b08      	cmp	r3, #8
 8002246:	d10b      	bne.n	8002260 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	4bb9      	ldr	r3, [pc, #740]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2380      	movs	r3, #128	@ 0x80
 800224e:	029b      	lsls	r3, r3, #10
 8002250:	4013      	ands	r3, r2
 8002252:	d062      	beq.n	800231a <HAL_RCC_OscConfig+0x116>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d15e      	bne.n	800231a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e2d9      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	025b      	lsls	r3, r3, #9
 8002268:	429a      	cmp	r2, r3
 800226a:	d107      	bne.n	800227c <HAL_RCC_OscConfig+0x78>
 800226c:	4bb0      	ldr	r3, [pc, #704]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4baf      	ldr	r3, [pc, #700]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002272:	2180      	movs	r1, #128	@ 0x80
 8002274:	0249      	lsls	r1, r1, #9
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e020      	b.n	80022be <HAL_RCC_OscConfig+0xba>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	23a0      	movs	r3, #160	@ 0xa0
 8002282:	02db      	lsls	r3, r3, #11
 8002284:	429a      	cmp	r2, r3
 8002286:	d10e      	bne.n	80022a6 <HAL_RCC_OscConfig+0xa2>
 8002288:	4ba9      	ldr	r3, [pc, #676]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4ba8      	ldr	r3, [pc, #672]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 800228e:	2180      	movs	r1, #128	@ 0x80
 8002290:	02c9      	lsls	r1, r1, #11
 8002292:	430a      	orrs	r2, r1
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	4ba6      	ldr	r3, [pc, #664]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4ba5      	ldr	r3, [pc, #660]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 800229c:	2180      	movs	r1, #128	@ 0x80
 800229e:	0249      	lsls	r1, r1, #9
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e00b      	b.n	80022be <HAL_RCC_OscConfig+0xba>
 80022a6:	4ba2      	ldr	r3, [pc, #648]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4ba1      	ldr	r3, [pc, #644]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 80022ac:	49a1      	ldr	r1, [pc, #644]	@ (8002534 <HAL_RCC_OscConfig+0x330>)
 80022ae:	400a      	ands	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	4b9f      	ldr	r3, [pc, #636]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	4b9e      	ldr	r3, [pc, #632]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 80022b8:	499f      	ldr	r1, [pc, #636]	@ (8002538 <HAL_RCC_OscConfig+0x334>)
 80022ba:	400a      	ands	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d014      	beq.n	80022f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7ff fb37 	bl	8001938 <HAL_GetTick>
 80022ca:	0003      	movs	r3, r0
 80022cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7ff fb32 	bl	8001938 <HAL_GetTick>
 80022d4:	0002      	movs	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	@ 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e298      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e2:	4b93      	ldr	r3, [pc, #588]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	@ 0x80
 80022e8:	029b      	lsls	r3, r3, #10
 80022ea:	4013      	ands	r3, r2
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0xcc>
 80022ee:	e015      	b.n	800231c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7ff fb22 	bl	8001938 <HAL_GetTick>
 80022f4:	0003      	movs	r3, r0
 80022f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fa:	f7ff fb1d 	bl	8001938 <HAL_GetTick>
 80022fe:	0002      	movs	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b64      	cmp	r3, #100	@ 0x64
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e283      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230c:	4b88      	ldr	r3, [pc, #544]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	029b      	lsls	r3, r3, #10
 8002314:	4013      	ands	r3, r2
 8002316:	d1f0      	bne.n	80022fa <HAL_RCC_OscConfig+0xf6>
 8002318:	e000      	b.n	800231c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2202      	movs	r2, #2
 8002322:	4013      	ands	r3, r2
 8002324:	d100      	bne.n	8002328 <HAL_RCC_OscConfig+0x124>
 8002326:	e099      	b.n	800245c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002328:	4b81      	ldr	r3, [pc, #516]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2238      	movs	r2, #56	@ 0x38
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002332:	4b7f      	ldr	r3, [pc, #508]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2203      	movs	r2, #3
 8002338:	4013      	ands	r3, r2
 800233a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2b10      	cmp	r3, #16
 8002340:	d102      	bne.n	8002348 <HAL_RCC_OscConfig+0x144>
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d002      	beq.n	800234e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d135      	bne.n	80023ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800234e:	4b78      	ldr	r3, [pc, #480]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	2380      	movs	r3, #128	@ 0x80
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4013      	ands	r3, r2
 8002358:	d005      	beq.n	8002366 <HAL_RCC_OscConfig+0x162>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e256      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002366:	4b72      	ldr	r3, [pc, #456]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4a74      	ldr	r2, [pc, #464]	@ (800253c <HAL_RCC_OscConfig+0x338>)
 800236c:	4013      	ands	r3, r2
 800236e:	0019      	movs	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	021a      	lsls	r2, r3, #8
 8002376:	4b6e      	ldr	r3, [pc, #440]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002378:	430a      	orrs	r2, r1
 800237a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d112      	bne.n	80023a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002382:	4b6b      	ldr	r3, [pc, #428]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a6e      	ldr	r2, [pc, #440]	@ (8002540 <HAL_RCC_OscConfig+0x33c>)
 8002388:	4013      	ands	r3, r2
 800238a:	0019      	movs	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	4b67      	ldr	r3, [pc, #412]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002392:	430a      	orrs	r2, r1
 8002394:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002396:	4b66      	ldr	r3, [pc, #408]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	0adb      	lsrs	r3, r3, #11
 800239c:	2207      	movs	r2, #7
 800239e:	4013      	ands	r3, r2
 80023a0:	4a68      	ldr	r2, [pc, #416]	@ (8002544 <HAL_RCC_OscConfig+0x340>)
 80023a2:	40da      	lsrs	r2, r3
 80023a4:	4b68      	ldr	r3, [pc, #416]	@ (8002548 <HAL_RCC_OscConfig+0x344>)
 80023a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023a8:	4b68      	ldr	r3, [pc, #416]	@ (800254c <HAL_RCC_OscConfig+0x348>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7ff fa67 	bl	8001880 <HAL_InitTick>
 80023b2:	1e03      	subs	r3, r0, #0
 80023b4:	d051      	beq.n	800245a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e22c      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d030      	beq.n	8002424 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002540 <HAL_RCC_OscConfig+0x33c>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	4b57      	ldr	r3, [pc, #348]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 80023d2:	430a      	orrs	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80023d6:	4b56      	ldr	r3, [pc, #344]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b55      	ldr	r3, [pc, #340]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 80023dc:	2180      	movs	r1, #128	@ 0x80
 80023de:	0049      	lsls	r1, r1, #1
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7ff faa8 	bl	8001938 <HAL_GetTick>
 80023e8:	0003      	movs	r3, r0
 80023ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ee:	f7ff faa3 	bl	8001938 <HAL_GetTick>
 80023f2:	0002      	movs	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e209      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002400:	4b4b      	ldr	r3, [pc, #300]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2380      	movs	r3, #128	@ 0x80
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4013      	ands	r3, r2
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240c:	4b48      	ldr	r3, [pc, #288]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a4a      	ldr	r2, [pc, #296]	@ (800253c <HAL_RCC_OscConfig+0x338>)
 8002412:	4013      	ands	r3, r2
 8002414:	0019      	movs	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	021a      	lsls	r2, r3, #8
 800241c:	4b44      	ldr	r3, [pc, #272]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	e01b      	b.n	800245c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002424:	4b42      	ldr	r3, [pc, #264]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b41      	ldr	r3, [pc, #260]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 800242a:	4949      	ldr	r1, [pc, #292]	@ (8002550 <HAL_RCC_OscConfig+0x34c>)
 800242c:	400a      	ands	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7ff fa82 	bl	8001938 <HAL_GetTick>
 8002434:	0003      	movs	r3, r0
 8002436:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243a:	f7ff fa7d 	bl	8001938 <HAL_GetTick>
 800243e:	0002      	movs	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e1e3      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800244c:	4b38      	ldr	r3, [pc, #224]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4013      	ands	r3, r2
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x236>
 8002458:	e000      	b.n	800245c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2208      	movs	r2, #8
 8002462:	4013      	ands	r3, r2
 8002464:	d047      	beq.n	80024f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002466:	4b32      	ldr	r3, [pc, #200]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2238      	movs	r2, #56	@ 0x38
 800246c:	4013      	ands	r3, r2
 800246e:	2b18      	cmp	r3, #24
 8002470:	d10a      	bne.n	8002488 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002472:	4b2f      	ldr	r3, [pc, #188]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002476:	2202      	movs	r2, #2
 8002478:	4013      	ands	r3, r2
 800247a:	d03c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x2f2>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d138      	bne.n	80024f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e1c5      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d019      	beq.n	80024c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002490:	4b27      	ldr	r3, [pc, #156]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002492:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002494:	4b26      	ldr	r3, [pc, #152]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002496:	2101      	movs	r1, #1
 8002498:	430a      	orrs	r2, r1
 800249a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7ff fa4c 	bl	8001938 <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a6:	f7ff fa47 	bl	8001938 <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1ad      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 80024ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024bc:	2202      	movs	r2, #2
 80024be:	4013      	ands	r3, r2
 80024c0:	d0f1      	beq.n	80024a6 <HAL_RCC_OscConfig+0x2a2>
 80024c2:	e018      	b.n	80024f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80024c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 80024c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024c8:	4b19      	ldr	r3, [pc, #100]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	438a      	bics	r2, r1
 80024ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff fa32 	bl	8001938 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024da:	f7ff fa2d 	bl	8001938 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e193      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024ec:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 80024ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f0:	2202      	movs	r2, #2
 80024f2:	4013      	ands	r3, r2
 80024f4:	d1f1      	bne.n	80024da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2204      	movs	r2, #4
 80024fc:	4013      	ands	r3, r2
 80024fe:	d100      	bne.n	8002502 <HAL_RCC_OscConfig+0x2fe>
 8002500:	e0c6      	b.n	8002690 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002502:	231f      	movs	r3, #31
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800250a:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2238      	movs	r2, #56	@ 0x38
 8002510:	4013      	ands	r3, r2
 8002512:	2b20      	cmp	r3, #32
 8002514:	d11e      	bne.n	8002554 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_RCC_OscConfig+0x32c>)
 8002518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251a:	2202      	movs	r2, #2
 800251c:	4013      	ands	r3, r2
 800251e:	d100      	bne.n	8002522 <HAL_RCC_OscConfig+0x31e>
 8002520:	e0b6      	b.n	8002690 <HAL_RCC_OscConfig+0x48c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d000      	beq.n	800252c <HAL_RCC_OscConfig+0x328>
 800252a:	e0b1      	b.n	8002690 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e171      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
 8002530:	40021000 	.word	0x40021000
 8002534:	fffeffff 	.word	0xfffeffff
 8002538:	fffbffff 	.word	0xfffbffff
 800253c:	ffff80ff 	.word	0xffff80ff
 8002540:	ffffc7ff 	.word	0xffffc7ff
 8002544:	00f42400 	.word	0x00f42400
 8002548:	20000000 	.word	0x20000000
 800254c:	20000014 	.word	0x20000014
 8002550:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002554:	4bb1      	ldr	r3, [pc, #708]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002558:	2380      	movs	r3, #128	@ 0x80
 800255a:	055b      	lsls	r3, r3, #21
 800255c:	4013      	ands	r3, r2
 800255e:	d101      	bne.n	8002564 <HAL_RCC_OscConfig+0x360>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x362>
 8002564:	2300      	movs	r3, #0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d011      	beq.n	800258e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	4bac      	ldr	r3, [pc, #688]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 800256c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800256e:	4bab      	ldr	r3, [pc, #684]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002570:	2180      	movs	r1, #128	@ 0x80
 8002572:	0549      	lsls	r1, r1, #21
 8002574:	430a      	orrs	r2, r1
 8002576:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002578:	4ba8      	ldr	r3, [pc, #672]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 800257a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800257c:	2380      	movs	r3, #128	@ 0x80
 800257e:	055b      	lsls	r3, r3, #21
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002586:	231f      	movs	r3, #31
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258e:	4ba4      	ldr	r3, [pc, #656]	@ (8002820 <HAL_RCC_OscConfig+0x61c>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	2380      	movs	r3, #128	@ 0x80
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4013      	ands	r3, r2
 8002598:	d11a      	bne.n	80025d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800259a:	4ba1      	ldr	r3, [pc, #644]	@ (8002820 <HAL_RCC_OscConfig+0x61c>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4ba0      	ldr	r3, [pc, #640]	@ (8002820 <HAL_RCC_OscConfig+0x61c>)
 80025a0:	2180      	movs	r1, #128	@ 0x80
 80025a2:	0049      	lsls	r1, r1, #1
 80025a4:	430a      	orrs	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80025a8:	f7ff f9c6 	bl	8001938 <HAL_GetTick>
 80025ac:	0003      	movs	r3, r0
 80025ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b2:	f7ff f9c1 	bl	8001938 <HAL_GetTick>
 80025b6:	0002      	movs	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e127      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c4:	4b96      	ldr	r3, [pc, #600]	@ (8002820 <HAL_RCC_OscConfig+0x61c>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	@ 0x80
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x3e2>
 80025d8:	4b90      	ldr	r3, [pc, #576]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 80025da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025dc:	4b8f      	ldr	r3, [pc, #572]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 80025de:	2101      	movs	r1, #1
 80025e0:	430a      	orrs	r2, r1
 80025e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025e4:	e01c      	b.n	8002620 <HAL_RCC_OscConfig+0x41c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b05      	cmp	r3, #5
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x404>
 80025ee:	4b8b      	ldr	r3, [pc, #556]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 80025f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025f2:	4b8a      	ldr	r3, [pc, #552]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 80025f4:	2104      	movs	r1, #4
 80025f6:	430a      	orrs	r2, r1
 80025f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025fa:	4b88      	ldr	r3, [pc, #544]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 80025fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025fe:	4b87      	ldr	r3, [pc, #540]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002600:	2101      	movs	r1, #1
 8002602:	430a      	orrs	r2, r1
 8002604:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0x41c>
 8002608:	4b84      	ldr	r3, [pc, #528]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 800260a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800260c:	4b83      	ldr	r3, [pc, #524]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 800260e:	2101      	movs	r1, #1
 8002610:	438a      	bics	r2, r1
 8002612:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002614:	4b81      	ldr	r3, [pc, #516]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002616:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002618:	4b80      	ldr	r3, [pc, #512]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 800261a:	2104      	movs	r1, #4
 800261c:	438a      	bics	r2, r1
 800261e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d014      	beq.n	8002652 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7ff f986 	bl	8001938 <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002630:	e009      	b.n	8002646 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7ff f981 	bl	8001938 <HAL_GetTick>
 8002636:	0002      	movs	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	4a79      	ldr	r2, [pc, #484]	@ (8002824 <HAL_RCC_OscConfig+0x620>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e0e6      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002646:	4b75      	ldr	r3, [pc, #468]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	2202      	movs	r2, #2
 800264c:	4013      	ands	r3, r2
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x42e>
 8002650:	e013      	b.n	800267a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7ff f971 	bl	8001938 <HAL_GetTick>
 8002656:	0003      	movs	r3, r0
 8002658:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800265a:	e009      	b.n	8002670 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7ff f96c 	bl	8001938 <HAL_GetTick>
 8002660:	0002      	movs	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	4a6f      	ldr	r2, [pc, #444]	@ (8002824 <HAL_RCC_OscConfig+0x620>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e0d1      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002670:	4b6a      	ldr	r3, [pc, #424]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002674:	2202      	movs	r2, #2
 8002676:	4013      	ands	r3, r2
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800267a:	231f      	movs	r3, #31
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d105      	bne.n	8002690 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002684:	4b65      	ldr	r3, [pc, #404]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002688:	4b64      	ldr	r3, [pc, #400]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 800268a:	4967      	ldr	r1, [pc, #412]	@ (8002828 <HAL_RCC_OscConfig+0x624>)
 800268c:	400a      	ands	r2, r1
 800268e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d100      	bne.n	800269a <HAL_RCC_OscConfig+0x496>
 8002698:	e0bb      	b.n	8002812 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269a:	4b60      	ldr	r3, [pc, #384]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2238      	movs	r2, #56	@ 0x38
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b10      	cmp	r3, #16
 80026a4:	d100      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4a4>
 80026a6:	e07b      	b.n	80027a0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d156      	bne.n	800275e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b0:	4b5a      	ldr	r3, [pc, #360]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b59      	ldr	r3, [pc, #356]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 80026b6:	495d      	ldr	r1, [pc, #372]	@ (800282c <HAL_RCC_OscConfig+0x628>)
 80026b8:	400a      	ands	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7ff f93c 	bl	8001938 <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c6:	f7ff f937 	bl	8001938 <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e09d      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d8:	4b50      	ldr	r3, [pc, #320]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	049b      	lsls	r3, r3, #18
 80026e0:	4013      	ands	r3, r2
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e4:	4b4d      	ldr	r3, [pc, #308]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a51      	ldr	r2, [pc, #324]	@ (8002830 <HAL_RCC_OscConfig+0x62c>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1a      	ldr	r2, [r3, #32]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002710:	431a      	orrs	r2, r3
 8002712:	4b42      	ldr	r3, [pc, #264]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002718:	4b40      	ldr	r3, [pc, #256]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b3f      	ldr	r3, [pc, #252]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0449      	lsls	r1, r1, #17
 8002722:	430a      	orrs	r2, r1
 8002724:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002726:	4b3d      	ldr	r3, [pc, #244]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	4b3c      	ldr	r3, [pc, #240]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 800272c:	2180      	movs	r1, #128	@ 0x80
 800272e:	0549      	lsls	r1, r1, #21
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7ff f900 	bl	8001938 <HAL_GetTick>
 8002738:	0003      	movs	r3, r0
 800273a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f7ff f8fb 	bl	8001938 <HAL_GetTick>
 8002742:	0002      	movs	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e061      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002750:	4b32      	ldr	r3, [pc, #200]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	2380      	movs	r3, #128	@ 0x80
 8002756:	049b      	lsls	r3, r3, #18
 8002758:	4013      	ands	r3, r2
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x53a>
 800275c:	e059      	b.n	8002812 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275e:	4b2f      	ldr	r3, [pc, #188]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b2e      	ldr	r3, [pc, #184]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002764:	4931      	ldr	r1, [pc, #196]	@ (800282c <HAL_RCC_OscConfig+0x628>)
 8002766:	400a      	ands	r2, r1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7ff f8e5 	bl	8001938 <HAL_GetTick>
 800276e:	0003      	movs	r3, r0
 8002770:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002774:	f7ff f8e0 	bl	8001938 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e046      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002786:	4b25      	ldr	r3, [pc, #148]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	2380      	movs	r3, #128	@ 0x80
 800278c:	049b      	lsls	r3, r3, #18
 800278e:	4013      	ands	r3, r2
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002792:	4b22      	ldr	r3, [pc, #136]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	4b21      	ldr	r3, [pc, #132]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 8002798:	4926      	ldr	r1, [pc, #152]	@ (8002834 <HAL_RCC_OscConfig+0x630>)
 800279a:	400a      	ands	r2, r1
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	e038      	b.n	8002812 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e033      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	@ (800281c <HAL_RCC_OscConfig+0x618>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2203      	movs	r2, #3
 80027b6:	401a      	ands	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d126      	bne.n	800280e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2270      	movs	r2, #112	@ 0x70
 80027c4:	401a      	ands	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d11f      	bne.n	800280e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	23fe      	movs	r3, #254	@ 0xfe
 80027d2:	01db      	lsls	r3, r3, #7
 80027d4:	401a      	ands	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027da:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d116      	bne.n	800280e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	23f8      	movs	r3, #248	@ 0xf8
 80027e4:	039b      	lsls	r3, r3, #14
 80027e6:	401a      	ands	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d10e      	bne.n	800280e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	23e0      	movs	r3, #224	@ 0xe0
 80027f4:	051b      	lsls	r3, r3, #20
 80027f6:	401a      	ands	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	0f5b      	lsrs	r3, r3, #29
 8002804:	075a      	lsls	r2, r3, #29
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b008      	add	sp, #32
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	40007000 	.word	0x40007000
 8002824:	00001388 	.word	0x00001388
 8002828:	efffffff 	.word	0xefffffff
 800282c:	feffffff 	.word	0xfeffffff
 8002830:	11c1808c 	.word	0x11c1808c
 8002834:	eefefffc 	.word	0xeefefffc

08002838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0e9      	b.n	8002a20 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800284c:	4b76      	ldr	r3, [pc, #472]	@ (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2207      	movs	r2, #7
 8002852:	4013      	ands	r3, r2
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d91e      	bls.n	8002898 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b73      	ldr	r3, [pc, #460]	@ (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2207      	movs	r2, #7
 8002860:	4393      	bics	r3, r2
 8002862:	0019      	movs	r1, r3
 8002864:	4b70      	ldr	r3, [pc, #448]	@ (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800286c:	f7ff f864 	bl	8001938 <HAL_GetTick>
 8002870:	0003      	movs	r3, r0
 8002872:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002874:	e009      	b.n	800288a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002876:	f7ff f85f 	bl	8001938 <HAL_GetTick>
 800287a:	0002      	movs	r2, r0
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	4a6a      	ldr	r2, [pc, #424]	@ (8002a2c <HAL_RCC_ClockConfig+0x1f4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d901      	bls.n	800288a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e0ca      	b.n	8002a20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800288a:	4b67      	ldr	r3, [pc, #412]	@ (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2207      	movs	r2, #7
 8002890:	4013      	ands	r3, r2
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d1ee      	bne.n	8002876 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2202      	movs	r2, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d015      	beq.n	80028ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2204      	movs	r2, #4
 80028a8:	4013      	ands	r3, r2
 80028aa:	d006      	beq.n	80028ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028ac:	4b60      	ldr	r3, [pc, #384]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	4b5f      	ldr	r3, [pc, #380]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 80028b2:	21e0      	movs	r1, #224	@ 0xe0
 80028b4:	01c9      	lsls	r1, r1, #7
 80028b6:	430a      	orrs	r2, r1
 80028b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4a5d      	ldr	r2, [pc, #372]	@ (8002a34 <HAL_RCC_ClockConfig+0x1fc>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	4b59      	ldr	r3, [pc, #356]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2201      	movs	r2, #1
 80028d4:	4013      	ands	r3, r2
 80028d6:	d057      	beq.n	8002988 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e0:	4b53      	ldr	r3, [pc, #332]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	029b      	lsls	r3, r3, #10
 80028e8:	4013      	ands	r3, r2
 80028ea:	d12b      	bne.n	8002944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e097      	b.n	8002a20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d107      	bne.n	8002908 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	@ 0x80
 80028fe:	049b      	lsls	r3, r3, #18
 8002900:	4013      	ands	r3, r2
 8002902:	d11f      	bne.n	8002944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e08b      	b.n	8002a20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d107      	bne.n	8002920 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002910:	4b47      	ldr	r3, [pc, #284]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	@ 0x80
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4013      	ands	r3, r2
 800291a:	d113      	bne.n	8002944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e07f      	b.n	8002a20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d106      	bne.n	8002936 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002928:	4b41      	ldr	r3, [pc, #260]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 800292a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292c:	2202      	movs	r2, #2
 800292e:	4013      	ands	r3, r2
 8002930:	d108      	bne.n	8002944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e074      	b.n	8002a20 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002936:	4b3e      	ldr	r3, [pc, #248]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 8002938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293a:	2202      	movs	r2, #2
 800293c:	4013      	ands	r3, r2
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e06d      	b.n	8002a20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002944:	4b3a      	ldr	r3, [pc, #232]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2207      	movs	r2, #7
 800294a:	4393      	bics	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4b37      	ldr	r3, [pc, #220]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 8002954:	430a      	orrs	r2, r1
 8002956:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002958:	f7fe ffee 	bl	8001938 <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002960:	e009      	b.n	8002976 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002962:	f7fe ffe9 	bl	8001938 <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	4a2f      	ldr	r2, [pc, #188]	@ (8002a2c <HAL_RCC_ClockConfig+0x1f4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e054      	b.n	8002a20 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	4b2e      	ldr	r3, [pc, #184]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2238      	movs	r2, #56	@ 0x38
 800297c:	401a      	ands	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	429a      	cmp	r2, r3
 8002986:	d1ec      	bne.n	8002962 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002988:	4b27      	ldr	r3, [pc, #156]	@ (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2207      	movs	r2, #7
 800298e:	4013      	ands	r3, r2
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d21e      	bcs.n	80029d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b24      	ldr	r3, [pc, #144]	@ (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2207      	movs	r2, #7
 800299c:	4393      	bics	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	4b21      	ldr	r3, [pc, #132]	@ (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029a8:	f7fe ffc6 	bl	8001938 <HAL_GetTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029b0:	e009      	b.n	80029c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b2:	f7fe ffc1 	bl	8001938 <HAL_GetTick>
 80029b6:	0002      	movs	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	4a1b      	ldr	r2, [pc, #108]	@ (8002a2c <HAL_RCC_ClockConfig+0x1f4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e02c      	b.n	8002a20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029c6:	4b18      	ldr	r3, [pc, #96]	@ (8002a28 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2207      	movs	r2, #7
 80029cc:	4013      	ands	r3, r2
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d1ee      	bne.n	80029b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2204      	movs	r2, #4
 80029da:	4013      	ands	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029de:	4b14      	ldr	r3, [pc, #80]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	4a15      	ldr	r2, [pc, #84]	@ (8002a38 <HAL_RCC_ClockConfig+0x200>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	4b10      	ldr	r3, [pc, #64]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 80029ee:	430a      	orrs	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80029f2:	f000 f829 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 80029f6:	0001      	movs	r1, r0
 80029f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a30 <HAL_RCC_ClockConfig+0x1f8>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	0a1b      	lsrs	r3, r3, #8
 80029fe:	220f      	movs	r2, #15
 8002a00:	401a      	ands	r2, r3
 8002a02:	4b0e      	ldr	r3, [pc, #56]	@ (8002a3c <HAL_RCC_ClockConfig+0x204>)
 8002a04:	0092      	lsls	r2, r2, #2
 8002a06:	58d3      	ldr	r3, [r2, r3]
 8002a08:	221f      	movs	r2, #31
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	000a      	movs	r2, r1
 8002a0e:	40da      	lsrs	r2, r3
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <HAL_RCC_ClockConfig+0x208>)
 8002a12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a14:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <HAL_RCC_ClockConfig+0x20c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f7fe ff31 	bl	8001880 <HAL_InitTick>
 8002a1e:	0003      	movs	r3, r0
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b004      	add	sp, #16
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40022000 	.word	0x40022000
 8002a2c:	00001388 	.word	0x00001388
 8002a30:	40021000 	.word	0x40021000
 8002a34:	fffff0ff 	.word	0xfffff0ff
 8002a38:	ffff8fff 	.word	0xffff8fff
 8002a3c:	08003974 	.word	0x08003974
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000014 	.word	0x20000014

08002a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2238      	movs	r2, #56	@ 0x38
 8002a54:	4013      	ands	r3, r2
 8002a56:	d10f      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a58:	4b39      	ldr	r3, [pc, #228]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0adb      	lsrs	r3, r3, #11
 8002a5e:	2207      	movs	r2, #7
 8002a60:	4013      	ands	r3, r2
 8002a62:	2201      	movs	r2, #1
 8002a64:	409a      	lsls	r2, r3
 8002a66:	0013      	movs	r3, r2
 8002a68:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a6a:	6839      	ldr	r1, [r7, #0]
 8002a6c:	4835      	ldr	r0, [pc, #212]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a6e:	f7fd fb49 	bl	8000104 <__udivsi3>
 8002a72:	0003      	movs	r3, r0
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	e05d      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a78:	4b31      	ldr	r3, [pc, #196]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2238      	movs	r2, #56	@ 0x38
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d102      	bne.n	8002a8a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a84:	4b30      	ldr	r3, [pc, #192]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	e054      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2238      	movs	r2, #56	@ 0x38
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b10      	cmp	r3, #16
 8002a94:	d138      	bne.n	8002b08 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a96:	4b2a      	ldr	r3, [pc, #168]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aa0:	4b27      	ldr	r3, [pc, #156]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	2207      	movs	r2, #7
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	4824      	ldr	r0, [pc, #144]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ab8:	f7fd fb24 	bl	8000104 <__udivsi3>
 8002abc:	0003      	movs	r3, r0
 8002abe:	0019      	movs	r1, r3
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	227f      	movs	r2, #127	@ 0x7f
 8002ac8:	4013      	ands	r3, r2
 8002aca:	434b      	muls	r3, r1
 8002acc:	617b      	str	r3, [r7, #20]
        break;
 8002ace:	e00d      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	481c      	ldr	r0, [pc, #112]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ad4:	f7fd fb16 	bl	8000104 <__udivsi3>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	0019      	movs	r1, r3
 8002adc:	4b18      	ldr	r3, [pc, #96]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	227f      	movs	r2, #127	@ 0x7f
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	434b      	muls	r3, r1
 8002ae8:	617b      	str	r3, [r7, #20]
        break;
 8002aea:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002aec:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	0f5b      	lsrs	r3, r3, #29
 8002af2:	2207      	movs	r2, #7
 8002af4:	4013      	ands	r3, r2
 8002af6:	3301      	adds	r3, #1
 8002af8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	6978      	ldr	r0, [r7, #20]
 8002afe:	f7fd fb01 	bl	8000104 <__udivsi3>
 8002b02:	0003      	movs	r3, r0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	e015      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b08:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2238      	movs	r2, #56	@ 0x38
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d103      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b14:	2380      	movs	r3, #128	@ 0x80
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	e00b      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b1c:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2238      	movs	r2, #56	@ 0x38
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b18      	cmp	r3, #24
 8002b26:	d103      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b28:	23fa      	movs	r3, #250	@ 0xfa
 8002b2a:	01db      	lsls	r3, r3, #7
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	e001      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b34:	693b      	ldr	r3, [r7, #16]
}
 8002b36:	0018      	movs	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b006      	add	sp, #24
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	40021000 	.word	0x40021000
 8002b44:	00f42400 	.word	0x00f42400
 8002b48:	007a1200 	.word	0x007a1200

08002b4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b50:	4b02      	ldr	r3, [pc, #8]	@ (8002b5c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	20000000 	.word	0x20000000

08002b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b60:	b5b0      	push	{r4, r5, r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b64:	f7ff fff2 	bl	8002b4c <HAL_RCC_GetHCLKFreq>
 8002b68:	0004      	movs	r4, r0
 8002b6a:	f7ff fb3f 	bl	80021ec <LL_RCC_GetAPB1Prescaler>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	0b1a      	lsrs	r2, r3, #12
 8002b72:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b74:	0092      	lsls	r2, r2, #2
 8002b76:	58d3      	ldr	r3, [r2, r3]
 8002b78:	221f      	movs	r2, #31
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	40dc      	lsrs	r4, r3
 8002b7e:	0023      	movs	r3, r4
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bdb0      	pop	{r4, r5, r7, pc}
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	080039b4 	.word	0x080039b4

08002b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e04a      	b.n	8002c34 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	223d      	movs	r2, #61	@ 0x3d
 8002ba2:	5c9b      	ldrb	r3, [r3, r2]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d107      	bne.n	8002bba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	223c      	movs	r2, #60	@ 0x3c
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7fd fedf 	bl	8000978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	223d      	movs	r2, #61	@ 0x3d
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	0019      	movs	r1, r3
 8002bcc:	0010      	movs	r0, r2
 8002bce:	f000 fa6b 	bl	80030a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2248      	movs	r2, #72	@ 0x48
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	223e      	movs	r2, #62	@ 0x3e
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	223f      	movs	r2, #63	@ 0x3f
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2240      	movs	r2, #64	@ 0x40
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2241      	movs	r2, #65	@ 0x41
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2242      	movs	r2, #66	@ 0x42
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2243      	movs	r2, #67	@ 0x43
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2244      	movs	r2, #68	@ 0x44
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2245      	movs	r2, #69	@ 0x45
 8002c16:	2101      	movs	r1, #1
 8002c18:	5499      	strb	r1, [r3, r2]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2246      	movs	r2, #70	@ 0x46
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2247      	movs	r2, #71	@ 0x47
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	223d      	movs	r2, #61	@ 0x3d
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e04a      	b.n	8002ce4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	223d      	movs	r2, #61	@ 0x3d
 8002c52:	5c9b      	ldrb	r3, [r3, r2]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d107      	bne.n	8002c6a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	223c      	movs	r2, #60	@ 0x3c
 8002c5e:	2100      	movs	r1, #0
 8002c60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 f841 	bl	8002cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	223d      	movs	r2, #61	@ 0x3d
 8002c6e:	2102      	movs	r1, #2
 8002c70:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	0010      	movs	r0, r2
 8002c7e:	f000 fa13 	bl	80030a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2248      	movs	r2, #72	@ 0x48
 8002c86:	2101      	movs	r1, #1
 8002c88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	223e      	movs	r2, #62	@ 0x3e
 8002c8e:	2101      	movs	r1, #1
 8002c90:	5499      	strb	r1, [r3, r2]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	223f      	movs	r2, #63	@ 0x3f
 8002c96:	2101      	movs	r1, #1
 8002c98:	5499      	strb	r1, [r3, r2]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2240      	movs	r2, #64	@ 0x40
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2241      	movs	r2, #65	@ 0x41
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2242      	movs	r2, #66	@ 0x42
 8002cae:	2101      	movs	r1, #1
 8002cb0:	5499      	strb	r1, [r3, r2]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2243      	movs	r2, #67	@ 0x43
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2244      	movs	r2, #68	@ 0x44
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	5499      	strb	r1, [r3, r2]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2245      	movs	r2, #69	@ 0x45
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	5499      	strb	r1, [r3, r2]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2246      	movs	r2, #70	@ 0x46
 8002cce:	2101      	movs	r1, #1
 8002cd0:	5499      	strb	r1, [r3, r2]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2247      	movs	r2, #71	@ 0x47
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	223d      	movs	r2, #61	@ 0x3d
 8002cde:	2101      	movs	r1, #1
 8002ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b002      	add	sp, #8
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cf4:	46c0      	nop			@ (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d08:	2317      	movs	r3, #23
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	223c      	movs	r2, #60	@ 0x3c
 8002d14:	5c9b      	ldrb	r3, [r3, r2]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e0e5      	b.n	8002eea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	223c      	movs	r2, #60	@ 0x3c
 8002d22:	2101      	movs	r1, #1
 8002d24:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b14      	cmp	r3, #20
 8002d2a:	d900      	bls.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002d2c:	e0d1      	b.n	8002ed2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	009a      	lsls	r2, r3, #2
 8002d32:	4b70      	ldr	r3, [pc, #448]	@ (8002ef4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002d34:	18d3      	adds	r3, r2, r3
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	0011      	movs	r1, r2
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 fa34 	bl	80031b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2108      	movs	r1, #8
 8002d54:	430a      	orrs	r2, r1
 8002d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2104      	movs	r1, #4
 8002d64:	438a      	bics	r2, r1
 8002d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6999      	ldr	r1, [r3, #24]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	691a      	ldr	r2, [r3, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	619a      	str	r2, [r3, #24]
      break;
 8002d7a:	e0af      	b.n	8002edc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	0011      	movs	r1, r2
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 fa93 	bl	80032b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699a      	ldr	r2, [r3, #24]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2180      	movs	r1, #128	@ 0x80
 8002d96:	0109      	lsls	r1, r1, #4
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4954      	ldr	r1, [pc, #336]	@ (8002ef8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002da8:	400a      	ands	r2, r1
 8002daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6999      	ldr	r1, [r3, #24]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	021a      	lsls	r2, r3, #8
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	619a      	str	r2, [r3, #24]
      break;
 8002dc0:	e08c      	b.n	8002edc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	0011      	movs	r1, r2
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f000 faee 	bl	80033ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2108      	movs	r1, #8
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2104      	movs	r1, #4
 8002dec:	438a      	bics	r2, r1
 8002dee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69d9      	ldr	r1, [r3, #28]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	61da      	str	r2, [r3, #28]
      break;
 8002e02:	e06b      	b.n	8002edc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 fb4f 	bl	80034b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2180      	movs	r1, #128	@ 0x80
 8002e1e:	0109      	lsls	r1, r1, #4
 8002e20:	430a      	orrs	r2, r1
 8002e22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4932      	ldr	r1, [pc, #200]	@ (8002ef8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69d9      	ldr	r1, [r3, #28]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	021a      	lsls	r2, r3, #8
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	61da      	str	r2, [r3, #28]
      break;
 8002e48:	e048      	b.n	8002edc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	0011      	movs	r1, r2
 8002e52:	0018      	movs	r0, r3
 8002e54:	f000 fb90 	bl	8003578 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2108      	movs	r1, #8
 8002e64:	430a      	orrs	r2, r1
 8002e66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2104      	movs	r1, #4
 8002e74:	438a      	bics	r2, r1
 8002e76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e8a:	e027      	b.n	8002edc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	0011      	movs	r1, r2
 8002e94:	0018      	movs	r0, r3
 8002e96:	f000 fbc9 	bl	800362c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2180      	movs	r1, #128	@ 0x80
 8002ea6:	0109      	lsls	r1, r1, #4
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4910      	ldr	r1, [pc, #64]	@ (8002ef8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002eb8:	400a      	ands	r2, r1
 8002eba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	021a      	lsls	r2, r3, #8
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002ed0:	e004      	b.n	8002edc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002ed2:	2317      	movs	r3, #23
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
      break;
 8002eda:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	223c      	movs	r2, #60	@ 0x3c
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	5499      	strb	r1, [r3, r2]

  return status;
 8002ee4:	2317      	movs	r3, #23
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	781b      	ldrb	r3, [r3, #0]
}
 8002eea:	0018      	movs	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b006      	add	sp, #24
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			@ (mov r8, r8)
 8002ef4:	08003a0c 	.word	0x08003a0c
 8002ef8:	fffffbff 	.word	0xfffffbff

08002efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	230f      	movs	r3, #15
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	223c      	movs	r2, #60	@ 0x3c
 8002f12:	5c9b      	ldrb	r3, [r3, r2]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_TIM_ConfigClockSource+0x20>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e0bc      	b.n	8003096 <HAL_TIM_ConfigClockSource+0x19a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	223c      	movs	r2, #60	@ 0x3c
 8002f20:	2101      	movs	r1, #1
 8002f22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	223d      	movs	r2, #61	@ 0x3d
 8002f28:	2102      	movs	r1, #2
 8002f2a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4a5a      	ldr	r2, [pc, #360]	@ (80030a0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4a59      	ldr	r2, [pc, #356]	@ (80030a4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2280      	movs	r2, #128	@ 0x80
 8002f52:	0192      	lsls	r2, r2, #6
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d040      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0xde>
 8002f58:	2280      	movs	r2, #128	@ 0x80
 8002f5a:	0192      	lsls	r2, r2, #6
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d900      	bls.n	8002f62 <HAL_TIM_ConfigClockSource+0x66>
 8002f60:	e088      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002f62:	2280      	movs	r2, #128	@ 0x80
 8002f64:	0152      	lsls	r2, r2, #5
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d100      	bne.n	8002f6c <HAL_TIM_ConfigClockSource+0x70>
 8002f6a:	e088      	b.n	800307e <HAL_TIM_ConfigClockSource+0x182>
 8002f6c:	2280      	movs	r2, #128	@ 0x80
 8002f6e:	0152      	lsls	r2, r2, #5
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d900      	bls.n	8002f76 <HAL_TIM_ConfigClockSource+0x7a>
 8002f74:	e07e      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002f76:	2b70      	cmp	r3, #112	@ 0x70
 8002f78:	d018      	beq.n	8002fac <HAL_TIM_ConfigClockSource+0xb0>
 8002f7a:	d900      	bls.n	8002f7e <HAL_TIM_ConfigClockSource+0x82>
 8002f7c:	e07a      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002f7e:	2b60      	cmp	r3, #96	@ 0x60
 8002f80:	d04f      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x126>
 8002f82:	d900      	bls.n	8002f86 <HAL_TIM_ConfigClockSource+0x8a>
 8002f84:	e076      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002f86:	2b50      	cmp	r3, #80	@ 0x50
 8002f88:	d03b      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x106>
 8002f8a:	d900      	bls.n	8002f8e <HAL_TIM_ConfigClockSource+0x92>
 8002f8c:	e072      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002f8e:	2b40      	cmp	r3, #64	@ 0x40
 8002f90:	d057      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x146>
 8002f92:	d900      	bls.n	8002f96 <HAL_TIM_ConfigClockSource+0x9a>
 8002f94:	e06e      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002f96:	2b30      	cmp	r3, #48	@ 0x30
 8002f98:	d063      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x166>
 8002f9a:	d86b      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d060      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x166>
 8002fa0:	d868      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d05d      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x166>
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d05b      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x166>
 8002faa:	e063      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fbc:	f000 fc10 	bl	80037e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2277      	movs	r2, #119	@ 0x77
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	609a      	str	r2, [r3, #8]
      break;
 8002fd8:	e052      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fea:	f000 fbf9 	bl	80037e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2180      	movs	r1, #128	@ 0x80
 8002ffa:	01c9      	lsls	r1, r1, #7
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	609a      	str	r2, [r3, #8]
      break;
 8003000:	e03e      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800300e:	001a      	movs	r2, r3
 8003010:	f000 fb6a 	bl	80036e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2150      	movs	r1, #80	@ 0x50
 800301a:	0018      	movs	r0, r3
 800301c:	f000 fbc4 	bl	80037a8 <TIM_ITRx_SetConfig>
      break;
 8003020:	e02e      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800302e:	001a      	movs	r2, r3
 8003030:	f000 fb88 	bl	8003744 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2160      	movs	r1, #96	@ 0x60
 800303a:	0018      	movs	r0, r3
 800303c:	f000 fbb4 	bl	80037a8 <TIM_ITRx_SetConfig>
      break;
 8003040:	e01e      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800304e:	001a      	movs	r2, r3
 8003050:	f000 fb4a 	bl	80036e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2140      	movs	r1, #64	@ 0x40
 800305a:	0018      	movs	r0, r3
 800305c:	f000 fba4 	bl	80037a8 <TIM_ITRx_SetConfig>
      break;
 8003060:	e00e      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	0019      	movs	r1, r3
 800306c:	0010      	movs	r0, r2
 800306e:	f000 fb9b 	bl	80037a8 <TIM_ITRx_SetConfig>
      break;
 8003072:	e005      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003074:	230f      	movs	r3, #15
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	2201      	movs	r2, #1
 800307a:	701a      	strb	r2, [r3, #0]
      break;
 800307c:	e000      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800307e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	223d      	movs	r2, #61	@ 0x3d
 8003084:	2101      	movs	r1, #1
 8003086:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	223c      	movs	r2, #60	@ 0x3c
 800308c:	2100      	movs	r1, #0
 800308e:	5499      	strb	r1, [r3, r2]

  return status;
 8003090:	230f      	movs	r3, #15
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	781b      	ldrb	r3, [r3, #0]
}
 8003096:	0018      	movs	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	b004      	add	sp, #16
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	ffceff88 	.word	0xffceff88
 80030a4:	ffff00ff 	.word	0xffff00ff

080030a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a37      	ldr	r2, [pc, #220]	@ (8003198 <TIM_Base_SetConfig+0xf0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d008      	beq.n	80030d2 <TIM_Base_SetConfig+0x2a>
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	2380      	movs	r3, #128	@ 0x80
 80030c4:	05db      	lsls	r3, r3, #23
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d003      	beq.n	80030d2 <TIM_Base_SetConfig+0x2a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a33      	ldr	r2, [pc, #204]	@ (800319c <TIM_Base_SetConfig+0xf4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d108      	bne.n	80030e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2270      	movs	r2, #112	@ 0x70
 80030d6:	4393      	bics	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003198 <TIM_Base_SetConfig+0xf0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d014      	beq.n	8003116 <TIM_Base_SetConfig+0x6e>
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	2380      	movs	r3, #128	@ 0x80
 80030f0:	05db      	lsls	r3, r3, #23
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d00f      	beq.n	8003116 <TIM_Base_SetConfig+0x6e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a28      	ldr	r2, [pc, #160]	@ (800319c <TIM_Base_SetConfig+0xf4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00b      	beq.n	8003116 <TIM_Base_SetConfig+0x6e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a27      	ldr	r2, [pc, #156]	@ (80031a0 <TIM_Base_SetConfig+0xf8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d007      	beq.n	8003116 <TIM_Base_SetConfig+0x6e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a26      	ldr	r2, [pc, #152]	@ (80031a4 <TIM_Base_SetConfig+0xfc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d003      	beq.n	8003116 <TIM_Base_SetConfig+0x6e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a25      	ldr	r2, [pc, #148]	@ (80031a8 <TIM_Base_SetConfig+0x100>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d108      	bne.n	8003128 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4a24      	ldr	r2, [pc, #144]	@ (80031ac <TIM_Base_SetConfig+0x104>)
 800311a:	4013      	ands	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2280      	movs	r2, #128	@ 0x80
 800312c:	4393      	bics	r3, r2
 800312e:	001a      	movs	r2, r3
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a11      	ldr	r2, [pc, #68]	@ (8003198 <TIM_Base_SetConfig+0xf0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <TIM_Base_SetConfig+0xbe>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a12      	ldr	r2, [pc, #72]	@ (80031a4 <TIM_Base_SetConfig+0xfc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <TIM_Base_SetConfig+0xbe>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a11      	ldr	r2, [pc, #68]	@ (80031a8 <TIM_Base_SetConfig+0x100>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d103      	bne.n	800316e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	2201      	movs	r2, #1
 800317a:	4013      	ands	r3, r2
 800317c:	2b01      	cmp	r3, #1
 800317e:	d106      	bne.n	800318e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2201      	movs	r2, #1
 8003186:	4393      	bics	r3, r2
 8003188:	001a      	movs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	611a      	str	r2, [r3, #16]
  }
}
 800318e:	46c0      	nop			@ (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b004      	add	sp, #16
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			@ (mov r8, r8)
 8003198:	40012c00 	.word	0x40012c00
 800319c:	40000400 	.word	0x40000400
 80031a0:	40002000 	.word	0x40002000
 80031a4:	40014400 	.word	0x40014400
 80031a8:	40014800 	.word	0x40014800
 80031ac:	fffffcff 	.word	0xfffffcff

080031b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	2201      	movs	r2, #1
 80031c6:	4393      	bics	r3, r2
 80031c8:	001a      	movs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003298 <TIM_OC1_SetConfig+0xe8>)
 80031de:	4013      	ands	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2203      	movs	r2, #3
 80031e6:	4393      	bics	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2202      	movs	r2, #2
 80031f8:	4393      	bics	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a24      	ldr	r2, [pc, #144]	@ (800329c <TIM_OC1_SetConfig+0xec>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <TIM_OC1_SetConfig+0x6e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a23      	ldr	r2, [pc, #140]	@ (80032a0 <TIM_OC1_SetConfig+0xf0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d003      	beq.n	800321e <TIM_OC1_SetConfig+0x6e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a22      	ldr	r2, [pc, #136]	@ (80032a4 <TIM_OC1_SetConfig+0xf4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d10c      	bne.n	8003238 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2208      	movs	r2, #8
 8003222:	4393      	bics	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2204      	movs	r2, #4
 8003234:	4393      	bics	r3, r2
 8003236:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a18      	ldr	r2, [pc, #96]	@ (800329c <TIM_OC1_SetConfig+0xec>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d007      	beq.n	8003250 <TIM_OC1_SetConfig+0xa0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a17      	ldr	r2, [pc, #92]	@ (80032a0 <TIM_OC1_SetConfig+0xf0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_OC1_SetConfig+0xa0>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a16      	ldr	r2, [pc, #88]	@ (80032a4 <TIM_OC1_SetConfig+0xf4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d111      	bne.n	8003274 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4a15      	ldr	r2, [pc, #84]	@ (80032a8 <TIM_OC1_SetConfig+0xf8>)
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4a14      	ldr	r2, [pc, #80]	@ (80032ac <TIM_OC1_SetConfig+0xfc>)
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	621a      	str	r2, [r3, #32]
}
 800328e:	46c0      	nop			@ (mov r8, r8)
 8003290:	46bd      	mov	sp, r7
 8003292:	b006      	add	sp, #24
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			@ (mov r8, r8)
 8003298:	fffeff8f 	.word	0xfffeff8f
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	40014400 	.word	0x40014400
 80032a4:	40014800 	.word	0x40014800
 80032a8:	fffffeff 	.word	0xfffffeff
 80032ac:	fffffdff 	.word	0xfffffdff

080032b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	2210      	movs	r2, #16
 80032c6:	4393      	bics	r3, r2
 80032c8:	001a      	movs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003390 <TIM_OC2_SetConfig+0xe0>)
 80032de:	4013      	ands	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003394 <TIM_OC2_SetConfig+0xe4>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2220      	movs	r2, #32
 80032fa:	4393      	bics	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a22      	ldr	r2, [pc, #136]	@ (8003398 <TIM_OC2_SetConfig+0xe8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d10d      	bne.n	800332e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2280      	movs	r2, #128	@ 0x80
 8003316:	4393      	bics	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2240      	movs	r2, #64	@ 0x40
 800332a:	4393      	bics	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a19      	ldr	r2, [pc, #100]	@ (8003398 <TIM_OC2_SetConfig+0xe8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <TIM_OC2_SetConfig+0x96>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a18      	ldr	r2, [pc, #96]	@ (800339c <TIM_OC2_SetConfig+0xec>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <TIM_OC2_SetConfig+0x96>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a17      	ldr	r2, [pc, #92]	@ (80033a0 <TIM_OC2_SetConfig+0xf0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d113      	bne.n	800336e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4a16      	ldr	r2, [pc, #88]	@ (80033a4 <TIM_OC2_SetConfig+0xf4>)
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4a15      	ldr	r2, [pc, #84]	@ (80033a8 <TIM_OC2_SetConfig+0xf8>)
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	621a      	str	r2, [r3, #32]
}
 8003388:	46c0      	nop			@ (mov r8, r8)
 800338a:	46bd      	mov	sp, r7
 800338c:	b006      	add	sp, #24
 800338e:	bd80      	pop	{r7, pc}
 8003390:	feff8fff 	.word	0xfeff8fff
 8003394:	fffffcff 	.word	0xfffffcff
 8003398:	40012c00 	.word	0x40012c00
 800339c:	40014400 	.word	0x40014400
 80033a0:	40014800 	.word	0x40014800
 80033a4:	fffffbff 	.word	0xfffffbff
 80033a8:	fffff7ff 	.word	0xfffff7ff

080033ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4a31      	ldr	r2, [pc, #196]	@ (8003488 <TIM_OC3_SetConfig+0xdc>)
 80033c2:	401a      	ands	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4a2d      	ldr	r2, [pc, #180]	@ (800348c <TIM_OC3_SetConfig+0xe0>)
 80033d8:	4013      	ands	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2203      	movs	r2, #3
 80033e0:	4393      	bics	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	4a27      	ldr	r2, [pc, #156]	@ (8003490 <TIM_OC3_SetConfig+0xe4>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a23      	ldr	r2, [pc, #140]	@ (8003494 <TIM_OC3_SetConfig+0xe8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d10d      	bne.n	8003426 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	4a22      	ldr	r2, [pc, #136]	@ (8003498 <TIM_OC3_SetConfig+0xec>)
 800340e:	4013      	ands	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	4a1e      	ldr	r2, [pc, #120]	@ (800349c <TIM_OC3_SetConfig+0xf0>)
 8003422:	4013      	ands	r3, r2
 8003424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1a      	ldr	r2, [pc, #104]	@ (8003494 <TIM_OC3_SetConfig+0xe8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <TIM_OC3_SetConfig+0x92>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a1b      	ldr	r2, [pc, #108]	@ (80034a0 <TIM_OC3_SetConfig+0xf4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <TIM_OC3_SetConfig+0x92>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a1a      	ldr	r2, [pc, #104]	@ (80034a4 <TIM_OC3_SetConfig+0xf8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d113      	bne.n	8003466 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4a19      	ldr	r2, [pc, #100]	@ (80034a8 <TIM_OC3_SetConfig+0xfc>)
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4a18      	ldr	r2, [pc, #96]	@ (80034ac <TIM_OC3_SetConfig+0x100>)
 800344a:	4013      	ands	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	621a      	str	r2, [r3, #32]
}
 8003480:	46c0      	nop			@ (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	b006      	add	sp, #24
 8003486:	bd80      	pop	{r7, pc}
 8003488:	fffffeff 	.word	0xfffffeff
 800348c:	fffeff8f 	.word	0xfffeff8f
 8003490:	fffffdff 	.word	0xfffffdff
 8003494:	40012c00 	.word	0x40012c00
 8003498:	fffff7ff 	.word	0xfffff7ff
 800349c:	fffffbff 	.word	0xfffffbff
 80034a0:	40014400 	.word	0x40014400
 80034a4:	40014800 	.word	0x40014800
 80034a8:	ffffefff 	.word	0xffffefff
 80034ac:	ffffdfff 	.word	0xffffdfff

080034b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4a24      	ldr	r2, [pc, #144]	@ (8003558 <TIM_OC4_SetConfig+0xa8>)
 80034c6:	401a      	ands	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a20      	ldr	r2, [pc, #128]	@ (800355c <TIM_OC4_SetConfig+0xac>)
 80034dc:	4013      	ands	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003560 <TIM_OC4_SetConfig+0xb0>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003564 <TIM_OC4_SetConfig+0xb4>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	031b      	lsls	r3, r3, #12
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a17      	ldr	r2, [pc, #92]	@ (8003568 <TIM_OC4_SetConfig+0xb8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d007      	beq.n	8003520 <TIM_OC4_SetConfig+0x70>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a16      	ldr	r2, [pc, #88]	@ (800356c <TIM_OC4_SetConfig+0xbc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d003      	beq.n	8003520 <TIM_OC4_SetConfig+0x70>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a15      	ldr	r2, [pc, #84]	@ (8003570 <TIM_OC4_SetConfig+0xc0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d109      	bne.n	8003534 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	4a14      	ldr	r2, [pc, #80]	@ (8003574 <TIM_OC4_SetConfig+0xc4>)
 8003524:	4013      	ands	r3, r2
 8003526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	621a      	str	r2, [r3, #32]
}
 800354e:	46c0      	nop			@ (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b006      	add	sp, #24
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			@ (mov r8, r8)
 8003558:	ffffefff 	.word	0xffffefff
 800355c:	feff8fff 	.word	0xfeff8fff
 8003560:	fffffcff 	.word	0xfffffcff
 8003564:	ffffdfff 	.word	0xffffdfff
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40014400 	.word	0x40014400
 8003570:	40014800 	.word	0x40014800
 8003574:	ffffbfff 	.word	0xffffbfff

08003578 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4a21      	ldr	r2, [pc, #132]	@ (8003614 <TIM_OC5_SetConfig+0x9c>)
 800358e:	401a      	ands	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003618 <TIM_OC5_SetConfig+0xa0>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4a19      	ldr	r2, [pc, #100]	@ (800361c <TIM_OC5_SetConfig+0xa4>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	041b      	lsls	r3, r3, #16
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a15      	ldr	r2, [pc, #84]	@ (8003620 <TIM_OC5_SetConfig+0xa8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <TIM_OC5_SetConfig+0x66>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a14      	ldr	r2, [pc, #80]	@ (8003624 <TIM_OC5_SetConfig+0xac>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <TIM_OC5_SetConfig+0x66>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a13      	ldr	r2, [pc, #76]	@ (8003628 <TIM_OC5_SetConfig+0xb0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d109      	bne.n	80035f2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003614 <TIM_OC5_SetConfig+0x9c>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	621a      	str	r2, [r3, #32]
}
 800360c:	46c0      	nop			@ (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b006      	add	sp, #24
 8003612:	bd80      	pop	{r7, pc}
 8003614:	fffeffff 	.word	0xfffeffff
 8003618:	fffeff8f 	.word	0xfffeff8f
 800361c:	fffdffff 	.word	0xfffdffff
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40014400 	.word	0x40014400
 8003628:	40014800 	.word	0x40014800

0800362c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4a22      	ldr	r2, [pc, #136]	@ (80036cc <TIM_OC6_SetConfig+0xa0>)
 8003642:	401a      	ands	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a1e      	ldr	r2, [pc, #120]	@ (80036d0 <TIM_OC6_SetConfig+0xa4>)
 8003658:	4013      	ands	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4a1a      	ldr	r2, [pc, #104]	@ (80036d4 <TIM_OC6_SetConfig+0xa8>)
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	051b      	lsls	r3, r3, #20
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a16      	ldr	r2, [pc, #88]	@ (80036d8 <TIM_OC6_SetConfig+0xac>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d007      	beq.n	8003694 <TIM_OC6_SetConfig+0x68>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a15      	ldr	r2, [pc, #84]	@ (80036dc <TIM_OC6_SetConfig+0xb0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d003      	beq.n	8003694 <TIM_OC6_SetConfig+0x68>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a14      	ldr	r2, [pc, #80]	@ (80036e0 <TIM_OC6_SetConfig+0xb4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d109      	bne.n	80036a8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	4a13      	ldr	r2, [pc, #76]	@ (80036e4 <TIM_OC6_SetConfig+0xb8>)
 8003698:	4013      	ands	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	029b      	lsls	r3, r3, #10
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	621a      	str	r2, [r3, #32]
}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b006      	add	sp, #24
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	ffefffff 	.word	0xffefffff
 80036d0:	feff8fff 	.word	0xfeff8fff
 80036d4:	ffdfffff 	.word	0xffdfffff
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	40014400 	.word	0x40014400
 80036e0:	40014800 	.word	0x40014800
 80036e4:	fffbffff 	.word	0xfffbffff

080036e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	2201      	movs	r2, #1
 8003700:	4393      	bics	r3, r2
 8003702:	001a      	movs	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	22f0      	movs	r2, #240	@ 0xf0
 8003712:	4393      	bics	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	220a      	movs	r2, #10
 8003724:	4393      	bics	r3, r2
 8003726:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	621a      	str	r2, [r3, #32]
}
 800373c:	46c0      	nop			@ (mov r8, r8)
 800373e:	46bd      	mov	sp, r7
 8003740:	b006      	add	sp, #24
 8003742:	bd80      	pop	{r7, pc}

08003744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	2210      	movs	r2, #16
 800375c:	4393      	bics	r3, r2
 800375e:	001a      	movs	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4a0d      	ldr	r2, [pc, #52]	@ (80037a4 <TIM_TI2_ConfigInputStage+0x60>)
 800376e:	4013      	ands	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	031b      	lsls	r3, r3, #12
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	22a0      	movs	r2, #160	@ 0xa0
 8003780:	4393      	bics	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	621a      	str	r2, [r3, #32]
}
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b006      	add	sp, #24
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	ffff0fff 	.word	0xffff0fff

080037a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a08      	ldr	r2, [pc, #32]	@ (80037dc <TIM_ITRx_SetConfig+0x34>)
 80037bc:	4013      	ands	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	2207      	movs	r2, #7
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	609a      	str	r2, [r3, #8]
}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b004      	add	sp, #16
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	ffcfff8f 	.word	0xffcfff8f

080037e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	4a09      	ldr	r2, [pc, #36]	@ (800381c <TIM_ETR_SetConfig+0x3c>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	021a      	lsls	r2, r3, #8
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	431a      	orrs	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4313      	orrs	r3, r2
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	609a      	str	r2, [r3, #8]
}
 8003814:	46c0      	nop			@ (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b006      	add	sp, #24
 800381a:	bd80      	pop	{r7, pc}
 800381c:	ffff00ff 	.word	0xffff00ff

08003820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	223c      	movs	r2, #60	@ 0x3c
 800382e:	5c9b      	ldrb	r3, [r3, r2]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003834:	2302      	movs	r3, #2
 8003836:	e050      	b.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	223c      	movs	r2, #60	@ 0x3c
 800383c:	2101      	movs	r1, #1
 800383e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	223d      	movs	r2, #61	@ 0x3d
 8003844:	2102      	movs	r1, #2
 8003846:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a21      	ldr	r2, [pc, #132]	@ (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d108      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a20      	ldr	r2, [pc, #128]	@ (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003866:	4013      	ands	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2270      	movs	r2, #112	@ 0x70
 8003878:	4393      	bics	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a14      	ldr	r2, [pc, #80]	@ (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00a      	beq.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	2380      	movs	r3, #128	@ 0x80
 800389e:	05db      	lsls	r3, r3, #23
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d004      	beq.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a10      	ldr	r2, [pc, #64]	@ (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d10c      	bne.n	80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2280      	movs	r2, #128	@ 0x80
 80038b2:	4393      	bics	r3, r2
 80038b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	223d      	movs	r2, #61	@ 0x3d
 80038cc:	2101      	movs	r1, #1
 80038ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	223c      	movs	r2, #60	@ 0x3c
 80038d4:	2100      	movs	r1, #0
 80038d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b004      	add	sp, #16
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	40012c00 	.word	0x40012c00
 80038e8:	ff0fffff 	.word	0xff0fffff
 80038ec:	40000400 	.word	0x40000400

080038f0 <memset>:
 80038f0:	0003      	movs	r3, r0
 80038f2:	1882      	adds	r2, r0, r2
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d100      	bne.n	80038fa <memset+0xa>
 80038f8:	4770      	bx	lr
 80038fa:	7019      	strb	r1, [r3, #0]
 80038fc:	3301      	adds	r3, #1
 80038fe:	e7f9      	b.n	80038f4 <memset+0x4>

08003900 <__libc_init_array>:
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	2600      	movs	r6, #0
 8003904:	4c0c      	ldr	r4, [pc, #48]	@ (8003938 <__libc_init_array+0x38>)
 8003906:	4d0d      	ldr	r5, [pc, #52]	@ (800393c <__libc_init_array+0x3c>)
 8003908:	1b64      	subs	r4, r4, r5
 800390a:	10a4      	asrs	r4, r4, #2
 800390c:	42a6      	cmp	r6, r4
 800390e:	d109      	bne.n	8003924 <__libc_init_array+0x24>
 8003910:	2600      	movs	r6, #0
 8003912:	f000 f823 	bl	800395c <_init>
 8003916:	4c0a      	ldr	r4, [pc, #40]	@ (8003940 <__libc_init_array+0x40>)
 8003918:	4d0a      	ldr	r5, [pc, #40]	@ (8003944 <__libc_init_array+0x44>)
 800391a:	1b64      	subs	r4, r4, r5
 800391c:	10a4      	asrs	r4, r4, #2
 800391e:	42a6      	cmp	r6, r4
 8003920:	d105      	bne.n	800392e <__libc_init_array+0x2e>
 8003922:	bd70      	pop	{r4, r5, r6, pc}
 8003924:	00b3      	lsls	r3, r6, #2
 8003926:	58eb      	ldr	r3, [r5, r3]
 8003928:	4798      	blx	r3
 800392a:	3601      	adds	r6, #1
 800392c:	e7ee      	b.n	800390c <__libc_init_array+0xc>
 800392e:	00b3      	lsls	r3, r6, #2
 8003930:	58eb      	ldr	r3, [r5, r3]
 8003932:	4798      	blx	r3
 8003934:	3601      	adds	r6, #1
 8003936:	e7f2      	b.n	800391e <__libc_init_array+0x1e>
 8003938:	08003a60 	.word	0x08003a60
 800393c:	08003a60 	.word	0x08003a60
 8003940:	08003a64 	.word	0x08003a64
 8003944:	08003a60 	.word	0x08003a60

08003948 <memcpy>:
 8003948:	2300      	movs	r3, #0
 800394a:	b510      	push	{r4, lr}
 800394c:	429a      	cmp	r2, r3
 800394e:	d100      	bne.n	8003952 <memcpy+0xa>
 8003950:	bd10      	pop	{r4, pc}
 8003952:	5ccc      	ldrb	r4, [r1, r3]
 8003954:	54c4      	strb	r4, [r0, r3]
 8003956:	3301      	adds	r3, #1
 8003958:	e7f8      	b.n	800394c <memcpy+0x4>
	...

0800395c <_init>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr

08003968 <_fini>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr
