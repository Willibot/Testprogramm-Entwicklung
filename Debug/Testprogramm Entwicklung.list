
Testprogramm Entwicklung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000425c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08004318  08004318  00005318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004428  08004428  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004428  08004428  00006010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004428  08004428  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004428  08004428  00005428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800442c  0800442c  0000542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004430  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000010  08004440  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08004440  00006444  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c721  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa0  00000000  00000000  00012759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00015700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9f  00000000  00000000  00016528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cc2  00000000  00000000  00016fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001407f  00000000  00000000  0002dc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d855  00000000  00000000  00041d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf55d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ea0  00000000  00000000  000cf5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000d2440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004300 	.word	0x08004300

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08004300 	.word	0x08004300

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <MX_DMA_Init+0x38>)
 80003f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80003fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000428 <MX_DMA_Init+0x38>)
 80003fc:	2101      	movs	r1, #1
 80003fe:	430a      	orrs	r2, r1
 8000400:	639a      	str	r2, [r3, #56]	@ 0x38
 8000402:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <MX_DMA_Init+0x38>)
 8000404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000406:	2201      	movs	r2, #1
 8000408:	4013      	ands	r3, r2
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2100      	movs	r1, #0
 8000412:	2009      	movs	r0, #9
 8000414:	f001 fce2 	bl	8001ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000418:	2009      	movs	r0, #9
 800041a:	f001 fcf4 	bl	8001e06 <HAL_NVIC_EnableIRQ>

}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	40021000 	.word	0x40021000

0800042c <MX_GPIO_Init>:
     PB5   ------> SPI1_MOSI
     PB7   ------> I2C1_SDA
     PB8   ------> I2C1_SCL
*/
void MX_GPIO_Init(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b089      	sub	sp, #36	@ 0x24
 8000430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	240c      	movs	r4, #12
 8000434:	193b      	adds	r3, r7, r4
 8000436:	0018      	movs	r0, r3
 8000438:	2314      	movs	r3, #20
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f003 ff29 	bl	8004294 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	4b78      	ldr	r3, [pc, #480]	@ (8000624 <MX_GPIO_Init+0x1f8>)
 8000444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000446:	4b77      	ldr	r3, [pc, #476]	@ (8000624 <MX_GPIO_Init+0x1f8>)
 8000448:	2104      	movs	r1, #4
 800044a:	430a      	orrs	r2, r1
 800044c:	635a      	str	r2, [r3, #52]	@ 0x34
 800044e:	4b75      	ldr	r3, [pc, #468]	@ (8000624 <MX_GPIO_Init+0x1f8>)
 8000450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000452:	2204      	movs	r2, #4
 8000454:	4013      	ands	r3, r2
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045a:	4b72      	ldr	r3, [pc, #456]	@ (8000624 <MX_GPIO_Init+0x1f8>)
 800045c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800045e:	4b71      	ldr	r3, [pc, #452]	@ (8000624 <MX_GPIO_Init+0x1f8>)
 8000460:	2101      	movs	r1, #1
 8000462:	430a      	orrs	r2, r1
 8000464:	635a      	str	r2, [r3, #52]	@ 0x34
 8000466:	4b6f      	ldr	r3, [pc, #444]	@ (8000624 <MX_GPIO_Init+0x1f8>)
 8000468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800046a:	2201      	movs	r2, #1
 800046c:	4013      	ands	r3, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	4b6c      	ldr	r3, [pc, #432]	@ (8000624 <MX_GPIO_Init+0x1f8>)
 8000474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000476:	4b6b      	ldr	r3, [pc, #428]	@ (8000624 <MX_GPIO_Init+0x1f8>)
 8000478:	2102      	movs	r1, #2
 800047a:	430a      	orrs	r2, r1
 800047c:	635a      	str	r2, [r3, #52]	@ 0x34
 800047e:	4b69      	ldr	r3, [pc, #420]	@ (8000624 <MX_GPIO_Init+0x1f8>)
 8000480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000482:	2202      	movs	r2, #2
 8000484:	4013      	ands	r3, r2
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800048a:	23c8      	movs	r3, #200	@ 0xc8
 800048c:	0159      	lsls	r1, r3, #5
 800048e:	23a0      	movs	r3, #160	@ 0xa0
 8000490:	05db      	lsls	r3, r3, #23
 8000492:	2200      	movs	r2, #0
 8000494:	0018      	movs	r0, r3
 8000496:	f002 f889 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800049a:	4b63      	ldr	r3, [pc, #396]	@ (8000628 <MX_GPIO_Init+0x1fc>)
 800049c:	2200      	movs	r2, #0
 800049e:	2140      	movs	r1, #64	@ 0x40
 80004a0:	0018      	movs	r0, r3
 80004a2:	f002 f883 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	4a60      	ldr	r2, [pc, #384]	@ (800062c <MX_GPIO_Init+0x200>)
 80004aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2203      	movs	r2, #3
 80004b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	4a5d      	ldr	r2, [pc, #372]	@ (8000630 <MX_GPIO_Init+0x204>)
 80004bc:	0019      	movs	r1, r3
 80004be:	0010      	movs	r0, r2
 80004c0:	f001 ff10 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA5 PA6
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	4a5b      	ldr	r2, [pc, #364]	@ (8000634 <MX_GPIO_Init+0x208>)
 80004c8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2203      	movs	r2, #3
 80004ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d6:	193a      	adds	r2, r7, r4
 80004d8:	23a0      	movs	r3, #160	@ 0xa0
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 ff00 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2202      	movs	r2, #2
 80004e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	2284      	movs	r2, #132	@ 0x84
 80004ee:	0392      	lsls	r2, r2, #14
 80004f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	193a      	adds	r2, r7, r4
 80004fa:	23a0      	movs	r3, #160	@ 0xa0
 80004fc:	05db      	lsls	r3, r3, #23
 80004fe:	0011      	movs	r1, r2
 8000500:	0018      	movs	r0, r3
 8000502:	f001 feef 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2208      	movs	r2, #8
 800050a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2200      	movs	r2, #0
 8000510:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	193a      	adds	r2, r7, r4
 800051a:	23a0      	movs	r3, #160	@ 0xa0
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	0011      	movs	r1, r2
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fedf 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2201      	movs	r2, #1
 800052a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2203      	movs	r2, #3
 8000530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000538:	193b      	adds	r3, r7, r4
 800053a:	4a3b      	ldr	r2, [pc, #236]	@ (8000628 <MX_GPIO_Init+0x1fc>)
 800053c:	0019      	movs	r1, r3
 800053e:	0010      	movs	r0, r2
 8000540:	f001 fed0 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2202      	movs	r2, #2
 8000548:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054a:	193b      	adds	r3, r7, r4
 800054c:	2200      	movs	r2, #0
 800054e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000556:	193b      	adds	r3, r7, r4
 8000558:	4a33      	ldr	r2, [pc, #204]	@ (8000628 <MX_GPIO_Init+0x1fc>)
 800055a:	0019      	movs	r1, r3
 800055c:	0010      	movs	r0, r2
 800055e:	f001 fec1 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000562:	0021      	movs	r1, r4
 8000564:	187b      	adds	r3, r7, r1
 8000566:	22c8      	movs	r2, #200	@ 0xc8
 8000568:	0152      	lsls	r2, r2, #5
 800056a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	000c      	movs	r4, r1
 800056e:	193b      	adds	r3, r7, r4
 8000570:	2201      	movs	r2, #1
 8000572:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	193b      	adds	r3, r7, r4
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	193a      	adds	r2, r7, r4
 8000582:	23a0      	movs	r3, #160	@ 0xa0
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	0011      	movs	r1, r2
 8000588:	0018      	movs	r0, r3
 800058a:	f001 feab 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800058e:	193b      	adds	r3, r7, r4
 8000590:	2238      	movs	r2, #56	@ 0x38
 8000592:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2202      	movs	r2, #2
 8000598:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	193b      	adds	r3, r7, r4
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000628 <MX_GPIO_Init+0x1fc>)
 80005b0:	0019      	movs	r1, r3
 80005b2:	0010      	movs	r0, r2
 80005b4:	f001 fe96 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2240      	movs	r2, #64	@ 0x40
 80005bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2201      	movs	r2, #1
 80005c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	4a15      	ldr	r2, [pc, #84]	@ (8000628 <MX_GPIO_Init+0x1fc>)
 80005d4:	0019      	movs	r1, r3
 80005d6:	0010      	movs	r0, r2
 80005d8:	f001 fe84 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80005dc:	0021      	movs	r1, r4
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	22c0      	movs	r2, #192	@ 0xc0
 80005e2:	0052      	lsls	r2, r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2212      	movs	r2, #18
 80005ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2206      	movs	r2, #6
 80005fc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <MX_GPIO_Init+0x1fc>)
 8000602:	0019      	movs	r1, r3
 8000604:	0010      	movs	r0, r2
 8000606:	f001 fe6d 	bl	80022e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	2005      	movs	r0, #5
 8000610:	f001 fbe4 	bl	8001ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000614:	2005      	movs	r0, #5
 8000616:	f001 fbf6 	bl	8001e06 <HAL_NVIC_EnableIRQ>

}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b009      	add	sp, #36	@ 0x24
 8000620:	bd90      	pop	{r4, r7, pc}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	40021000 	.word	0x40021000
 8000628:	50000400 	.word	0x50000400
 800062c:	0000c040 	.word	0x0000c040
 8000630:	50000800 	.word	0x50000800
 8000634:	00008065 	.word	0x00008065

08000638 <HAL_GPIO_EXTI_Falling_Callback>:
// Effektsteuerung für LED-Blinken bei Interrupt
volatile uint32_t effect_end_time = 0;
volatile bool effect_active = false;

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	0002      	movs	r2, r0
 8000640:	1dbb      	adds	r3, r7, #6
 8000642:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == GPIO_PIN_1)
 8000644:	1dbb      	adds	r3, r7, #6
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d121      	bne.n	8000690 <HAL_GPIO_EXTI_Falling_Callback+0x58>
    {
        if (!effect_active) // Nur wenn kein Effekt läuft
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2201      	movs	r2, #1
 8000654:	4053      	eors	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d019      	beq.n	8000690 <HAL_GPIO_EXTI_Falling_Callback+0x58>
        {
            sound_engine_play(SOUND_BEEP);
 800065c:	2001      	movs	r0, #1
 800065e:	f001 fa0d 	bl	8001a7c <sound_engine_play>

            // LEDs: Rot blinken für 0,5s (doppeltes Blinken)
            led_effect_engine_set(LED_EFFECT_BLINK);
 8000662:	2002      	movs	r0, #2
 8000664:	f000 ff42 	bl	80014ec <led_effect_engine_set>
            effect_params.hue = 0; // Rot
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
            effect_params.brightness = 255;
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8000670:	22ff      	movs	r2, #255	@ 0xff
 8000672:	705a      	strb	r2, [r3, #1]
            effect_params.speed = 137; // (1000 - 125) / 8 = 109,375 → speed ≈ 137
 8000674:	4b09      	ldr	r3, [pc, #36]	@ (800069c <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8000676:	2289      	movs	r2, #137	@ 0x89
 8000678:	709a      	strb	r2, [r3, #2]
            effect_active = true;
 800067a:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 800067c:	2201      	movs	r2, #1
 800067e:	701a      	strb	r2, [r3, #0]
            effect_end_time = HAL_GetTick() + 500; // 0,5s
 8000680:	f001 faf6 	bl	8001c70 <HAL_GetTick>
 8000684:	0003      	movs	r3, r0
 8000686:	33f5      	adds	r3, #245	@ 0xf5
 8000688:	33ff      	adds	r3, #255	@ 0xff
 800068a:	001a      	movs	r2, r3
 800068c:	4b04      	ldr	r3, [pc, #16]	@ (80006a0 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 800068e:	601a      	str	r2, [r3, #0]
        }
    }
}
 8000690:	46c0      	nop			@ (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b002      	add	sp, #8
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000034 	.word	0x20000034
 800069c:	2000041c 	.word	0x2000041c
 80006a0:	20000030 	.word	0x20000030

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f001 fa66 	bl	8001b78 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f844 	bl	8000738 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f7ff febc 	bl	800042c <MX_GPIO_Init>
  // Test: EXTI1 explizit auf Port A routen (nur zum Test)
  // SYSCFG->EXTICR[0] &= ~(0xF << 4); // Entfernt, CubeMX übernimmt das Routing
  MX_DMA_Init();
 80006b4:	f7ff fe9c 	bl	80003f0 <MX_DMA_Init>
  MX_TIM3_Init();
 80006b8:	f000 f8fa 	bl	80008b0 <MX_TIM3_Init>
  MX_TIM14_Init();
 80006bc:	f000 f958 	bl	8000970 <MX_TIM14_Init>
  led_driver_init();
 80006c0:	f000 fbe4 	bl	8000e8c <led_driver_init>
  /* USER CODE BEGIN 2 */
  sound_engine_init();
 80006c4:	f001 fa26 	bl	8001b14 <sound_engine_init>
  led_effect_engine_init();
 80006c8:	f000 ff06 	bl	80014d8 <led_effect_engine_init>

  // Start mit solid green
  led_effect_engine_set(LED_EFFECT_SOLID);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 ff0d 	bl	80014ec <led_effect_engine_set>
  effect_params.hue = 85; // Grün
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <main+0x88>)
 80006d4:	2255      	movs	r2, #85	@ 0x55
 80006d6:	701a      	strb	r2, [r3, #0]
  effect_params.brightness = 50;
 80006d8:	4b14      	ldr	r3, [pc, #80]	@ (800072c <main+0x88>)
 80006da:	2232      	movs	r2, #50	@ 0x32
 80006dc:	705a      	strb	r2, [r3, #1]
  effect_active = false;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <main+0x8c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    sound_engine_tick();
 80006e4:	f001 f9da 	bl	8001a9c <sound_engine_tick>
    sound_beep_update();
 80006e8:	f001 f98a 	bl	8001a00 <sound_beep_update>
    led_effect_engine_update(HAL_GetTick());
 80006ec:	f001 fac0 	bl	8001c70 <HAL_GetTick>
 80006f0:	0003      	movs	r3, r0
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 ff2e 	bl	8001554 <led_effect_engine_update>

    // Nach 0,5s zurück zu grün
    if (effect_active && HAL_GetTick() > effect_end_time)
 80006f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <main+0x8c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d0f0      	beq.n	80006e4 <main+0x40>
 8000702:	f001 fab5 	bl	8001c70 <HAL_GetTick>
 8000706:	0002      	movs	r2, r0
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <main+0x90>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	429a      	cmp	r2, r3
 800070e:	d9e9      	bls.n	80006e4 <main+0x40>
    {
        effect_params.hue = 85; // Grün
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <main+0x88>)
 8000712:	2255      	movs	r2, #85	@ 0x55
 8000714:	701a      	strb	r2, [r3, #0]
        effect_params.brightness = 50;
 8000716:	4b05      	ldr	r3, [pc, #20]	@ (800072c <main+0x88>)
 8000718:	2232      	movs	r2, #50	@ 0x32
 800071a:	705a      	strb	r2, [r3, #1]
        led_effect_engine_set(LED_EFFECT_SOLID);
 800071c:	2001      	movs	r0, #1
 800071e:	f000 fee5 	bl	80014ec <led_effect_engine_set>
        effect_active = false;
 8000722:	4b03      	ldr	r3, [pc, #12]	@ (8000730 <main+0x8c>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
    sound_engine_tick();
 8000728:	e7dc      	b.n	80006e4 <main+0x40>
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	2000041c 	.word	0x2000041c
 8000730:	20000034 	.word	0x20000034
 8000734:	20000030 	.word	0x20000030

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b093      	sub	sp, #76	@ 0x4c
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	2410      	movs	r4, #16
 8000740:	193b      	adds	r3, r7, r4
 8000742:	0018      	movs	r0, r3
 8000744:	2338      	movs	r3, #56	@ 0x38
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f003 fda3 	bl	8004294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074e:	003b      	movs	r3, r7
 8000750:	0018      	movs	r0, r3
 8000752:	2310      	movs	r3, #16
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f003 fd9c 	bl	8004294 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2380      	movs	r3, #128	@ 0x80
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	0018      	movs	r0, r3
 8000762:	f001 ff75 	bl	8002650 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2202      	movs	r2, #2
 800076a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2280      	movs	r2, #128	@ 0x80
 8000770:	0052      	lsls	r2, r2, #1
 8000772:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000774:	0021      	movs	r1, r4
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2240      	movs	r2, #64	@ 0x40
 8000780:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2202      	movs	r2, #2
 8000786:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2202      	movs	r2, #2
 800078c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2208      	movs	r2, #8
 8000798:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	0292      	lsls	r2, r2, #10
 80007a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2280      	movs	r2, #128	@ 0x80
 80007a6:	0492      	lsls	r2, r2, #18
 80007a8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2280      	movs	r2, #128	@ 0x80
 80007ae:	0592      	lsls	r2, r2, #22
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 ff97 	bl	80026e8 <HAL_RCC_OscConfig>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007be:	f000 f819 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	003b      	movs	r3, r7
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2202      	movs	r2, #2
 80007cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	003b      	movs	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007da:	003b      	movs	r3, r7
 80007dc:	2102      	movs	r1, #2
 80007de:	0018      	movs	r0, r3
 80007e0:	f002 fa9c 	bl	8002d1c <HAL_RCC_ClockConfig>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007e8:	f000 f804 	bl	80007f4 <Error_Handler>
  }
}
 80007ec:	46c0      	nop			@ (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b013      	add	sp, #76	@ 0x4c
 80007f2:	bd90      	pop	{r4, r7, pc}

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	e7fd      	b.n	80007fc <Error_Handler+0x8>

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <HAL_MspInit+0x44>)
 8000808:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <HAL_MspInit+0x44>)
 800080c:	2101      	movs	r1, #1
 800080e:	430a      	orrs	r2, r1
 8000810:	641a      	str	r2, [r3, #64]	@ 0x40
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <HAL_MspInit+0x44>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	2201      	movs	r2, #1
 8000818:	4013      	ands	r3, r2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <HAL_MspInit+0x44>)
 8000820:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <HAL_MspInit+0x44>)
 8000824:	2180      	movs	r1, #128	@ 0x80
 8000826:	0549      	lsls	r1, r1, #21
 8000828:	430a      	orrs	r2, r1
 800082a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <HAL_MspInit+0x44>)
 800082e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000830:	2380      	movs	r3, #128	@ 0x80
 8000832:	055b      	lsls	r3, r3, #21
 8000834:	4013      	ands	r3, r2
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  // Eigene globale Initialisierungen, z.B. NVIC-Prioritäten, können hier ergänzt werden.
  /* USER CODE END MspInit 1 */
}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	40021000 	.word	0x40021000

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	e7fd      	b.n	800084c <NMI_Handler+0x4>

08000850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000854:	46c0      	nop			@ (mov r8, r8)
 8000856:	e7fd      	b.n	8000854 <HardFault_Handler+0x4>

08000858 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000870:	f001 f9ec 	bl	8001c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800087e:	2002      	movs	r0, #2
 8000880:	f001 feb2 	bl	80025e8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000890:	4b03      	ldr	r3, [pc, #12]	@ (80008a0 <DMA1_Channel1_IRQHandler+0x14>)
 8000892:	0018      	movs	r0, r3
 8000894:	f001 fbe4 	bl	8002060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	200000d0 	.word	0x200000d0

080008a4 <SystemInit>:
  * Erklärung:
  *   Wird beim Reset aufgerufen, bevor main() startet.
  *   Hier kann z.B. die Vektor-Tabelle umgesetzt werden.
  */
void SystemInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim14;
DMA_HandleTypeDef hdma_tim3_ch2;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b6:	231c      	movs	r3, #28
 80008b8:	18fb      	adds	r3, r7, r3
 80008ba:	0018      	movs	r0, r3
 80008bc:	230c      	movs	r3, #12
 80008be:	001a      	movs	r2, r3
 80008c0:	2100      	movs	r1, #0
 80008c2:	f003 fce7 	bl	8004294 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c6:	003b      	movs	r3, r7
 80008c8:	0018      	movs	r0, r3
 80008ca:	231c      	movs	r3, #28
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f003 fce0 	bl	8004294 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d4:	4b24      	ldr	r3, [pc, #144]	@ (8000968 <MX_TIM3_Init+0xb8>)
 80008d6:	4a25      	ldr	r2, [pc, #148]	@ (800096c <MX_TIM3_Init+0xbc>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008da:	4b23      	ldr	r3, [pc, #140]	@ (8000968 <MX_TIM3_Init+0xb8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b21      	ldr	r3, [pc, #132]	@ (8000968 <MX_TIM3_Init+0xb8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 80008e6:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <MX_TIM3_Init+0xb8>)
 80008e8:	224f      	movs	r2, #79	@ 0x4f
 80008ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <MX_TIM3_Init+0xb8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <MX_TIM3_Init+0xb8>)
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_TIM3_Init+0xb8>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f002 fc10 	bl	8003120 <HAL_TIM_PWM_Init>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000904:	f7ff ff76 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000908:	211c      	movs	r1, #28
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000916:	187a      	adds	r2, r7, r1
 8000918:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <MX_TIM3_Init+0xb8>)
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f003 fc51 	bl	80041c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d001      	beq.n	800092a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000926:	f7ff ff65 	bl	80007f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800092a:	003b      	movs	r3, r7
 800092c:	2260      	movs	r2, #96	@ 0x60
 800092e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000930:	003b      	movs	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000936:	003b      	movs	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093c:	003b      	movs	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000942:	0039      	movs	r1, r7
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <MX_TIM3_Init+0xb8>)
 8000946:	2204      	movs	r2, #4
 8000948:	0018      	movs	r0, r3
 800094a:	f002 ff13 	bl	8003774 <HAL_TIM_PWM_ConfigChannel>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000952:	f7ff ff4f 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000956:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <MX_TIM3_Init+0xb8>)
 8000958:	0018      	movs	r0, r3
 800095a:	f000 f8c5 	bl	8000ae8 <HAL_TIM_MspPostInit>

}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b00a      	add	sp, #40	@ 0x28
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	20000038 	.word	0x20000038
 800096c:	40000400 	.word	0x40000400

08000970 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	0018      	movs	r0, r3
 800097a:	231c      	movs	r3, #28
 800097c:	001a      	movs	r2, r3
 800097e:	2100      	movs	r1, #0
 8000980:	f003 fc88 	bl	8004294 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000984:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <MX_TIM14_Init+0x94>)
 8000986:	4a20      	ldr	r2, [pc, #128]	@ (8000a08 <MX_TIM14_Init+0x98>)
 8000988:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1599;
 800098a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <MX_TIM14_Init+0x94>)
 800098c:	4a1f      	ldr	r2, [pc, #124]	@ (8000a0c <MX_TIM14_Init+0x9c>)
 800098e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <MX_TIM14_Init+0x94>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9;
 8000996:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <MX_TIM14_Init+0x94>)
 8000998:	2209      	movs	r2, #9
 800099a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099c:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <MX_TIM14_Init+0x94>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <MX_TIM14_Init+0x94>)
 80009a4:	2280      	movs	r2, #128	@ 0x80
 80009a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009a8:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <MX_TIM14_Init+0x94>)
 80009aa:	0018      	movs	r0, r3
 80009ac:	f002 fb60 	bl	8003070 <HAL_TIM_Base_Init>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80009b4:	f7ff ff1e 	bl	80007f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <MX_TIM14_Init+0x94>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f002 fbb0 	bl	8003120 <HAL_TIM_PWM_Init>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80009c4:	f7ff ff16 	bl	80007f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2260      	movs	r2, #96	@ 0x60
 80009cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009e0:	1d39      	adds	r1, r7, #4
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <MX_TIM14_Init+0x94>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	0018      	movs	r0, r3
 80009e8:	f002 fec4 	bl	8003774 <HAL_TIM_PWM_ConfigChannel>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80009f0:	f7ff ff00 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80009f4:	4b03      	ldr	r3, [pc, #12]	@ (8000a04 <MX_TIM14_Init+0x94>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 f876 	bl	8000ae8 <HAL_TIM_MspPostInit>

}
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b008      	add	sp, #32
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000084 	.word	0x20000084
 8000a08:	40002000 	.word	0x40002000
 8000a0c:	0000063f 	.word	0x0000063f

08000a10 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a98 <HAL_TIM_PWM_MspInit+0x88>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d136      	bne.n	8000a90 <HAL_TIM_PWM_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a22:	4b1e      	ldr	r3, [pc, #120]	@ (8000a9c <HAL_TIM_PWM_MspInit+0x8c>)
 8000a24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a26:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <HAL_TIM_PWM_MspInit+0x8c>)
 8000a28:	2102      	movs	r1, #2
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a9c <HAL_TIM_PWM_MspInit+0x8c>)
 8000a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a32:	2202      	movs	r2, #2
 8000a34:	4013      	ands	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel1;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x90>)
 8000a3c:	4a19      	ldr	r2, [pc, #100]	@ (8000aa4 <HAL_TIM_PWM_MspInit+0x94>)
 8000a3e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x90>)
 8000a42:	2221      	movs	r2, #33	@ 0x21
 8000a44:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x90>)
 8000a48:	2210      	movs	r2, #16
 8000a4a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x90>)
 8000a54:	2280      	movs	r2, #128	@ 0x80
 8000a56:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a58:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x90>)
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	0052      	lsls	r2, r2, #1
 8000a5e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x90>)
 8000a62:	2280      	movs	r2, #128	@ 0x80
 8000a64:	00d2      	lsls	r2, r2, #3
 8000a66:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x90>)
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8000a74:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x90>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f001 f9e2 	bl	8001e40 <HAL_DMA_Init>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8000a80:	f7ff feb8 	bl	80007f4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a06      	ldr	r2, [pc, #24]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x90>)
 8000a88:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a8a:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <HAL_TIM_PWM_MspInit+0x90>)
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b004      	add	sp, #16
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40000400 	.word	0x40000400
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	200000d0 	.word	0x200000d0
 8000aa4:	40020008 	.word	0x40020008

08000aa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10d      	bne.n	8000ad6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000aba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8000abc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ac0:	2180      	movs	r1, #128	@ 0x80
 8000ac2:	0209      	lsls	r1, r1, #8
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8000aca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b004      	add	sp, #16
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	40002000 	.word	0x40002000
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b08b      	sub	sp, #44	@ 0x2c
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	2414      	movs	r4, #20
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	0018      	movs	r0, r3
 8000af6:	2314      	movs	r3, #20
 8000af8:	001a      	movs	r2, r3
 8000afa:	2100      	movs	r1, #0
 8000afc:	f003 fbca 	bl	8004294 <memset>
  if(timHandle->Instance==TIM3)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a29      	ldr	r2, [pc, #164]	@ (8000bac <HAL_TIM_MspPostInit+0xc4>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d123      	bne.n	8000b52 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <HAL_TIM_MspPostInit+0xc8>)
 8000b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b0e:	4b28      	ldr	r3, [pc, #160]	@ (8000bb0 <HAL_TIM_MspPostInit+0xc8>)
 8000b10:	2101      	movs	r1, #1
 8000b12:	430a      	orrs	r2, r1
 8000b14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b16:	4b26      	ldr	r3, [pc, #152]	@ (8000bb0 <HAL_TIM_MspPostInit+0xc8>)
 8000b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b22:	0021      	movs	r1, r4
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2280      	movs	r2, #128	@ 0x80
 8000b28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2201      	movs	r2, #1
 8000b40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	187a      	adds	r2, r7, r1
 8000b44:	23a0      	movs	r3, #160	@ 0xa0
 8000b46:	05db      	lsls	r3, r3, #23
 8000b48:	0011      	movs	r1, r2
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f001 fbca 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000b50:	e027      	b.n	8000ba2 <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM14)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a17      	ldr	r2, [pc, #92]	@ (8000bb4 <HAL_TIM_MspPostInit+0xcc>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d122      	bne.n	8000ba2 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <HAL_TIM_MspPostInit+0xc8>)
 8000b5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <HAL_TIM_MspPostInit+0xc8>)
 8000b62:	2101      	movs	r1, #1
 8000b64:	430a      	orrs	r2, r1
 8000b66:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <HAL_TIM_MspPostInit+0xc8>)
 8000b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4013      	ands	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b74:	2114      	movs	r1, #20
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2210      	movs	r2, #16
 8000b7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2202      	movs	r2, #2
 8000b80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2204      	movs	r2, #4
 8000b92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	187a      	adds	r2, r7, r1
 8000b96:	23a0      	movs	r3, #160	@ 0xa0
 8000b98:	05db      	lsls	r3, r3, #23
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f001 fba1 	bl	80022e4 <HAL_GPIO_Init>
}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b00b      	add	sp, #44	@ 0x2c
 8000ba8:	bd90      	pop	{r4, r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	40000400 	.word	0x40000400
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40002000 	.word	0x40002000

08000bb8 <hsv_to_rgb>:
// Diese Datei sollte von allen Effekten eingebunden werden, die Farboperationen benötigen.
// -----------------------------------------------------------------------------

#include "color_utils.h"

RGB_t hsv_to_rgb(uint8_t h, uint8_t s, uint8_t v) {
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	0004      	movs	r4, r0
 8000bc0:	0008      	movs	r0, r1
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	1c22      	adds	r2, r4, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	1dbb      	adds	r3, r7, #6
 8000bcc:	1c02      	adds	r2, r0, #0
 8000bce:	701a      	strb	r2, [r3, #0]
 8000bd0:	1d7b      	adds	r3, r7, #5
 8000bd2:	1c0a      	adds	r2, r1, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
    RGB_t rgb = {0, 0, 0};
 8000bd6:	210c      	movs	r1, #12
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2200      	movs	r2, #0
 8000be2:	705a      	strb	r2, [r3, #1]
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2200      	movs	r2, #0
 8000be8:	709a      	strb	r2, [r3, #2]

    uint8_t region = h / 43;
 8000bea:	2517      	movs	r5, #23
 8000bec:	197c      	adds	r4, r7, r5
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	212b      	movs	r1, #43	@ 0x2b
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff fa85 	bl	8000104 <__udivsi3>
 8000bfa:	0003      	movs	r3, r0
 8000bfc:	7023      	strb	r3, [r4, #0]
    uint8_t remainder = (h - (region * 43)) * 6;
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	7819      	ldrb	r1, [r3, #0]
 8000c02:	002c      	movs	r4, r5
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	0013      	movs	r3, r2
 8000c0a:	069b      	lsls	r3, r3, #26
 8000c0c:	1a9b      	subs	r3, r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	189b      	adds	r3, r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	189b      	adds	r3, r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	189b      	adds	r3, r3, r2
 8000c1a:	18cb      	adds	r3, r1, r3
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2016      	movs	r0, #22
 8000c20:	183a      	adds	r2, r7, r0
 8000c22:	1c19      	adds	r1, r3, #0
 8000c24:	1c0b      	adds	r3, r1, #0
 8000c26:	18db      	adds	r3, r3, r3
 8000c28:	185b      	adds	r3, r3, r1
 8000c2a:	18db      	adds	r3, r3, r3
 8000c2c:	7013      	strb	r3, [r2, #0]

    uint8_t p = (v * (255 - s)) >> 8;
 8000c2e:	1d7b      	adds	r3, r7, #5
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	1dba      	adds	r2, r7, #6
 8000c34:	7812      	ldrb	r2, [r2, #0]
 8000c36:	21ff      	movs	r1, #255	@ 0xff
 8000c38:	1a8a      	subs	r2, r1, r2
 8000c3a:	4353      	muls	r3, r2
 8000c3c:	121a      	asrs	r2, r3, #8
 8000c3e:	2315      	movs	r3, #21
 8000c40:	18fb      	adds	r3, r7, r3
 8000c42:	701a      	strb	r2, [r3, #0]
    uint8_t q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8000c44:	1d7b      	adds	r3, r7, #5
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	1dba      	adds	r2, r7, #6
 8000c4a:	7812      	ldrb	r2, [r2, #0]
 8000c4c:	1839      	adds	r1, r7, r0
 8000c4e:	7809      	ldrb	r1, [r1, #0]
 8000c50:	434a      	muls	r2, r1
 8000c52:	1212      	asrs	r2, r2, #8
 8000c54:	21ff      	movs	r1, #255	@ 0xff
 8000c56:	1a8a      	subs	r2, r1, r2
 8000c58:	4353      	muls	r3, r2
 8000c5a:	121a      	asrs	r2, r3, #8
 8000c5c:	2314      	movs	r3, #20
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	701a      	strb	r2, [r3, #0]
    uint8_t t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8000c62:	1d7b      	adds	r3, r7, #5
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	1dba      	adds	r2, r7, #6
 8000c68:	7812      	ldrb	r2, [r2, #0]
 8000c6a:	1839      	adds	r1, r7, r0
 8000c6c:	7809      	ldrb	r1, [r1, #0]
 8000c6e:	20ff      	movs	r0, #255	@ 0xff
 8000c70:	1a41      	subs	r1, r0, r1
 8000c72:	434a      	muls	r2, r1
 8000c74:	1212      	asrs	r2, r2, #8
 8000c76:	21ff      	movs	r1, #255	@ 0xff
 8000c78:	1a8a      	subs	r2, r1, r2
 8000c7a:	4353      	muls	r3, r2
 8000c7c:	121a      	asrs	r2, r3, #8
 8000c7e:	2313      	movs	r3, #19
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	701a      	strb	r2, [r3, #0]

    switch (region) {
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	d854      	bhi.n	8000d36 <hsv_to_rgb+0x17e>
 8000c8c:	009a      	lsls	r2, r3, #2
 8000c8e:	4b43      	ldr	r3, [pc, #268]	@ (8000d9c <hsv_to_rgb+0x1e4>)
 8000c90:	18d3      	adds	r3, r2, r3
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	469f      	mov	pc, r3
        case 0:
            rgb.r = v; rgb.g = t; rgb.b = p; break;
 8000c96:	210c      	movs	r1, #12
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	1d7a      	adds	r2, r7, #5
 8000c9c:	7812      	ldrb	r2, [r2, #0]
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2213      	movs	r2, #19
 8000ca4:	18ba      	adds	r2, r7, r2
 8000ca6:	7812      	ldrb	r2, [r2, #0]
 8000ca8:	705a      	strb	r2, [r3, #1]
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2215      	movs	r2, #21
 8000cae:	18ba      	adds	r2, r7, r2
 8000cb0:	7812      	ldrb	r2, [r2, #0]
 8000cb2:	709a      	strb	r2, [r3, #2]
 8000cb4:	e04f      	b.n	8000d56 <hsv_to_rgb+0x19e>
        case 1:
            rgb.r = q; rgb.g = v; rgb.b = p; break;
 8000cb6:	210c      	movs	r1, #12
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2214      	movs	r2, #20
 8000cbc:	18ba      	adds	r2, r7, r2
 8000cbe:	7812      	ldrb	r2, [r2, #0]
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	1d7a      	adds	r2, r7, #5
 8000cc6:	7812      	ldrb	r2, [r2, #0]
 8000cc8:	705a      	strb	r2, [r3, #1]
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2215      	movs	r2, #21
 8000cce:	18ba      	adds	r2, r7, r2
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	709a      	strb	r2, [r3, #2]
 8000cd4:	e03f      	b.n	8000d56 <hsv_to_rgb+0x19e>
        case 2:
            rgb.r = p; rgb.g = v; rgb.b = t; break;
 8000cd6:	210c      	movs	r1, #12
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2215      	movs	r2, #21
 8000cdc:	18ba      	adds	r2, r7, r2
 8000cde:	7812      	ldrb	r2, [r2, #0]
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	1d7a      	adds	r2, r7, #5
 8000ce6:	7812      	ldrb	r2, [r2, #0]
 8000ce8:	705a      	strb	r2, [r3, #1]
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2213      	movs	r2, #19
 8000cee:	18ba      	adds	r2, r7, r2
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	709a      	strb	r2, [r3, #2]
 8000cf4:	e02f      	b.n	8000d56 <hsv_to_rgb+0x19e>
        case 3:
            rgb.r = p; rgb.g = q; rgb.b = v; break;
 8000cf6:	210c      	movs	r1, #12
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2215      	movs	r2, #21
 8000cfc:	18ba      	adds	r2, r7, r2
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2214      	movs	r2, #20
 8000d06:	18ba      	adds	r2, r7, r2
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	705a      	strb	r2, [r3, #1]
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	1d7a      	adds	r2, r7, #5
 8000d10:	7812      	ldrb	r2, [r2, #0]
 8000d12:	709a      	strb	r2, [r3, #2]
 8000d14:	e01f      	b.n	8000d56 <hsv_to_rgb+0x19e>
        case 4:
            rgb.r = t; rgb.g = p; rgb.b = v; break;
 8000d16:	210c      	movs	r1, #12
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2213      	movs	r2, #19
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	7812      	ldrb	r2, [r2, #0]
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2215      	movs	r2, #21
 8000d26:	18ba      	adds	r2, r7, r2
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	705a      	strb	r2, [r3, #1]
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	1d7a      	adds	r2, r7, #5
 8000d30:	7812      	ldrb	r2, [r2, #0]
 8000d32:	709a      	strb	r2, [r3, #2]
 8000d34:	e00f      	b.n	8000d56 <hsv_to_rgb+0x19e>
        default:
            rgb.r = v; rgb.g = p; rgb.b = q; break;
 8000d36:	210c      	movs	r1, #12
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	1d7a      	adds	r2, r7, #5
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	701a      	strb	r2, [r3, #0]
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2215      	movs	r2, #21
 8000d44:	18ba      	adds	r2, r7, r2
 8000d46:	7812      	ldrb	r2, [r2, #0]
 8000d48:	705a      	strb	r2, [r3, #1]
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2214      	movs	r2, #20
 8000d4e:	18ba      	adds	r2, r7, r2
 8000d50:	7812      	ldrb	r2, [r2, #0]
 8000d52:	709a      	strb	r2, [r3, #2]
 8000d54:	46c0      	nop			@ (mov r8, r8)
    }

    return rgb;
 8000d56:	2010      	movs	r0, #16
 8000d58:	183b      	adds	r3, r7, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	18ba      	adds	r2, r7, r2
 8000d5e:	8811      	ldrh	r1, [r2, #0]
 8000d60:	8019      	strh	r1, [r3, #0]
 8000d62:	7892      	ldrb	r2, [r2, #2]
 8000d64:	709a      	strb	r2, [r3, #2]
 8000d66:	183a      	adds	r2, r7, r0
 8000d68:	2300      	movs	r3, #0
 8000d6a:	7811      	ldrb	r1, [r2, #0]
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	4001      	ands	r1, r0
 8000d70:	20ff      	movs	r0, #255	@ 0xff
 8000d72:	4383      	bics	r3, r0
 8000d74:	430b      	orrs	r3, r1
 8000d76:	7851      	ldrb	r1, [r2, #1]
 8000d78:	20ff      	movs	r0, #255	@ 0xff
 8000d7a:	4001      	ands	r1, r0
 8000d7c:	0209      	lsls	r1, r1, #8
 8000d7e:	4808      	ldr	r0, [pc, #32]	@ (8000da0 <hsv_to_rgb+0x1e8>)
 8000d80:	4003      	ands	r3, r0
 8000d82:	430b      	orrs	r3, r1
 8000d84:	7892      	ldrb	r2, [r2, #2]
 8000d86:	21ff      	movs	r1, #255	@ 0xff
 8000d88:	400a      	ands	r2, r1
 8000d8a:	0412      	lsls	r2, r2, #16
 8000d8c:	4905      	ldr	r1, [pc, #20]	@ (8000da4 <hsv_to_rgb+0x1ec>)
 8000d8e:	400b      	ands	r3, r1
 8000d90:	4313      	orrs	r3, r2
}
 8000d92:	0018      	movs	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b006      	add	sp, #24
 8000d98:	bdb0      	pop	{r4, r5, r7, pc}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	08004378 	.word	0x08004378
 8000da0:	ffff00ff 	.word	0xffff00ff
 8000da4:	ff00ffff 	.word	0xff00ffff

08000da8 <encode_leds_to_pwm>:
// -----------------------------------------------------------------------------
// encode_leds_to_pwm
// Kodiert den aktuellen Zustand von led_state[] in das PWM-Bufferformat für DMA.
// Reihenfolge: GRB (wie von SK6812/WS2812 erwartet).
// -----------------------------------------------------------------------------
static void encode_leds_to_pwm(void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
    uint16_t *p = pwm_buffer;
 8000dae:	4b35      	ldr	r3, [pc, #212]	@ (8000e84 <encode_leds_to_pwm+0xdc>)
 8000db0:	617b      	str	r3, [r7, #20]

    for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8000db2:	2313      	movs	r3, #19
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e04a      	b.n	8000e52 <encode_leds_to_pwm+0xaa>
        uint8_t colors[3] = { led_state[i].g, led_state[i].r, led_state[i].b };
 8000dbc:	2013      	movs	r0, #19
 8000dbe:	183b      	adds	r3, r7, r0
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	4931      	ldr	r1, [pc, #196]	@ (8000e88 <encode_leds_to_pwm+0xe0>)
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	189b      	adds	r3, r3, r2
 8000dca:	18cb      	adds	r3, r1, r3
 8000dcc:	3301      	adds	r3, #1
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	003b      	movs	r3, r7
 8000dd2:	701a      	strb	r2, [r3, #0]
 8000dd4:	183b      	adds	r3, r7, r0
 8000dd6:	781a      	ldrb	r2, [r3, #0]
 8000dd8:	492b      	ldr	r1, [pc, #172]	@ (8000e88 <encode_leds_to_pwm+0xe0>)
 8000dda:	0013      	movs	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	189b      	adds	r3, r3, r2
 8000de0:	5c5a      	ldrb	r2, [r3, r1]
 8000de2:	003b      	movs	r3, r7
 8000de4:	705a      	strb	r2, [r3, #1]
 8000de6:	183b      	adds	r3, r7, r0
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	4927      	ldr	r1, [pc, #156]	@ (8000e88 <encode_leds_to_pwm+0xe0>)
 8000dec:	0013      	movs	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	189b      	adds	r3, r3, r2
 8000df2:	18cb      	adds	r3, r1, r3
 8000df4:	3302      	adds	r3, #2
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	003b      	movs	r3, r7
 8000dfa:	709a      	strb	r2, [r3, #2]
        for (int c = 0; c < 3; ++c) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e01e      	b.n	8000e40 <encode_leds_to_pwm+0x98>
            for (int bit = 7; bit >= 0; --bit) {
 8000e02:	2307      	movs	r3, #7
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	e015      	b.n	8000e34 <encode_leds_to_pwm+0x8c>
                *p++ = (colors[c] & (1 << bit)) ? TIMER_PWM_HIGH : TIMER_PWM_LOW;
 8000e08:	003a      	movs	r2, r7
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	18d3      	adds	r3, r2, r3
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	001a      	movs	r2, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	411a      	asrs	r2, r3
 8000e16:	0013      	movs	r3, r2
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	d001      	beq.n	8000e22 <encode_leds_to_pwm+0x7a>
 8000e1e:	2141      	movs	r1, #65	@ 0x41
 8000e20:	e000      	b.n	8000e24 <encode_leds_to_pwm+0x7c>
 8000e22:	211e      	movs	r1, #30
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	1c9a      	adds	r2, r3, #2
 8000e28:	617a      	str	r2, [r7, #20]
 8000e2a:	1c0a      	adds	r2, r1, #0
 8000e2c:	801a      	strh	r2, [r3, #0]
            for (int bit = 7; bit >= 0; --bit) {
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	dae6      	bge.n	8000e08 <encode_leds_to_pwm+0x60>
        for (int c = 0; c < 3; ++c) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	dddd      	ble.n	8000e02 <encode_leds_to_pwm+0x5a>
    for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8000e46:	2213      	movs	r2, #19
 8000e48:	18bb      	adds	r3, r7, r2
 8000e4a:	18ba      	adds	r2, r7, r2
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	3201      	adds	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	2313      	movs	r3, #19
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b0b      	cmp	r3, #11
 8000e5a:	d9af      	bls.n	8000dbc <encode_leds_to_pwm+0x14>
            }
        }
    }

    // Reset-Slots füllen (Latch-Zeit)
    for (int i = 0; i < LED_RESET_SLOTS; ++i) {
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	e007      	b.n	8000e72 <encode_leds_to_pwm+0xca>
        *p++ = 0;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	1c9a      	adds	r2, r3, #2
 8000e66:	617a      	str	r2, [r7, #20]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < LED_RESET_SLOTS; ++i) {
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b31      	cmp	r3, #49	@ 0x31
 8000e76:	ddf4      	ble.n	8000e62 <encode_leds_to_pwm+0xba>
    }
}
 8000e78:	46c0      	nop			@ (mov r8, r8)
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b006      	add	sp, #24
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	2000012c 	.word	0x2000012c
 8000e88:	200003d0 	.word	0x200003d0

08000e8c <led_driver_init>:

// -----------------------------------------------------------------------------
// led_driver_init
// Initialisiert den LED-Treiber, setzt alle LEDs aus und startet die erste DMA-Übertragung.
// -----------------------------------------------------------------------------
void led_driver_init(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
    dma_busy = true;
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <led_driver_init+0x28>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
    led_driver_clear();
 8000e96:	f000 f847 	bl	8000f28 <led_driver_clear>
    encode_leds_to_pwm();
 8000e9a:	f7ff ff85 	bl	8000da8 <encode_leds_to_pwm>
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t *)pwm_buffer, sizeof(pwm_buffer) / sizeof(uint16_t));
 8000e9e:	23a9      	movs	r3, #169	@ 0xa9
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <led_driver_init+0x2c>)
 8000ea4:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <led_driver_init+0x30>)
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	f002 fa70 	bl	800338c <HAL_TIM_PWM_Start_DMA>
}
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			@ (mov r8, r8)
 8000eb4:	200003f4 	.word	0x200003f4
 8000eb8:	2000012c 	.word	0x2000012c
 8000ebc:	20000038 	.word	0x20000038

08000ec0 <led_driver_update>:
// -----------------------------------------------------------------------------
// led_driver_update
// Kodiert den aktuellen LED-Zustand in den DMA-Buffer (ohne Übertragung zu starten).
// Nach jedem Setzen von LEDs aufrufen!
// -----------------------------------------------------------------------------
void led_driver_update(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
    encode_leds_to_pwm();
 8000ec4:	f7ff ff70 	bl	8000da8 <encode_leds_to_pwm>
    led_driver_refresh(); // <-- Ergänzen!
 8000ec8:	f000 f842 	bl	8000f50 <led_driver_refresh>
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <led_driver_set_all>:

// -----------------------------------------------------------------------------
// led_driver_set_all
// Setzt alle LEDs auf die gewünschte Farbe (RGB).
// -----------------------------------------------------------------------------
void led_driver_set_all(RGB_t color) {
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	6018      	str	r0, [r3, #0]
    for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8000ede:	230f      	movs	r3, #15
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	e012      	b.n	8000f0e <led_driver_set_all+0x3a>
        led_state[i] = color;
 8000ee8:	240f      	movs	r4, #15
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	490d      	ldr	r1, [pc, #52]	@ (8000f24 <led_driver_set_all+0x50>)
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	189b      	adds	r3, r3, r2
 8000ef6:	1d3a      	adds	r2, r7, #4
 8000ef8:	18cb      	adds	r3, r1, r3
 8000efa:	0011      	movs	r1, r2
 8000efc:	2203      	movs	r2, #3
 8000efe:	0018      	movs	r0, r3
 8000f00:	f003 f9f4 	bl	80042ec <memcpy>
    for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	193a      	adds	r2, r7, r4
 8000f08:	7812      	ldrb	r2, [r2, #0]
 8000f0a:	3201      	adds	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	230f      	movs	r3, #15
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b0b      	cmp	r3, #11
 8000f16:	d9e7      	bls.n	8000ee8 <led_driver_set_all+0x14>
    }
}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b005      	add	sp, #20
 8000f20:	bd90      	pop	{r4, r7, pc}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	200003d0 	.word	0x200003d0

08000f28 <led_driver_clear>:

// -----------------------------------------------------------------------------
// led_driver_clear
// Schaltet alle LEDs aus (setzt sie auf schwarz).
// -----------------------------------------------------------------------------
void led_driver_clear(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
    RGB_t black = {0, 0, 0};
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	705a      	strb	r2, [r3, #1]
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	709a      	strb	r2, [r3, #2]
    led_driver_set_all(black);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	f7ff ffc6 	bl	8000ed4 <led_driver_set_all>
}
 8000f48:	46c0      	nop			@ (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <led_driver_refresh>:

// -----------------------------------------------------------------------------
// led_driver_refresh
// Startet die DMA-Übertragung erneut (z.B. nach led_driver_update()).
// -----------------------------------------------------------------------------
void led_driver_refresh(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    if (!dma_busy) {
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <led_driver_refresh+0x30>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4053      	eors	r3, r2
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d009      	beq.n	8000f78 <led_driver_refresh+0x28>
        dma_busy = true;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <led_driver_refresh+0x30>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
        HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t *)pwm_buffer, sizeof(pwm_buffer) / sizeof(uint16_t));
 8000f6a:	23a9      	movs	r3, #169	@ 0xa9
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <led_driver_refresh+0x34>)
 8000f70:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <led_driver_refresh+0x38>)
 8000f72:	2104      	movs	r1, #4
 8000f74:	f002 fa0a 	bl	800338c <HAL_TIM_PWM_Start_DMA>
    }
}
 8000f78:	46c0      	nop			@ (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	200003f4 	.word	0x200003f4
 8000f84:	2000012c 	.word	0x2000012c
 8000f88:	20000038 	.word	0x20000038

08000f8c <HAL_TIM_PWM_PulseFinishedCallback>:

// Wird vom HAL nach DMA-Ende aufgerufen
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
    if (htim == &htim3) {
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d102      	bne.n	8000fa2 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
        dma_busy = false;
 8000f9c:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
    }
}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	20000038 	.word	0x20000038
 8000fb0:	200003f4 	.word	0x200003f4

08000fb4 <led_effect_blink_start>:
extern uint32_t timer_tick;

static bool state = false;
static uint32_t last_toggle = 0;

void led_effect_blink_start(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    state = false;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <led_effect_blink_start+0x1c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
    last_toggle = timer_tick;
 8000fbe:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <led_effect_blink_start+0x20>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <led_effect_blink_start+0x24>)
 8000fc4:	601a      	str	r2, [r3, #0]
    led_driver_clear();
 8000fc6:	f7ff ffaf 	bl	8000f28 <led_driver_clear>
}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200003f5 	.word	0x200003f5
 8000fd4:	2000002c 	.word	0x2000002c
 8000fd8:	200003f8 	.word	0x200003f8

08000fdc <led_effect_blink_update>:

void led_effect_blink_update(uint32_t tick)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    int32_t interval = 200 + (1000 - (int32_t)effect_params.speed * 8);
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800109c <led_effect_blink_update+0xc0>)
 8000fe6:	789b      	ldrb	r3, [r3, #2]
 8000fe8:	001a      	movs	r2, r3
 8000fea:	2396      	movs	r3, #150	@ 0x96
 8000fec:	1a9b      	subs	r3, r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	617b      	str	r3, [r7, #20]
    if (interval < 30) interval = 30; // Mindestintervall
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2b1d      	cmp	r3, #29
 8000ff6:	dc01      	bgt.n	8000ffc <led_effect_blink_update+0x20>
 8000ff8:	231e      	movs	r3, #30
 8000ffa:	617b      	str	r3, [r7, #20]

    if (tick - last_toggle >= (uint32_t)interval) {
 8000ffc:	4b28      	ldr	r3, [pc, #160]	@ (80010a0 <led_effect_blink_update+0xc4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	1ad2      	subs	r2, r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	429a      	cmp	r2, r3
 8001008:	d343      	bcc.n	8001092 <led_effect_blink_update+0xb6>
        last_toggle = tick;
 800100a:	4b25      	ldr	r3, [pc, #148]	@ (80010a0 <led_effect_blink_update+0xc4>)
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	601a      	str	r2, [r3, #0]
        state = !state;
 8001010:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <led_effect_blink_update+0xc8>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	1e5a      	subs	r2, r3, #1
 8001016:	4193      	sbcs	r3, r2
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2201      	movs	r2, #1
 800101c:	4053      	eors	r3, r2
 800101e:	b2db      	uxtb	r3, r3
 8001020:	1c1a      	adds	r2, r3, #0
 8001022:	2301      	movs	r3, #1
 8001024:	4013      	ands	r3, r2
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <led_effect_blink_update+0xc8>)
 800102a:	701a      	strb	r2, [r3, #0]

        if (state) {
 800102c:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <led_effect_blink_update+0xc8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d02a      	beq.n	800108a <led_effect_blink_update+0xae>
            RGB_t color = hsv_to_rgb(effect_params.hue, 255, effect_params.brightness);
 8001034:	4b19      	ldr	r3, [pc, #100]	@ (800109c <led_effect_blink_update+0xc0>)
 8001036:	7818      	ldrb	r0, [r3, #0]
 8001038:	4b18      	ldr	r3, [pc, #96]	@ (800109c <led_effect_blink_update+0xc0>)
 800103a:	785b      	ldrb	r3, [r3, #1]
 800103c:	001a      	movs	r2, r3
 800103e:	21ff      	movs	r1, #255	@ 0xff
 8001040:	f7ff fdba 	bl	8000bb8 <hsv_to_rgb>
 8001044:	0003      	movs	r3, r0
 8001046:	001a      	movs	r2, r3
 8001048:	230c      	movs	r3, #12
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	1c11      	adds	r1, r2, #0
 800104e:	7019      	strb	r1, [r3, #0]
 8001050:	0411      	lsls	r1, r2, #16
 8001052:	0e09      	lsrs	r1, r1, #24
 8001054:	7059      	strb	r1, [r3, #1]
 8001056:	0212      	lsls	r2, r2, #8
 8001058:	0e12      	lsrs	r2, r2, #24
 800105a:	709a      	strb	r2, [r3, #2]
            for (int i = 0; i < LED_COUNT; i++) {
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	e00f      	b.n	8001082 <led_effect_blink_update+0xa6>
                led_state[i] = color;
 8001062:	4911      	ldr	r1, [pc, #68]	@ (80010a8 <led_effect_blink_update+0xcc>)
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	0013      	movs	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	189b      	adds	r3, r3, r2
 800106c:	220c      	movs	r2, #12
 800106e:	18ba      	adds	r2, r7, r2
 8001070:	18cb      	adds	r3, r1, r3
 8001072:	0011      	movs	r1, r2
 8001074:	2203      	movs	r2, #3
 8001076:	0018      	movs	r0, r3
 8001078:	f003 f938 	bl	80042ec <memcpy>
            for (int i = 0; i < LED_COUNT; i++) {
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	3301      	adds	r3, #1
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	2b0b      	cmp	r3, #11
 8001086:	ddec      	ble.n	8001062 <led_effect_blink_update+0x86>
 8001088:	e001      	b.n	800108e <led_effect_blink_update+0xb2>
            }
        } else {
            led_driver_clear();
 800108a:	f7ff ff4d 	bl	8000f28 <led_driver_clear>
        }

        led_driver_update();
 800108e:	f7ff ff17 	bl	8000ec0 <led_driver_update>
    }
}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b006      	add	sp, #24
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	2000041c 	.word	0x2000041c
 80010a0:	200003f8 	.word	0x200003f8
 80010a4:	200003f5 	.word	0x200003f5
 80010a8:	200003d0 	.word	0x200003d0

080010ac <led_effect_breathe_start>:

static uint8_t brightness = 0;
static int8_t direction = 1;
static uint32_t last_update = 0;

void led_effect_breathe_start(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
    brightness = 0;
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <led_effect_breathe_start+0x1c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
    direction = 1;
 80010b6:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <led_effect_breathe_start+0x20>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
    last_update = 0;
 80010bc:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <led_effect_breathe_start+0x24>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200003fc 	.word	0x200003fc
 80010cc:	20000004 	.word	0x20000004
 80010d0:	20000400 	.word	0x20000400

080010d4 <led_effect_breathe_update>:

void led_effect_breathe_update(uint32_t tick) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    // Geschwindigkeit: Je höher effect_params.speed, desto schneller das Atmen
    uint32_t interval = 50 - effect_params.speed; // Wertebereich ggf. anpassen
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <led_effect_breathe_update+0xbc>)
 80010de:	789b      	ldrb	r3, [r3, #2]
 80010e0:	001a      	movs	r2, r3
 80010e2:	2332      	movs	r3, #50	@ 0x32
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	613b      	str	r3, [r7, #16]

    if (tick - last_update < interval) return;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <led_effect_breathe_update+0xc0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d847      	bhi.n	8001186 <led_effect_breathe_update+0xb2>
    last_update = tick;
 80010f6:	4b27      	ldr	r3, [pc, #156]	@ (8001194 <led_effect_breathe_update+0xc0>)
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	601a      	str	r2, [r3, #0]

    // Richtung umkehren bei Max/Min
    if (brightness == 255) direction = -1;
 80010fc:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <led_effect_breathe_update+0xc4>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2bff      	cmp	r3, #255	@ 0xff
 8001102:	d102      	bne.n	800110a <led_effect_breathe_update+0x36>
 8001104:	4b25      	ldr	r3, [pc, #148]	@ (800119c <led_effect_breathe_update+0xc8>)
 8001106:	22ff      	movs	r2, #255	@ 0xff
 8001108:	701a      	strb	r2, [r3, #0]
    if (brightness == 0) direction = 1;
 800110a:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <led_effect_breathe_update+0xc4>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <led_effect_breathe_update+0x44>
 8001112:	4b22      	ldr	r3, [pc, #136]	@ (800119c <led_effect_breathe_update+0xc8>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]

    brightness += direction;
 8001118:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <led_effect_breathe_update+0xc4>)
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <led_effect_breathe_update+0xc8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b25b      	sxtb	r3, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	18d3      	adds	r3, r2, r3
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <led_effect_breathe_update+0xc4>)
 800112a:	701a      	strb	r2, [r3, #0]

    RGB_t color = hsv_to_rgb(effect_params.hue, 255, brightness);
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <led_effect_breathe_update+0xbc>)
 800112e:	7818      	ldrb	r0, [r3, #0]
 8001130:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <led_effect_breathe_update+0xc4>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	001a      	movs	r2, r3
 8001136:	21ff      	movs	r1, #255	@ 0xff
 8001138:	f7ff fd3e 	bl	8000bb8 <hsv_to_rgb>
 800113c:	0003      	movs	r3, r0
 800113e:	001a      	movs	r2, r3
 8001140:	230c      	movs	r3, #12
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	1c11      	adds	r1, r2, #0
 8001146:	7019      	strb	r1, [r3, #0]
 8001148:	0411      	lsls	r1, r2, #16
 800114a:	0e09      	lsrs	r1, r1, #24
 800114c:	7059      	strb	r1, [r3, #1]
 800114e:	0212      	lsls	r2, r2, #8
 8001150:	0e12      	lsrs	r2, r2, #24
 8001152:	709a      	strb	r2, [r3, #2]

    for (int i = 0; i < LED_COUNT; i++) {
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	e00f      	b.n	800117a <led_effect_breathe_update+0xa6>
        led_state[i] = color;
 800115a:	4911      	ldr	r1, [pc, #68]	@ (80011a0 <led_effect_breathe_update+0xcc>)
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	0013      	movs	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	189b      	adds	r3, r3, r2
 8001164:	220c      	movs	r2, #12
 8001166:	18ba      	adds	r2, r7, r2
 8001168:	18cb      	adds	r3, r1, r3
 800116a:	0011      	movs	r1, r2
 800116c:	2203      	movs	r2, #3
 800116e:	0018      	movs	r0, r3
 8001170:	f003 f8bc 	bl	80042ec <memcpy>
    for (int i = 0; i < LED_COUNT; i++) {
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2b0b      	cmp	r3, #11
 800117e:	ddec      	ble.n	800115a <led_effect_breathe_update+0x86>
    }

    led_driver_update();
 8001180:	f7ff fe9e 	bl	8000ec0 <led_driver_update>
 8001184:	e000      	b.n	8001188 <led_effect_breathe_update+0xb4>
    if (tick - last_update < interval) return;
 8001186:	46c0      	nop			@ (mov r8, r8)
}
 8001188:	46bd      	mov	sp, r7
 800118a:	b006      	add	sp, #24
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	2000041c 	.word	0x2000041c
 8001194:	20000400 	.word	0x20000400
 8001198:	200003fc 	.word	0x200003fc
 800119c:	20000004 	.word	0x20000004
 80011a0:	200003d0 	.word	0x200003d0

080011a4 <led_effect_chase_left_start>:
extern RGB_t led_state[LED_COUNT];

static uint8_t current_pos = 0;
static uint32_t last_update = 0;

void led_effect_chase_left_start(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    current_pos = 0;
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <led_effect_chase_left_start+0x18>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
    last_update = 0;
 80011ae:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <led_effect_chase_left_start+0x1c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
}
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	20000404 	.word	0x20000404
 80011c0:	20000408 	.word	0x20000408

080011c4 <led_effect_chase_left_update>:

void led_effect_chase_left_update(uint32_t tick) {
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
    // Geschwindigkeit: Je höher effect_params.speed, desto kürzer das Intervall
    uint32_t interval = 150 - effect_params.speed * 10;
 80011cc:	4b33      	ldr	r3, [pc, #204]	@ (800129c <led_effect_chase_left_update+0xd8>)
 80011ce:	789b      	ldrb	r3, [r3, #2]
 80011d0:	001a      	movs	r2, r3
 80011d2:	0013      	movs	r3, r2
 80011d4:	075b      	lsls	r3, r3, #29
 80011d6:	1a9b      	subs	r3, r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	3396      	adds	r3, #150	@ 0x96
 80011e0:	613b      	str	r3, [r7, #16]
    if (tick - last_update < interval) return;
 80011e2:	4b2f      	ldr	r3, [pc, #188]	@ (80012a0 <led_effect_chase_left_update+0xdc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d850      	bhi.n	8001292 <led_effect_chase_left_update+0xce>
    last_update = tick;
 80011f0:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <led_effect_chase_left_update+0xdc>)
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < LED_COUNT; i++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e039      	b.n	8001270 <led_effect_chase_left_update+0xac>
        led_state[i] = (i == current_pos)
 80011fc:	4b29      	ldr	r3, [pc, #164]	@ (80012a4 <led_effect_chase_left_update+0xe0>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	001a      	movs	r2, r3
            ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
            : (RGB_t){0, 0, 0};
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	4293      	cmp	r3, r2
 8001206:	d117      	bne.n	8001238 <led_effect_chase_left_update+0x74>
            ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
 8001208:	4b24      	ldr	r3, [pc, #144]	@ (800129c <led_effect_chase_left_update+0xd8>)
 800120a:	7818      	ldrb	r0, [r3, #0]
 800120c:	4b23      	ldr	r3, [pc, #140]	@ (800129c <led_effect_chase_left_update+0xd8>)
 800120e:	785a      	ldrb	r2, [r3, #1]
 8001210:	4d25      	ldr	r5, [pc, #148]	@ (80012a8 <led_effect_chase_left_update+0xe4>)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	001c      	movs	r4, r3
 8001216:	0064      	lsls	r4, r4, #1
 8001218:	18e4      	adds	r4, r4, r3
 800121a:	21ff      	movs	r1, #255	@ 0xff
 800121c:	f7ff fccc 	bl	8000bb8 <hsv_to_rgb>
 8001220:	0003      	movs	r3, r0
 8001222:	1c1a      	adds	r2, r3, #0
 8001224:	5562      	strb	r2, [r4, r5]
 8001226:	041a      	lsls	r2, r3, #16
 8001228:	0e11      	lsrs	r1, r2, #24
 800122a:	192a      	adds	r2, r5, r4
 800122c:	7051      	strb	r1, [r2, #1]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	0e1a      	lsrs	r2, r3, #24
 8001232:	192b      	adds	r3, r5, r4
 8001234:	709a      	strb	r2, [r3, #2]
 8001236:	e018      	b.n	800126a <led_effect_chase_left_update+0xa6>
        led_state[i] = (i == current_pos)
 8001238:	491b      	ldr	r1, [pc, #108]	@ (80012a8 <led_effect_chase_left_update+0xe4>)
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	0013      	movs	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	189b      	adds	r3, r3, r2
 8001242:	2200      	movs	r2, #0
 8001244:	545a      	strb	r2, [r3, r1]
 8001246:	4918      	ldr	r1, [pc, #96]	@ (80012a8 <led_effect_chase_left_update+0xe4>)
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	0013      	movs	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	189b      	adds	r3, r3, r2
 8001250:	18cb      	adds	r3, r1, r3
 8001252:	3301      	adds	r3, #1
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	4913      	ldr	r1, [pc, #76]	@ (80012a8 <led_effect_chase_left_update+0xe4>)
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	0013      	movs	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	189b      	adds	r3, r3, r2
 8001262:	18cb      	adds	r3, r1, r3
 8001264:	3302      	adds	r3, #2
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < LED_COUNT; i++) {
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b0b      	cmp	r3, #11
 8001274:	ddc2      	ble.n	80011fc <led_effect_chase_left_update+0x38>
    }

    current_pos = (current_pos + 1) % LED_COUNT;
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <led_effect_chase_left_update+0xe0>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	210c      	movs	r1, #12
 800127e:	0018      	movs	r0, r3
 8001280:	f7ff f8b0 	bl	80003e4 <__aeabi_idivmod>
 8001284:	000b      	movs	r3, r1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <led_effect_chase_left_update+0xe0>)
 800128a:	701a      	strb	r2, [r3, #0]
    led_driver_update();
 800128c:	f7ff fe18 	bl	8000ec0 <led_driver_update>
 8001290:	e000      	b.n	8001294 <led_effect_chase_left_update+0xd0>
    if (tick - last_update < interval) return;
 8001292:	46c0      	nop			@ (mov r8, r8)
}
 8001294:	46bd      	mov	sp, r7
 8001296:	b006      	add	sp, #24
 8001298:	bdb0      	pop	{r4, r5, r7, pc}
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	2000041c 	.word	0x2000041c
 80012a0:	20000408 	.word	0x20000408
 80012a4:	20000404 	.word	0x20000404
 80012a8:	200003d0 	.word	0x200003d0

080012ac <led_effect_chase_right_start>:
extern RGB_t led_state[12];

static uint8_t current_pos = 0;
static uint32_t last_update = 0;

void led_effect_chase_right_start(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
    current_pos = 11;
 80012b0:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <led_effect_chase_right_start+0x18>)
 80012b2:	220b      	movs	r2, #11
 80012b4:	701a      	strb	r2, [r3, #0]
    last_update = 0;
 80012b6:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <led_effect_chase_right_start+0x1c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
}
 80012bc:	46c0      	nop			@ (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	2000040c 	.word	0x2000040c
 80012c8:	20000410 	.word	0x20000410

080012cc <led_effect_chase_right_update>:

void led_effect_chase_right_update(uint32_t tick) {
 80012cc:	b5b0      	push	{r4, r5, r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    // Geschwindigkeit: Je höher effect_params.speed, desto kürzer das Intervall
    uint32_t interval = 150 - effect_params.speed * 10;
 80012d4:	4b33      	ldr	r3, [pc, #204]	@ (80013a4 <led_effect_chase_right_update+0xd8>)
 80012d6:	789b      	ldrb	r3, [r3, #2]
 80012d8:	001a      	movs	r2, r3
 80012da:	0013      	movs	r3, r2
 80012dc:	075b      	lsls	r3, r3, #29
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	1a9b      	subs	r3, r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	3396      	adds	r3, #150	@ 0x96
 80012e8:	613b      	str	r3, [r7, #16]
    if (tick - last_update < interval) return;
 80012ea:	4b2f      	ldr	r3, [pc, #188]	@ (80013a8 <led_effect_chase_right_update+0xdc>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d851      	bhi.n	800139c <led_effect_chase_right_update+0xd0>
    last_update = tick;
 80012f8:	4b2b      	ldr	r3, [pc, #172]	@ (80013a8 <led_effect_chase_right_update+0xdc>)
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 12; i++) {
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	e039      	b.n	8001378 <led_effect_chase_right_update+0xac>
        led_state[i] = (i == current_pos)
 8001304:	4b29      	ldr	r3, [pc, #164]	@ (80013ac <led_effect_chase_right_update+0xe0>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	001a      	movs	r2, r3
            ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
            : (RGB_t){0, 0, 0};
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	4293      	cmp	r3, r2
 800130e:	d117      	bne.n	8001340 <led_effect_chase_right_update+0x74>
            ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
 8001310:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <led_effect_chase_right_update+0xd8>)
 8001312:	7818      	ldrb	r0, [r3, #0]
 8001314:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <led_effect_chase_right_update+0xd8>)
 8001316:	785a      	ldrb	r2, [r3, #1]
 8001318:	4d25      	ldr	r5, [pc, #148]	@ (80013b0 <led_effect_chase_right_update+0xe4>)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	001c      	movs	r4, r3
 800131e:	0064      	lsls	r4, r4, #1
 8001320:	18e4      	adds	r4, r4, r3
 8001322:	21ff      	movs	r1, #255	@ 0xff
 8001324:	f7ff fc48 	bl	8000bb8 <hsv_to_rgb>
 8001328:	0003      	movs	r3, r0
 800132a:	1c1a      	adds	r2, r3, #0
 800132c:	5562      	strb	r2, [r4, r5]
 800132e:	041a      	lsls	r2, r3, #16
 8001330:	0e11      	lsrs	r1, r2, #24
 8001332:	192a      	adds	r2, r5, r4
 8001334:	7051      	strb	r1, [r2, #1]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	0e1a      	lsrs	r2, r3, #24
 800133a:	192b      	adds	r3, r5, r4
 800133c:	709a      	strb	r2, [r3, #2]
 800133e:	e018      	b.n	8001372 <led_effect_chase_right_update+0xa6>
        led_state[i] = (i == current_pos)
 8001340:	491b      	ldr	r1, [pc, #108]	@ (80013b0 <led_effect_chase_right_update+0xe4>)
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	0013      	movs	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	189b      	adds	r3, r3, r2
 800134a:	2200      	movs	r2, #0
 800134c:	545a      	strb	r2, [r3, r1]
 800134e:	4918      	ldr	r1, [pc, #96]	@ (80013b0 <led_effect_chase_right_update+0xe4>)
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	0013      	movs	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	189b      	adds	r3, r3, r2
 8001358:	18cb      	adds	r3, r1, r3
 800135a:	3301      	adds	r3, #1
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
 8001360:	4913      	ldr	r1, [pc, #76]	@ (80013b0 <led_effect_chase_right_update+0xe4>)
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	0013      	movs	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	189b      	adds	r3, r3, r2
 800136a:	18cb      	adds	r3, r1, r3
 800136c:	3302      	adds	r3, #2
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 12; i++) {
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	2b0b      	cmp	r3, #11
 800137c:	ddc2      	ble.n	8001304 <led_effect_chase_right_update+0x38>
    }

    current_pos = (current_pos == 0) ? 11 : current_pos - 1;
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <led_effect_chase_right_update+0xe0>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d004      	beq.n	8001390 <led_effect_chase_right_update+0xc4>
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <led_effect_chase_right_update+0xe0>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	3b01      	subs	r3, #1
 800138c:	b2da      	uxtb	r2, r3
 800138e:	e000      	b.n	8001392 <led_effect_chase_right_update+0xc6>
 8001390:	220b      	movs	r2, #11
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <led_effect_chase_right_update+0xe0>)
 8001394:	701a      	strb	r2, [r3, #0]
    led_driver_update();
 8001396:	f7ff fd93 	bl	8000ec0 <led_driver_update>
 800139a:	e000      	b.n	800139e <led_effect_chase_right_update+0xd2>
    if (tick - last_update < interval) return;
 800139c:	46c0      	nop			@ (mov r8, r8)
}
 800139e:	46bd      	mov	sp, r7
 80013a0:	b006      	add	sp, #24
 80013a2:	bdb0      	pop	{r4, r5, r7, pc}
 80013a4:	2000041c 	.word	0x2000041c
 80013a8:	20000410 	.word	0x20000410
 80013ac:	2000040c 	.word	0x2000040c
 80013b0:	200003d0 	.word	0x200003d0

080013b4 <led_effect_config_mode_start>:

static uint32_t last_update = 0;
static uint8_t active_led = 0;
static uint8_t on = 0;

void led_effect_config_mode_start(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
    active_led = 0;
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <led_effect_config_mode_start+0x1c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
    last_update = 0;
 80013be:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <led_effect_config_mode_start+0x20>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
    on = 1;
 80013c4:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <led_effect_config_mode_start+0x24>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000418 	.word	0x20000418
 80013d4:	20000414 	.word	0x20000414
 80013d8:	20000419 	.word	0x20000419

080013dc <led_effect_config_mode_update>:

void led_effect_config_mode_update(uint32_t tick) {
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    if (tick - last_update < (200 - effect_params.speed * 10)) return;
 80013e4:	4b37      	ldr	r3, [pc, #220]	@ (80014c4 <led_effect_config_mode_update+0xe8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	1ad1      	subs	r1, r2, r3
 80013ec:	4b36      	ldr	r3, [pc, #216]	@ (80014c8 <led_effect_config_mode_update+0xec>)
 80013ee:	789b      	ldrb	r3, [r3, #2]
 80013f0:	001a      	movs	r2, r3
 80013f2:	0013      	movs	r3, r2
 80013f4:	075b      	lsls	r3, r3, #29
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	1a9b      	subs	r3, r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	33c8      	adds	r3, #200	@ 0xc8
 8001400:	4299      	cmp	r1, r3
 8001402:	d35b      	bcc.n	80014bc <led_effect_config_mode_update+0xe0>
    last_update = tick;
 8001404:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <led_effect_config_mode_update+0xe8>)
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]

    on ^= 1;  // toggle LEDs an/aus
 800140a:	4b30      	ldr	r3, [pc, #192]	@ (80014cc <led_effect_config_mode_update+0xf0>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2201      	movs	r2, #1
 8001410:	4053      	eors	r3, r2
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b2d      	ldr	r3, [pc, #180]	@ (80014cc <led_effect_config_mode_update+0xf0>)
 8001416:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < LED_COUNT; i++) {
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	e03d      	b.n	800149a <led_effect_config_mode_update+0xbe>
        if (i == active_led && on) {
 800141e:	4b2c      	ldr	r3, [pc, #176]	@ (80014d0 <led_effect_config_mode_update+0xf4>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	001a      	movs	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4293      	cmp	r3, r2
 8001428:	d11b      	bne.n	8001462 <led_effect_config_mode_update+0x86>
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <led_effect_config_mode_update+0xf0>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d017      	beq.n	8001462 <led_effect_config_mode_update+0x86>
            led_state[i] = hsv_to_rgb(effect_params.hue, 255, effect_params.brightness);
 8001432:	4b25      	ldr	r3, [pc, #148]	@ (80014c8 <led_effect_config_mode_update+0xec>)
 8001434:	7818      	ldrb	r0, [r3, #0]
 8001436:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <led_effect_config_mode_update+0xec>)
 8001438:	785a      	ldrb	r2, [r3, #1]
 800143a:	4d26      	ldr	r5, [pc, #152]	@ (80014d4 <led_effect_config_mode_update+0xf8>)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	001c      	movs	r4, r3
 8001440:	0064      	lsls	r4, r4, #1
 8001442:	18e4      	adds	r4, r4, r3
 8001444:	21ff      	movs	r1, #255	@ 0xff
 8001446:	f7ff fbb7 	bl	8000bb8 <hsv_to_rgb>
 800144a:	0003      	movs	r3, r0
 800144c:	1c1a      	adds	r2, r3, #0
 800144e:	5562      	strb	r2, [r4, r5]
 8001450:	041a      	lsls	r2, r3, #16
 8001452:	0e11      	lsrs	r1, r2, #24
 8001454:	192a      	adds	r2, r5, r4
 8001456:	7051      	strb	r1, [r2, #1]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	0e1a      	lsrs	r2, r3, #24
 800145c:	192b      	adds	r3, r5, r4
 800145e:	709a      	strb	r2, [r3, #2]
 8001460:	e018      	b.n	8001494 <led_effect_config_mode_update+0xb8>
        } else {
            led_state[i].r = 0;
 8001462:	491c      	ldr	r1, [pc, #112]	@ (80014d4 <led_effect_config_mode_update+0xf8>)
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	0013      	movs	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	189b      	adds	r3, r3, r2
 800146c:	2200      	movs	r2, #0
 800146e:	545a      	strb	r2, [r3, r1]
            led_state[i].g = 0;
 8001470:	4918      	ldr	r1, [pc, #96]	@ (80014d4 <led_effect_config_mode_update+0xf8>)
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	0013      	movs	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	189b      	adds	r3, r3, r2
 800147a:	18cb      	adds	r3, r1, r3
 800147c:	3301      	adds	r3, #1
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
            led_state[i].b = 0;
 8001482:	4914      	ldr	r1, [pc, #80]	@ (80014d4 <led_effect_config_mode_update+0xf8>)
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	0013      	movs	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	189b      	adds	r3, r3, r2
 800148c:	18cb      	adds	r3, r1, r3
 800148e:	3302      	adds	r3, #2
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < LED_COUNT; i++) {
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2b0b      	cmp	r3, #11
 800149e:	ddbe      	ble.n	800141e <led_effect_config_mode_update+0x42>
        }
    }

    active_led = (active_led + 1) % LED_COUNT;
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <led_effect_config_mode_update+0xf4>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	210c      	movs	r1, #12
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7fe ff9b 	bl	80003e4 <__aeabi_idivmod>
 80014ae:	000b      	movs	r3, r1
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <led_effect_config_mode_update+0xf4>)
 80014b4:	701a      	strb	r2, [r3, #0]

    led_driver_update();
 80014b6:	f7ff fd03 	bl	8000ec0 <led_driver_update>
 80014ba:	e000      	b.n	80014be <led_effect_config_mode_update+0xe2>
    if (tick - last_update < (200 - effect_params.speed * 10)) return;
 80014bc:	46c0      	nop			@ (mov r8, r8)
}
 80014be:	46bd      	mov	sp, r7
 80014c0:	b004      	add	sp, #16
 80014c2:	bdb0      	pop	{r4, r5, r7, pc}
 80014c4:	20000414 	.word	0x20000414
 80014c8:	2000041c 	.word	0x2000041c
 80014cc:	20000419 	.word	0x20000419
 80014d0:	20000418 	.word	0x20000418
 80014d4:	200003d0 	.word	0x200003d0

080014d8 <led_effect_engine_init>:
led_effect_id_t current_effect = LED_EFFECT_NONE;

// KORREKTUR: Globale Definition von effect_params_t effect_params hinzufügen
effect_params_t effect_params;

void led_effect_engine_init(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
    current_effect = LED_EFFECT_NONE;
 80014dc:	4b02      	ldr	r3, [pc, #8]	@ (80014e8 <led_effect_engine_init+0x10>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2000041a 	.word	0x2000041a

080014ec <led_effect_engine_set>:

void led_effect_engine_set(led_effect_id_t effect) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	0002      	movs	r2, r0
 80014f4:	1dfb      	adds	r3, r7, #7
 80014f6:	701a      	strb	r2, [r3, #0]
    current_effect = effect;
 80014f8:	4b14      	ldr	r3, [pc, #80]	@ (800154c <led_effect_engine_set+0x60>)
 80014fa:	1dfa      	adds	r2, r7, #7
 80014fc:	7812      	ldrb	r2, [r2, #0]
 80014fe:	701a      	strb	r2, [r3, #0]
    switch (effect) {
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b08      	cmp	r3, #8
 8001506:	d81c      	bhi.n	8001542 <led_effect_engine_set+0x56>
 8001508:	009a      	lsls	r2, r3, #2
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <led_effect_engine_set+0x64>)
 800150c:	18d3      	adds	r3, r2, r3
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	469f      	mov	pc, r3
        case LED_EFFECT_SOLID:
            led_effect_solid_start();
 8001512:	f000 f96b 	bl	80017ec <led_effect_solid_start>
            break;
 8001516:	e015      	b.n	8001544 <led_effect_engine_set+0x58>
        case LED_EFFECT_BLINK:
            led_effect_blink_start();
 8001518:	f7ff fd4c 	bl	8000fb4 <led_effect_blink_start>
            break;
 800151c:	e012      	b.n	8001544 <led_effect_engine_set+0x58>
        case LED_EFFECT_BREATHE:
            led_effect_breathe_start();
 800151e:	f7ff fdc5 	bl	80010ac <led_effect_breathe_start>
            break;
 8001522:	e00f      	b.n	8001544 <led_effect_engine_set+0x58>
        case LED_EFFECT_FLASH_ALT:
            led_effect_flash_alt_start();
 8001524:	f000 f854 	bl	80015d0 <led_effect_flash_alt_start>
            break;
 8001528:	e00c      	b.n	8001544 <led_effect_engine_set+0x58>
        case LED_EFFECT_CHASE_LEFT:
            led_effect_chase_left_start();
 800152a:	f7ff fe3b 	bl	80011a4 <led_effect_chase_left_start>
            break;
 800152e:	e009      	b.n	8001544 <led_effect_engine_set+0x58>
        case LED_EFFECT_CHASE_RIGHT:
            led_effect_chase_right_start();
 8001530:	f7ff febc 	bl	80012ac <led_effect_chase_right_start>
            break;
 8001534:	e006      	b.n	8001544 <led_effect_engine_set+0x58>
        case LED_EFFECT_CONFIG_MODE:
            led_effect_config_mode_start();
 8001536:	f7ff ff3d 	bl	80013b4 <led_effect_config_mode_start>
            break;
 800153a:	e003      	b.n	8001544 <led_effect_engine_set+0x58>
        case LED_EFFECT_SINGLE_LED:
            led_effect_single_led_start();
 800153c:	f000 f8d6 	bl	80016ec <led_effect_single_led_start>
            break;
 8001540:	e000      	b.n	8001544 <led_effect_engine_set+0x58>
        default:
            break;
 8001542:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001544:	46c0      	nop			@ (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	b002      	add	sp, #8
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000041a 	.word	0x2000041a
 8001550:	0800438c 	.word	0x0800438c

08001554 <led_effect_engine_update>:

void led_effect_engine_update(uint32_t tick) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    switch (current_effect) {
 800155c:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <led_effect_engine_update+0x74>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b08      	cmp	r3, #8
 8001562:	d82c      	bhi.n	80015be <led_effect_engine_update+0x6a>
 8001564:	009a      	lsls	r2, r3, #2
 8001566:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <led_effect_engine_update+0x78>)
 8001568:	18d3      	adds	r3, r2, r3
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	469f      	mov	pc, r3
        case LED_EFFECT_SOLID:
            led_effect_solid_update(tick);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	0018      	movs	r0, r3
 8001572:	f000 f97d 	bl	8001870 <led_effect_solid_update>
            break;
 8001576:	e023      	b.n	80015c0 <led_effect_engine_update+0x6c>
        case LED_EFFECT_BLINK:
            led_effect_blink_update(tick);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff fd2e 	bl	8000fdc <led_effect_blink_update>
            break;
 8001580:	e01e      	b.n	80015c0 <led_effect_engine_update+0x6c>
        case LED_EFFECT_BREATHE:
            led_effect_breathe_update(tick);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff fda5 	bl	80010d4 <led_effect_breathe_update>
            break;
 800158a:	e019      	b.n	80015c0 <led_effect_engine_update+0x6c>
        case LED_EFFECT_FLASH_ALT:
            led_effect_flash_alt_update(tick);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	0018      	movs	r0, r3
 8001590:	f000 f82e 	bl	80015f0 <led_effect_flash_alt_update>
            break;
 8001594:	e014      	b.n	80015c0 <led_effect_engine_update+0x6c>
        case LED_EFFECT_CHASE_LEFT:
            led_effect_chase_left_update(tick);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	0018      	movs	r0, r3
 800159a:	f7ff fe13 	bl	80011c4 <led_effect_chase_left_update>
            break;
 800159e:	e00f      	b.n	80015c0 <led_effect_engine_update+0x6c>
        case LED_EFFECT_CHASE_RIGHT:
            led_effect_chase_right_update(tick);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	0018      	movs	r0, r3
 80015a4:	f7ff fe92 	bl	80012cc <led_effect_chase_right_update>
            break;
 80015a8:	e00a      	b.n	80015c0 <led_effect_engine_update+0x6c>
        case LED_EFFECT_CONFIG_MODE:
            led_effect_config_mode_update(tick);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff ff15 	bl	80013dc <led_effect_config_mode_update>
            break;
 80015b2:	e005      	b.n	80015c0 <led_effect_engine_update+0x6c>
        case LED_EFFECT_SINGLE_LED:
            led_effect_single_led_update(tick);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 f8a8 	bl	800170c <led_effect_single_led_update>
            break;
 80015bc:	e000      	b.n	80015c0 <led_effect_engine_update+0x6c>
        default:
            break;
 80015be:	46c0      	nop			@ (mov r8, r8)
    }
}
 80015c0:	46c0      	nop			@ (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b002      	add	sp, #8
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000041a 	.word	0x2000041a
 80015cc:	080043b0 	.word	0x080043b0

080015d0 <led_effect_flash_alt_start>:
extern effect_params_t effect_params;

static uint8_t flash_on = 0;
static uint32_t last_update = 0;

void led_effect_flash_alt_start(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
    flash_on = 0;
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <led_effect_flash_alt_start+0x18>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
    last_update = 0;
 80015da:	4b04      	ldr	r3, [pc, #16]	@ (80015ec <led_effect_flash_alt_start+0x1c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	20000420 	.word	0x20000420
 80015ec:	20000424 	.word	0x20000424

080015f0 <led_effect_flash_alt_update>:

void led_effect_flash_alt_update(uint32_t tick) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
    if (tick - last_update < (300 - effect_params.speed * 20)) return;
 80015f8:	4b36      	ldr	r3, [pc, #216]	@ (80016d4 <led_effect_flash_alt_update+0xe4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	1ad1      	subs	r1, r2, r3
 8001600:	4b35      	ldr	r3, [pc, #212]	@ (80016d8 <led_effect_flash_alt_update+0xe8>)
 8001602:	789b      	ldrb	r3, [r3, #2]
 8001604:	001a      	movs	r2, r3
 8001606:	0013      	movs	r3, r2
 8001608:	071b      	lsls	r3, r3, #28
 800160a:	1a9b      	subs	r3, r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	332d      	adds	r3, #45	@ 0x2d
 8001614:	33ff      	adds	r3, #255	@ 0xff
 8001616:	4299      	cmp	r1, r3
 8001618:	d358      	bcc.n	80016cc <led_effect_flash_alt_update+0xdc>
    last_update = tick;
 800161a:	4b2e      	ldr	r3, [pc, #184]	@ (80016d4 <led_effect_flash_alt_update+0xe4>)
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	601a      	str	r2, [r3, #0]

    flash_on ^= 1;
 8001620:	4b2e      	ldr	r3, [pc, #184]	@ (80016dc <led_effect_flash_alt_update+0xec>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2201      	movs	r2, #1
 8001626:	4053      	eors	r3, r2
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b2c      	ldr	r3, [pc, #176]	@ (80016dc <led_effect_flash_alt_update+0xec>)
 800162c:	701a      	strb	r2, [r3, #0]

    RGB_t color = flash_on
        ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
 800162e:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <led_effect_flash_alt_update+0xec>)
 8001630:	781b      	ldrb	r3, [r3, #0]
        : hsv_to_rgb((effect_params.hue + 128) % 256, 255, effect_params.brightness); // Kontrastfarbe
 8001632:	2b00      	cmp	r3, #0
 8001634:	d014      	beq.n	8001660 <led_effect_flash_alt_update+0x70>
        ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
 8001636:	4b28      	ldr	r3, [pc, #160]	@ (80016d8 <led_effect_flash_alt_update+0xe8>)
 8001638:	7818      	ldrb	r0, [r3, #0]
 800163a:	4b27      	ldr	r3, [pc, #156]	@ (80016d8 <led_effect_flash_alt_update+0xe8>)
 800163c:	785b      	ldrb	r3, [r3, #1]
 800163e:	001a      	movs	r2, r3
 8001640:	21ff      	movs	r1, #255	@ 0xff
 8001642:	f7ff fab9 	bl	8000bb8 <hsv_to_rgb>
 8001646:	0003      	movs	r3, r0
 8001648:	001a      	movs	r2, r3
 800164a:	2308      	movs	r3, #8
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	1c11      	adds	r1, r2, #0
 8001650:	7019      	strb	r1, [r3, #0]
 8001652:	0411      	lsls	r1, r2, #16
 8001654:	0e09      	lsrs	r1, r1, #24
 8001656:	7059      	strb	r1, [r3, #1]
 8001658:	0212      	lsls	r2, r2, #8
 800165a:	0e12      	lsrs	r2, r2, #24
 800165c:	709a      	strb	r2, [r3, #2]
 800165e:	e01c      	b.n	800169a <led_effect_flash_alt_update+0xaa>
        : hsv_to_rgb((effect_params.hue + 128) % 256, 255, effect_params.brightness); // Kontrastfarbe
 8001660:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <led_effect_flash_alt_update+0xe8>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	3380      	adds	r3, #128	@ 0x80
 8001666:	4a1e      	ldr	r2, [pc, #120]	@ (80016e0 <led_effect_flash_alt_update+0xf0>)
 8001668:	4013      	ands	r3, r2
 800166a:	d503      	bpl.n	8001674 <led_effect_flash_alt_update+0x84>
 800166c:	3b01      	subs	r3, #1
 800166e:	4a1d      	ldr	r2, [pc, #116]	@ (80016e4 <led_effect_flash_alt_update+0xf4>)
 8001670:	4313      	orrs	r3, r2
 8001672:	3301      	adds	r3, #1
 8001674:	b2d8      	uxtb	r0, r3
 8001676:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <led_effect_flash_alt_update+0xe8>)
 8001678:	785b      	ldrb	r3, [r3, #1]
 800167a:	001a      	movs	r2, r3
 800167c:	21ff      	movs	r1, #255	@ 0xff
 800167e:	f7ff fa9b 	bl	8000bb8 <hsv_to_rgb>
 8001682:	0003      	movs	r3, r0
 8001684:	001a      	movs	r2, r3
 8001686:	2308      	movs	r3, #8
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	1c11      	adds	r1, r2, #0
 800168c:	7019      	strb	r1, [r3, #0]
 800168e:	0411      	lsls	r1, r2, #16
 8001690:	0e09      	lsrs	r1, r1, #24
 8001692:	7059      	strb	r1, [r3, #1]
 8001694:	0212      	lsls	r2, r2, #8
 8001696:	0e12      	lsrs	r2, r2, #24
 8001698:	709a      	strb	r2, [r3, #2]

    for (int i = 0; i < LED_COUNT; i++) {
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	e00f      	b.n	80016c0 <led_effect_flash_alt_update+0xd0>
        led_state[i] = color;
 80016a0:	4911      	ldr	r1, [pc, #68]	@ (80016e8 <led_effect_flash_alt_update+0xf8>)
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	0013      	movs	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	189b      	adds	r3, r3, r2
 80016aa:	2208      	movs	r2, #8
 80016ac:	18ba      	adds	r2, r7, r2
 80016ae:	18cb      	adds	r3, r1, r3
 80016b0:	0011      	movs	r1, r2
 80016b2:	2203      	movs	r2, #3
 80016b4:	0018      	movs	r0, r3
 80016b6:	f002 fe19 	bl	80042ec <memcpy>
    for (int i = 0; i < LED_COUNT; i++) {
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3301      	adds	r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b0b      	cmp	r3, #11
 80016c4:	ddec      	ble.n	80016a0 <led_effect_flash_alt_update+0xb0>
    }

    led_driver_update();
 80016c6:	f7ff fbfb 	bl	8000ec0 <led_driver_update>
 80016ca:	e000      	b.n	80016ce <led_effect_flash_alt_update+0xde>
    if (tick - last_update < (300 - effect_params.speed * 20)) return;
 80016cc:	46c0      	nop			@ (mov r8, r8)
}
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b004      	add	sp, #16
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000424 	.word	0x20000424
 80016d8:	2000041c 	.word	0x2000041c
 80016dc:	20000420 	.word	0x20000420
 80016e0:	800000ff 	.word	0x800000ff
 80016e4:	ffffff00 	.word	0xffffff00
 80016e8:	200003d0 	.word	0x200003d0

080016ec <led_effect_single_led_start>:
extern effect_params_t effect_params;

static uint32_t last_update = 0;
static uint8_t led_on = 0;

void led_effect_single_led_start(void) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
    last_update = 0;
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <led_effect_single_led_start+0x18>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
    led_on = 1;
 80016f6:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <led_effect_single_led_start+0x1c>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
}
 80016fc:	46c0      	nop			@ (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			@ (mov r8, r8)
 8001704:	20000428 	.word	0x20000428
 8001708:	2000042c 	.word	0x2000042c

0800170c <led_effect_single_led_update>:

void led_effect_single_led_update(uint32_t tick) {
 800170c:	b5b0      	push	{r4, r5, r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
    if (tick - last_update < (500 - effect_params.speed * 20)) return;
 8001714:	4b31      	ldr	r3, [pc, #196]	@ (80017dc <led_effect_single_led_update+0xd0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	1ad1      	subs	r1, r2, r3
 800171c:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <led_effect_single_led_update+0xd4>)
 800171e:	789b      	ldrb	r3, [r3, #2]
 8001720:	001a      	movs	r2, r3
 8001722:	0013      	movs	r3, r2
 8001724:	071b      	lsls	r3, r3, #28
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	33f5      	adds	r3, #245	@ 0xf5
 8001730:	33ff      	adds	r3, #255	@ 0xff
 8001732:	4299      	cmp	r1, r3
 8001734:	d34d      	bcc.n	80017d2 <led_effect_single_led_update+0xc6>
    last_update = tick;
 8001736:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <led_effect_single_led_update+0xd0>)
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	601a      	str	r2, [r3, #0]
    led_on ^= 1;
 800173c:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <led_effect_single_led_update+0xd8>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	4053      	eors	r3, r2
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <led_effect_single_led_update+0xd8>)
 8001748:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < LED_COUNT; i++) {
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	e03a      	b.n	80017c6 <led_effect_single_led_update+0xba>
        if (i == 0 && led_on) {
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d11b      	bne.n	800178e <led_effect_single_led_update+0x82>
 8001756:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <led_effect_single_led_update+0xd8>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d017      	beq.n	800178e <led_effect_single_led_update+0x82>
            led_state[i] = hsv_to_rgb(effect_params.hue, 255, effect_params.brightness);
 800175e:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <led_effect_single_led_update+0xd4>)
 8001760:	7818      	ldrb	r0, [r3, #0]
 8001762:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <led_effect_single_led_update+0xd4>)
 8001764:	785a      	ldrb	r2, [r3, #1]
 8001766:	4d20      	ldr	r5, [pc, #128]	@ (80017e8 <led_effect_single_led_update+0xdc>)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	001c      	movs	r4, r3
 800176c:	0064      	lsls	r4, r4, #1
 800176e:	18e4      	adds	r4, r4, r3
 8001770:	21ff      	movs	r1, #255	@ 0xff
 8001772:	f7ff fa21 	bl	8000bb8 <hsv_to_rgb>
 8001776:	0003      	movs	r3, r0
 8001778:	1c1a      	adds	r2, r3, #0
 800177a:	5562      	strb	r2, [r4, r5]
 800177c:	041a      	lsls	r2, r3, #16
 800177e:	0e11      	lsrs	r1, r2, #24
 8001780:	192a      	adds	r2, r5, r4
 8001782:	7051      	strb	r1, [r2, #1]
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	0e1a      	lsrs	r2, r3, #24
 8001788:	192b      	adds	r3, r5, r4
 800178a:	709a      	strb	r2, [r3, #2]
 800178c:	e018      	b.n	80017c0 <led_effect_single_led_update+0xb4>
        } else {
            led_state[i].r = 0;
 800178e:	4916      	ldr	r1, [pc, #88]	@ (80017e8 <led_effect_single_led_update+0xdc>)
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	0013      	movs	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	189b      	adds	r3, r3, r2
 8001798:	2200      	movs	r2, #0
 800179a:	545a      	strb	r2, [r3, r1]
            led_state[i].g = 0;
 800179c:	4912      	ldr	r1, [pc, #72]	@ (80017e8 <led_effect_single_led_update+0xdc>)
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	0013      	movs	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	189b      	adds	r3, r3, r2
 80017a6:	18cb      	adds	r3, r1, r3
 80017a8:	3301      	adds	r3, #1
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
            led_state[i].b = 0;
 80017ae:	490e      	ldr	r1, [pc, #56]	@ (80017e8 <led_effect_single_led_update+0xdc>)
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	0013      	movs	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	189b      	adds	r3, r3, r2
 80017b8:	18cb      	adds	r3, r1, r3
 80017ba:	3302      	adds	r3, #2
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < LED_COUNT; i++) {
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b0b      	cmp	r3, #11
 80017ca:	ddc1      	ble.n	8001750 <led_effect_single_led_update+0x44>
        }
    }

    led_driver_update();
 80017cc:	f7ff fb78 	bl	8000ec0 <led_driver_update>
 80017d0:	e000      	b.n	80017d4 <led_effect_single_led_update+0xc8>
    if (tick - last_update < (500 - effect_params.speed * 20)) return;
 80017d2:	46c0      	nop			@ (mov r8, r8)
}
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b004      	add	sp, #16
 80017d8:	bdb0      	pop	{r4, r5, r7, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	20000428 	.word	0x20000428
 80017e0:	2000041c 	.word	0x2000041c
 80017e4:	2000042c 	.word	0x2000042c
 80017e8:	200003d0 	.word	0x200003d0

080017ec <led_effect_solid_start>:
extern effect_params_t effect_params;

static uint8_t prev_hue = 255;
static uint8_t prev_brightness = 255;

void led_effect_solid_start(void) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
    RGB_t color = hsv_to_rgb(effect_params.hue, 255, effect_params.brightness);
 80017f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <led_effect_solid_start+0x74>)
 80017f4:	7818      	ldrb	r0, [r3, #0]
 80017f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <led_effect_solid_start+0x74>)
 80017f8:	785b      	ldrb	r3, [r3, #1]
 80017fa:	001a      	movs	r2, r3
 80017fc:	21ff      	movs	r1, #255	@ 0xff
 80017fe:	f7ff f9db 	bl	8000bb8 <hsv_to_rgb>
 8001802:	0003      	movs	r3, r0
 8001804:	001a      	movs	r2, r3
 8001806:	003b      	movs	r3, r7
 8001808:	1c11      	adds	r1, r2, #0
 800180a:	7019      	strb	r1, [r3, #0]
 800180c:	0411      	lsls	r1, r2, #16
 800180e:	0e09      	lsrs	r1, r1, #24
 8001810:	7059      	strb	r1, [r3, #1]
 8001812:	0212      	lsls	r2, r2, #8
 8001814:	0e12      	lsrs	r2, r2, #24
 8001816:	709a      	strb	r2, [r3, #2]
    for (int i = 0; i < LED_COUNT; i++) {
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	e00e      	b.n	800183c <led_effect_solid_start+0x50>
        led_state[i] = color;
 800181e:	4911      	ldr	r1, [pc, #68]	@ (8001864 <led_effect_solid_start+0x78>)
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	0013      	movs	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	189b      	adds	r3, r3, r2
 8001828:	003a      	movs	r2, r7
 800182a:	18cb      	adds	r3, r1, r3
 800182c:	0011      	movs	r1, r2
 800182e:	2203      	movs	r2, #3
 8001830:	0018      	movs	r0, r3
 8001832:	f002 fd5b 	bl	80042ec <memcpy>
    for (int i = 0; i < LED_COUNT; i++) {
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3301      	adds	r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b0b      	cmp	r3, #11
 8001840:	dded      	ble.n	800181e <led_effect_solid_start+0x32>
    }
    led_driver_update(); // <-- Erzwingt sofortiges Setzen der LEDs!
 8001842:	f7ff fb3d 	bl	8000ec0 <led_driver_update>
    prev_hue = effect_params.hue;
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <led_effect_solid_start+0x74>)
 8001848:	781a      	ldrb	r2, [r3, #0]
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <led_effect_solid_start+0x7c>)
 800184c:	701a      	strb	r2, [r3, #0]
    prev_brightness = effect_params.brightness;
 800184e:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <led_effect_solid_start+0x74>)
 8001850:	785a      	ldrb	r2, [r3, #1]
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <led_effect_solid_start+0x80>)
 8001854:	701a      	strb	r2, [r3, #0]
}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			@ (mov r8, r8)
 8001860:	2000041c 	.word	0x2000041c
 8001864:	200003d0 	.word	0x200003d0
 8001868:	20000005 	.word	0x20000005
 800186c:	20000006 	.word	0x20000006

08001870 <led_effect_solid_update>:

void led_effect_solid_update(uint32_t tick) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
    (void)tick;

    if (effect_params.hue != prev_hue || effect_params.brightness != prev_brightness) {
 8001878:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <led_effect_solid_update+0x90>)
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	4b21      	ldr	r3, [pc, #132]	@ (8001904 <led_effect_solid_update+0x94>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d105      	bne.n	8001890 <led_effect_solid_update+0x20>
 8001884:	4b1e      	ldr	r3, [pc, #120]	@ (8001900 <led_effect_solid_update+0x90>)
 8001886:	785a      	ldrb	r2, [r3, #1]
 8001888:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <led_effect_solid_update+0x98>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d033      	beq.n	80018f8 <led_effect_solid_update+0x88>
        RGB_t color = hsv_to_rgb(effect_params.hue, 255, effect_params.brightness);
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <led_effect_solid_update+0x90>)
 8001892:	7818      	ldrb	r0, [r3, #0]
 8001894:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <led_effect_solid_update+0x90>)
 8001896:	785b      	ldrb	r3, [r3, #1]
 8001898:	001a      	movs	r2, r3
 800189a:	21ff      	movs	r1, #255	@ 0xff
 800189c:	f7ff f98c 	bl	8000bb8 <hsv_to_rgb>
 80018a0:	0003      	movs	r3, r0
 80018a2:	001a      	movs	r2, r3
 80018a4:	2308      	movs	r3, #8
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	1c11      	adds	r1, r2, #0
 80018aa:	7019      	strb	r1, [r3, #0]
 80018ac:	0411      	lsls	r1, r2, #16
 80018ae:	0e09      	lsrs	r1, r1, #24
 80018b0:	7059      	strb	r1, [r3, #1]
 80018b2:	0212      	lsls	r2, r2, #8
 80018b4:	0e12      	lsrs	r2, r2, #24
 80018b6:	709a      	strb	r2, [r3, #2]
        for (int i = 0; i < LED_COUNT; i++) {
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e00f      	b.n	80018de <led_effect_solid_update+0x6e>
            led_state[i] = color;
 80018be:	4913      	ldr	r1, [pc, #76]	@ (800190c <led_effect_solid_update+0x9c>)
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	0013      	movs	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	189b      	adds	r3, r3, r2
 80018c8:	2208      	movs	r2, #8
 80018ca:	18ba      	adds	r2, r7, r2
 80018cc:	18cb      	adds	r3, r1, r3
 80018ce:	0011      	movs	r1, r2
 80018d0:	2203      	movs	r2, #3
 80018d2:	0018      	movs	r0, r3
 80018d4:	f002 fd0a 	bl	80042ec <memcpy>
        for (int i = 0; i < LED_COUNT; i++) {
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3301      	adds	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b0b      	cmp	r3, #11
 80018e2:	ddec      	ble.n	80018be <led_effect_solid_update+0x4e>
        }
        led_driver_update();
 80018e4:	f7ff faec 	bl	8000ec0 <led_driver_update>
        prev_hue = effect_params.hue;
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <led_effect_solid_update+0x90>)
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <led_effect_solid_update+0x94>)
 80018ee:	701a      	strb	r2, [r3, #0]
        prev_brightness = effect_params.brightness;
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <led_effect_solid_update+0x90>)
 80018f2:	785a      	ldrb	r2, [r3, #1]
 80018f4:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <led_effect_solid_update+0x98>)
 80018f6:	701a      	strb	r2, [r3, #0]
    }
}
 80018f8:	46c0      	nop			@ (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b004      	add	sp, #16
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2000041c 	.word	0x2000041c
 8001904:	20000005 	.word	0x20000005
 8001908:	20000006 	.word	0x20000006
 800190c:	200003d0 	.word	0x200003d0

08001910 <piezo_init>:
#include "tim.h"      // Nutzung von TIM14 (PA4)
#include "main.h"

static uint32_t beep_end_time = 0;

void piezo_init(void) {
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <piezo_init+0x1c>)
 8001916:	2100      	movs	r1, #0
 8001918:	0018      	movs	r0, r3
 800191a:	f001 fc59 	bl	80031d0 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 0);
 800191e:	4b03      	ldr	r3, [pc, #12]	@ (800192c <piezo_init+0x1c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2200      	movs	r2, #0
 8001924:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000084 	.word	0x20000084

08001930 <piezo_beep>:

void piezo_beep(uint16_t freq_hz, uint16_t duration_ms) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	0002      	movs	r2, r0
 8001938:	1dbb      	adds	r3, r7, #6
 800193a:	801a      	strh	r2, [r3, #0]
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	1c0a      	adds	r2, r1, #0
 8001940:	801a      	strh	r2, [r3, #0]
    uint32_t timer_clock = HAL_RCC_GetPCLK1Freq(); // z.B. 64 MHz
 8001942:	f001 fb7f 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8001946:	0003      	movs	r3, r0
 8001948:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = 1;
 800194a:	2301      	movs	r3, #1
 800194c:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / freq_hz) - 1;
 800194e:	1dbb      	adds	r3, r7, #6
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	0019      	movs	r1, r3
 8001954:	6978      	ldr	r0, [r7, #20]
 8001956:	f7fe fbd5 	bl	8000104 <__udivsi3>
 800195a:	0003      	movs	r3, r0
 800195c:	3b01      	subs	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_PRESCALER(&htim14, prescaler);
 8001960:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <piezo_beep+0x68>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim14, period);
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <piezo_beep+0x68>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001970:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <piezo_beep+0x68>)
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, period / 2);
 8001976:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <piezo_beep+0x68>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	0852      	lsrs	r2, r2, #1
 800197e:	635a      	str	r2, [r3, #52]	@ 0x34

    beep_end_time = HAL_GetTick() + duration_ms;
 8001980:	f000 f976 	bl	8001c70 <HAL_GetTick>
 8001984:	0002      	movs	r2, r0
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	18d2      	adds	r2, r2, r3
 800198c:	4b03      	ldr	r3, [pc, #12]	@ (800199c <piezo_beep+0x6c>)
 800198e:	601a      	str	r2, [r3, #0]
}
 8001990:	46c0      	nop			@ (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b006      	add	sp, #24
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000084 	.word	0x20000084
 800199c:	20000430 	.word	0x20000430

080019a0 <piezo_stop>:

void piezo_stop(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 0);
 80019a4:	4b03      	ldr	r3, [pc, #12]	@ (80019b4 <piezo_stop+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80019ac:	46c0      	nop			@ (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	20000084 	.word	0x20000084

080019b8 <sound_beep_start>:
#include "stm32g0xx_hal.h" // Für HAL_GetTick()

static bool beep_active = false;
static uint32_t beep_end_time = 0;

void sound_beep_start(uint16_t duration_ms, uint16_t frequency_hz) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	0002      	movs	r2, r0
 80019c0:	1dbb      	adds	r3, r7, #6
 80019c2:	801a      	strh	r2, [r3, #0]
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	1c0a      	adds	r2, r1, #0
 80019c8:	801a      	strh	r2, [r3, #0]
    piezo_beep(frequency_hz, duration_ms);
 80019ca:	1dbb      	adds	r3, r7, #6
 80019cc:	881a      	ldrh	r2, [r3, #0]
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	0011      	movs	r1, r2
 80019d4:	0018      	movs	r0, r3
 80019d6:	f7ff ffab 	bl	8001930 <piezo_beep>
    beep_end_time = HAL_GetTick() + duration_ms;
 80019da:	f000 f949 	bl	8001c70 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	1dbb      	adds	r3, r7, #6
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	18d2      	adds	r2, r2, r3
 80019e6:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <sound_beep_start+0x40>)
 80019e8:	601a      	str	r2, [r3, #0]
    beep_active = true;
 80019ea:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <sound_beep_start+0x44>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
}
 80019f0:	46c0      	nop			@ (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b002      	add	sp, #8
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000438 	.word	0x20000438
 80019fc:	20000434 	.word	0x20000434

08001a00 <sound_beep_update>:

void sound_beep_update(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
    if (beep_active && HAL_GetTick() >= beep_end_time) {
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <sound_beep_update+0x2c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00b      	beq.n	8001a24 <sound_beep_update+0x24>
 8001a0c:	f000 f930 	bl	8001c70 <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <sound_beep_update+0x30>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d304      	bcc.n	8001a24 <sound_beep_update+0x24>
        piezo_stop();
 8001a1a:	f7ff ffc1 	bl	80019a0 <piezo_stop>
        beep_active = false;
 8001a1e:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <sound_beep_update+0x2c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
    }
}
 8001a24:	46c0      	nop			@ (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	20000434 	.word	0x20000434
 8001a30:	20000438 	.word	0x20000438

08001a34 <sound_beep_is_active>:

bool sound_beep_is_active(void) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
    return beep_active;
 8001a38:	4b02      	ldr	r3, [pc, #8]	@ (8001a44 <sound_beep_is_active+0x10>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	20000434 	.word	0x20000434

08001a48 <sound_engine_set>:

// Globale Zustände
static sound_id_t current_sound = SOUND_NONE;
static uint8_t sound_repeat_counter = 0;

void sound_engine_set(sound_id_t sound_id, uint8_t repeat) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	0002      	movs	r2, r0
 8001a50:	1dfb      	adds	r3, r7, #7
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	1dbb      	adds	r3, r7, #6
 8001a56:	1c0a      	adds	r2, r1, #0
 8001a58:	701a      	strb	r2, [r3, #0]
    current_sound = sound_id;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <sound_engine_set+0x2c>)
 8001a5c:	1dfa      	adds	r2, r7, #7
 8001a5e:	7812      	ldrb	r2, [r2, #0]
 8001a60:	701a      	strb	r2, [r3, #0]
    sound_repeat_counter = repeat;
 8001a62:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <sound_engine_set+0x30>)
 8001a64:	1dba      	adds	r2, r7, #6
 8001a66:	7812      	ldrb	r2, [r2, #0]
 8001a68:	701a      	strb	r2, [r3, #0]
}
 8001a6a:	46c0      	nop			@ (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b002      	add	sp, #8
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	2000043c 	.word	0x2000043c
 8001a78:	2000043d 	.word	0x2000043d

08001a7c <sound_engine_play>:

void sound_engine_play(sound_id_t sound) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	0002      	movs	r2, r0
 8001a84:	1dfb      	adds	r3, r7, #7
 8001a86:	701a      	strb	r2, [r3, #0]
    sound_engine_set(sound, 1);
 8001a88:	1dfb      	adds	r3, r7, #7
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f7ff ffda 	bl	8001a48 <sound_engine_set>
}
 8001a94:	46c0      	nop			@ (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b002      	add	sp, #8
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <sound_engine_tick>:

void sound_engine_tick(void) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
    if (current_sound == SOUND_NONE) return;
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b0c <sound_engine_tick+0x70>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d026      	beq.n	8001af6 <sound_engine_tick+0x5a>

    switch (current_sound) {
 8001aa8:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <sound_engine_tick+0x70>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d024      	beq.n	8001afa <sound_engine_tick+0x5e>
 8001ab0:	dc25      	bgt.n	8001afe <sound_engine_tick+0x62>
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d002      	beq.n	8001abc <sound_engine_tick+0x20>
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d023      	beq.n	8001b02 <sound_engine_tick+0x66>
            break;
        case SOUND_CONFIG_MODE:
            // Analog: Hier ggf. sound_config_mode_is_active() prüfen!
            break;
        default:
            break;
 8001aba:	e020      	b.n	8001afe <sound_engine_tick+0x62>
            if (!sound_beep_is_active()) {
 8001abc:	f7ff ffba 	bl	8001a34 <sound_beep_is_active>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	4053      	eors	r3, r2
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01b      	beq.n	8001b06 <sound_engine_tick+0x6a>
                sound_beep_start(80, 4000); // Beispiel: 80 ms, 4 kHz
 8001ace:	23fa      	movs	r3, #250	@ 0xfa
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	2050      	movs	r0, #80	@ 0x50
 8001ad6:	f7ff ff6f 	bl	80019b8 <sound_beep_start>
                sound_repeat_counter--;
 8001ada:	4b0d      	ldr	r3, [pc, #52]	@ (8001b10 <sound_engine_tick+0x74>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <sound_engine_tick+0x74>)
 8001ae4:	701a      	strb	r2, [r3, #0]
                if (sound_repeat_counter == 0) {
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <sound_engine_tick+0x74>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10b      	bne.n	8001b06 <sound_engine_tick+0x6a>
                    current_sound = SOUND_NONE;
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <sound_engine_tick+0x70>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
            break;
 8001af4:	e007      	b.n	8001b06 <sound_engine_tick+0x6a>
    if (current_sound == SOUND_NONE) return;
 8001af6:	46c0      	nop			@ (mov r8, r8)
 8001af8:	e006      	b.n	8001b08 <sound_engine_tick+0x6c>
            break;
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	e004      	b.n	8001b08 <sound_engine_tick+0x6c>
            break;
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	e002      	b.n	8001b08 <sound_engine_tick+0x6c>
            break;
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	e000      	b.n	8001b08 <sound_engine_tick+0x6c>
            break;
 8001b06:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000043c 	.word	0x2000043c
 8001b10:	2000043d 	.word	0x2000043d

08001b14 <sound_engine_init>:

void sound_engine_init(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
    piezo_init();
 8001b18:	f7ff fefa 	bl	8001910 <piezo_init>
}
 8001b1c:	46c0      	nop			@ (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b24:	480d      	ldr	r0, [pc, #52]	@ (8001b5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b28:	f7fe febc 	bl	80008a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b2c:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b2e:	490d      	ldr	r1, [pc, #52]	@ (8001b64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <LoopForever+0xe>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b44:	4c0a      	ldr	r4, [pc, #40]	@ (8001b70 <LoopForever+0x16>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b52:	f002 fba7 	bl	80042a4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001b56:	f7fe fda5 	bl	80006a4 <main>

08001b5a <LoopForever>:

LoopForever:
  b LoopForever
 8001b5a:	e7fe      	b.n	8001b5a <LoopForever>
  ldr   r0, =_estack
 8001b5c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001b68:	08004430 	.word	0x08004430
  ldr r2, =_sbss
 8001b6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b70:	20000444 	.word	0x20000444

08001b74 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC1_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b7e:	1dfb      	adds	r3, r7, #7
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <HAL_Init+0x3c>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <HAL_Init+0x3c>)
 8001b8a:	2180      	movs	r1, #128	@ 0x80
 8001b8c:	0049      	lsls	r1, r1, #1
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b92:	2003      	movs	r0, #3
 8001b94:	f000 f810 	bl	8001bb8 <HAL_InitTick>
 8001b98:	1e03      	subs	r3, r0, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001b9c:	1dfb      	adds	r3, r7, #7
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	e001      	b.n	8001ba8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001ba4:	f7fe fe2c 	bl	8000800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ba8:	1dfb      	adds	r3, r7, #7
 8001baa:	781b      	ldrb	r3, [r3, #0]
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40022000 	.word	0x40022000

08001bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <HAL_InitTick+0x88>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d02b      	beq.n	8001c28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <HAL_InitTick+0x8c>)
 8001bd2:	681c      	ldr	r4, [r3, #0]
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <HAL_InitTick+0x88>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	0019      	movs	r1, r3
 8001bda:	23fa      	movs	r3, #250	@ 0xfa
 8001bdc:	0098      	lsls	r0, r3, #2
 8001bde:	f7fe fa91 	bl	8000104 <__udivsi3>
 8001be2:	0003      	movs	r3, r0
 8001be4:	0019      	movs	r1, r3
 8001be6:	0020      	movs	r0, r4
 8001be8:	f7fe fa8c 	bl	8000104 <__udivsi3>
 8001bec:	0003      	movs	r3, r0
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f000 f919 	bl	8001e26 <HAL_SYSTICK_Config>
 8001bf4:	1e03      	subs	r3, r0, #0
 8001bf6:	d112      	bne.n	8001c1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d80a      	bhi.n	8001c14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	2301      	movs	r3, #1
 8001c02:	425b      	negs	r3, r3
 8001c04:	2200      	movs	r2, #0
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 f8e8 	bl	8001ddc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <HAL_InitTick+0x90>)
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e00d      	b.n	8001c30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001c14:	230f      	movs	r3, #15
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
 8001c1c:	e008      	b.n	8001c30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c1e:	230f      	movs	r3, #15
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e003      	b.n	8001c30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c28:	230f      	movs	r3, #15
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001c30:	230f      	movs	r3, #15
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	781b      	ldrb	r3, [r3, #0]
}
 8001c36:	0018      	movs	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b005      	add	sp, #20
 8001c3c:	bd90      	pop	{r4, r7, pc}
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	2000000c 	.word	0x2000000c
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000008 	.word	0x20000008

08001c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <HAL_IncTick+0x1c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	001a      	movs	r2, r3
 8001c56:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <HAL_IncTick+0x20>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	18d2      	adds	r2, r2, r3
 8001c5c:	4b03      	ldr	r3, [pc, #12]	@ (8001c6c <HAL_IncTick+0x20>)
 8001c5e:	601a      	str	r2, [r3, #0]
}
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	2000000c 	.word	0x2000000c
 8001c6c:	20000440 	.word	0x20000440

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b02      	ldr	r3, [pc, #8]	@ (8001c80 <HAL_GetTick+0x10>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	20000440 	.word	0x20000440

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	1dfb      	adds	r3, r7, #7
 8001c8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	1dfb      	adds	r3, r7, #7
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c96:	d809      	bhi.n	8001cac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c98:	1dfb      	adds	r3, r7, #7
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	231f      	movs	r3, #31
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	4b04      	ldr	r3, [pc, #16]	@ (8001cb4 <__NVIC_EnableIRQ+0x30>)
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4091      	lsls	r1, r2
 8001ca8:	000a      	movs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001cac:	46c0      	nop			@ (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ccc:	d828      	bhi.n	8001d20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cce:	4a2f      	ldr	r2, [pc, #188]	@ (8001d8c <__NVIC_SetPriority+0xd4>)
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b25b      	sxtb	r3, r3
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	33c0      	adds	r3, #192	@ 0xc0
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	589b      	ldr	r3, [r3, r2]
 8001cde:	1dfa      	adds	r2, r7, #7
 8001ce0:	7812      	ldrb	r2, [r2, #0]
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	00d2      	lsls	r2, r2, #3
 8001cea:	21ff      	movs	r1, #255	@ 0xff
 8001cec:	4091      	lsls	r1, r2
 8001cee:	000a      	movs	r2, r1
 8001cf0:	43d2      	mvns	r2, r2
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	019b      	lsls	r3, r3, #6
 8001cfa:	22ff      	movs	r2, #255	@ 0xff
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	0018      	movs	r0, r3
 8001d04:	2303      	movs	r3, #3
 8001d06:	4003      	ands	r3, r0
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d0c:	481f      	ldr	r0, [pc, #124]	@ (8001d8c <__NVIC_SetPriority+0xd4>)
 8001d0e:	1dfb      	adds	r3, r7, #7
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	430a      	orrs	r2, r1
 8001d18:	33c0      	adds	r3, #192	@ 0xc0
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d1e:	e031      	b.n	8001d84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d20:	4a1b      	ldr	r2, [pc, #108]	@ (8001d90 <__NVIC_SetPriority+0xd8>)
 8001d22:	1dfb      	adds	r3, r7, #7
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	0019      	movs	r1, r3
 8001d28:	230f      	movs	r3, #15
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	3b08      	subs	r3, #8
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3306      	adds	r3, #6
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	18d3      	adds	r3, r2, r3
 8001d36:	3304      	adds	r3, #4
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	1dfa      	adds	r2, r7, #7
 8001d3c:	7812      	ldrb	r2, [r2, #0]
 8001d3e:	0011      	movs	r1, r2
 8001d40:	2203      	movs	r2, #3
 8001d42:	400a      	ands	r2, r1
 8001d44:	00d2      	lsls	r2, r2, #3
 8001d46:	21ff      	movs	r1, #255	@ 0xff
 8001d48:	4091      	lsls	r1, r2
 8001d4a:	000a      	movs	r2, r1
 8001d4c:	43d2      	mvns	r2, r2
 8001d4e:	401a      	ands	r2, r3
 8001d50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	22ff      	movs	r2, #255	@ 0xff
 8001d58:	401a      	ands	r2, r3
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	0018      	movs	r0, r3
 8001d60:	2303      	movs	r3, #3
 8001d62:	4003      	ands	r3, r0
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d68:	4809      	ldr	r0, [pc, #36]	@ (8001d90 <__NVIC_SetPriority+0xd8>)
 8001d6a:	1dfb      	adds	r3, r7, #7
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	001c      	movs	r4, r3
 8001d70:	230f      	movs	r3, #15
 8001d72:	4023      	ands	r3, r4
 8001d74:	3b08      	subs	r3, #8
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	3306      	adds	r3, #6
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	18c3      	adds	r3, r0, r3
 8001d80:	3304      	adds	r3, #4
 8001d82:	601a      	str	r2, [r3, #0]
}
 8001d84:	46c0      	nop			@ (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b003      	add	sp, #12
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1e5a      	subs	r2, r3, #1
 8001da0:	2380      	movs	r3, #128	@ 0x80
 8001da2:	045b      	lsls	r3, r3, #17
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d301      	bcc.n	8001dac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da8:	2301      	movs	r3, #1
 8001daa:	e010      	b.n	8001dce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dac:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <SysTick_Config+0x44>)
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	3a01      	subs	r2, #1
 8001db2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db4:	2301      	movs	r3, #1
 8001db6:	425b      	negs	r3, r3
 8001db8:	2103      	movs	r1, #3
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f7ff ff7c 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <SysTick_Config+0x44>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	@ (8001dd8 <SysTick_Config+0x44>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	210f      	movs	r1, #15
 8001de8:	187b      	adds	r3, r7, r1
 8001dea:	1c02      	adds	r2, r0, #0
 8001dec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	187b      	adds	r3, r7, r1
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b25b      	sxtb	r3, r3
 8001df6:	0011      	movs	r1, r2
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff ff5d 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfe:	46c0      	nop			@ (mov r8, r8)
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b004      	add	sp, #16
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	1dfb      	adds	r3, r7, #7
 8001e10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b25b      	sxtb	r3, r3
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7ff ff33 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b002      	add	sp, #8
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7ff ffaf 	bl	8001d94 <SysTick_Config>
 8001e36:	0003      	movs	r3, r0
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e077      	b.n	8001f42 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a3d      	ldr	r2, [pc, #244]	@ (8001f4c <HAL_DMA_Init+0x10c>)
 8001e58:	4694      	mov	ip, r2
 8001e5a:	4463      	add	r3, ip
 8001e5c:	2114      	movs	r1, #20
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f7fe f950 	bl	8000104 <__udivsi3>
 8001e64:	0003      	movs	r3, r0
 8001e66:	009a      	lsls	r2, r3, #2
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2225      	movs	r2, #37	@ 0x25
 8001e70:	2102      	movs	r1, #2
 8001e72:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4934      	ldr	r1, [pc, #208]	@ (8001f50 <HAL_DMA_Init+0x110>)
 8001e80:	400a      	ands	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f000 f9c1 	bl	8002244 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	2380      	movs	r3, #128	@ 0x80
 8001ec8:	01db      	lsls	r3, r3, #7
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d102      	bne.n	8001ed4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001edc:	213f      	movs	r1, #63	@ 0x3f
 8001ede:	400a      	ands	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001eea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d011      	beq.n	8001f18 <HAL_DMA_Init+0xd8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d80d      	bhi.n	8001f18 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 f9cc 	bl	800229c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	e008      	b.n	8001f2a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2225      	movs	r2, #37	@ 0x25
 8001f34:	2101      	movs	r1, #1
 8001f36:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2224      	movs	r2, #36	@ 0x24
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b002      	add	sp, #8
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	bffdfff8 	.word	0xbffdfff8
 8001f50:	ffff800f 	.word	0xffff800f

08001f54 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f62:	2317      	movs	r3, #23
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2224      	movs	r2, #36	@ 0x24
 8001f6e:	5c9b      	ldrb	r3, [r3, r2]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_DMA_Start_IT+0x24>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e06f      	b.n	8002058 <HAL_DMA_Start_IT+0x104>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2224      	movs	r2, #36	@ 0x24
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2225      	movs	r2, #37	@ 0x25
 8001f84:	5c9b      	ldrb	r3, [r3, r2]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d157      	bne.n	800203c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2225      	movs	r2, #37	@ 0x25
 8001f90:	2102      	movs	r1, #2
 8001f92:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	438a      	bics	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f907 	bl	80021c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d008      	beq.n	8001fd0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	210e      	movs	r1, #14
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e00f      	b.n	8001ff0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2104      	movs	r1, #4
 8001fdc:	438a      	bics	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	210a      	movs	r1, #10
 8001fec:	430a      	orrs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	2380      	movs	r3, #128	@ 0x80
 8001ff8:	025b      	lsls	r3, r3, #9
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d008      	beq.n	8002010 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002008:	2180      	movs	r1, #128	@ 0x80
 800200a:	0049      	lsls	r1, r1, #1
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002022:	2180      	movs	r1, #128	@ 0x80
 8002024:	0049      	lsls	r1, r1, #1
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2101      	movs	r1, #1
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	e00a      	b.n	8002052 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2280      	movs	r2, #128	@ 0x80
 8002040:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2224      	movs	r2, #36	@ 0x24
 8002046:	2100      	movs	r1, #0
 8002048:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800204a:	2317      	movs	r3, #23
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002052:	2317      	movs	r3, #23
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	781b      	ldrb	r3, [r3, #0]
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b006      	add	sp, #24
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002068:	4b55      	ldr	r3, [pc, #340]	@ (80021c0 <HAL_DMA_IRQHandler+0x160>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	221c      	movs	r2, #28
 800207c:	4013      	ands	r3, r2
 800207e:	2204      	movs	r2, #4
 8002080:	409a      	lsls	r2, r3
 8002082:	0013      	movs	r3, r2
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4013      	ands	r3, r2
 8002088:	d027      	beq.n	80020da <HAL_DMA_IRQHandler+0x7a>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2204      	movs	r2, #4
 800208e:	4013      	ands	r3, r2
 8002090:	d023      	beq.n	80020da <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2220      	movs	r2, #32
 800209a:	4013      	ands	r3, r2
 800209c:	d107      	bne.n	80020ae <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2104      	movs	r1, #4
 80020aa:	438a      	bics	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80020ae:	4b44      	ldr	r3, [pc, #272]	@ (80021c0 <HAL_DMA_IRQHandler+0x160>)
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	221c      	movs	r2, #28
 80020b8:	4013      	ands	r3, r2
 80020ba:	2204      	movs	r2, #4
 80020bc:	409a      	lsls	r2, r3
 80020be:	4b40      	ldr	r3, [pc, #256]	@ (80021c0 <HAL_DMA_IRQHandler+0x160>)
 80020c0:	430a      	orrs	r2, r1
 80020c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d100      	bne.n	80020ce <HAL_DMA_IRQHandler+0x6e>
 80020cc:	e073      	b.n	80021b6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	0010      	movs	r0, r2
 80020d6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80020d8:	e06d      	b.n	80021b6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	221c      	movs	r2, #28
 80020e0:	4013      	ands	r3, r2
 80020e2:	2202      	movs	r2, #2
 80020e4:	409a      	lsls	r2, r3
 80020e6:	0013      	movs	r3, r2
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4013      	ands	r3, r2
 80020ec:	d02e      	beq.n	800214c <HAL_DMA_IRQHandler+0xec>
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2202      	movs	r2, #2
 80020f2:	4013      	ands	r3, r2
 80020f4:	d02a      	beq.n	800214c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2220      	movs	r2, #32
 80020fe:	4013      	ands	r3, r2
 8002100:	d10b      	bne.n	800211a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	210a      	movs	r1, #10
 800210e:	438a      	bics	r2, r1
 8002110:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2225      	movs	r2, #37	@ 0x25
 8002116:	2101      	movs	r1, #1
 8002118:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800211a:	4b29      	ldr	r3, [pc, #164]	@ (80021c0 <HAL_DMA_IRQHandler+0x160>)
 800211c:	6859      	ldr	r1, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	221c      	movs	r2, #28
 8002124:	4013      	ands	r3, r2
 8002126:	2202      	movs	r2, #2
 8002128:	409a      	lsls	r2, r3
 800212a:	4b25      	ldr	r3, [pc, #148]	@ (80021c0 <HAL_DMA_IRQHandler+0x160>)
 800212c:	430a      	orrs	r2, r1
 800212e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	@ 0x24
 8002134:	2100      	movs	r1, #0
 8002136:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213c:	2b00      	cmp	r3, #0
 800213e:	d03a      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	0010      	movs	r0, r2
 8002148:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800214a:	e034      	b.n	80021b6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	221c      	movs	r2, #28
 8002152:	4013      	ands	r3, r2
 8002154:	2208      	movs	r2, #8
 8002156:	409a      	lsls	r2, r3
 8002158:	0013      	movs	r3, r2
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4013      	ands	r3, r2
 800215e:	d02b      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x158>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2208      	movs	r2, #8
 8002164:	4013      	ands	r3, r2
 8002166:	d027      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	210e      	movs	r1, #14
 8002174:	438a      	bics	r2, r1
 8002176:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002178:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <HAL_DMA_IRQHandler+0x160>)
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	221c      	movs	r2, #28
 8002182:	4013      	ands	r3, r2
 8002184:	2201      	movs	r2, #1
 8002186:	409a      	lsls	r2, r3
 8002188:	4b0d      	ldr	r3, [pc, #52]	@ (80021c0 <HAL_DMA_IRQHandler+0x160>)
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2225      	movs	r2, #37	@ 0x25
 8002198:	2101      	movs	r1, #1
 800219a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2224      	movs	r2, #36	@ 0x24
 80021a0:	2100      	movs	r1, #0
 80021a2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	0010      	movs	r0, r2
 80021b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	46c0      	nop			@ (mov r8, r8)
}
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b004      	add	sp, #16
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40020000 	.word	0x40020000

080021c4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80021da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d004      	beq.n	80021ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80021ec:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80021ee:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <DMA_SetConfig+0x7c>)
 80021f0:	6859      	ldr	r1, [r3, #4]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	221c      	movs	r2, #28
 80021f8:	4013      	ands	r3, r2
 80021fa:	2201      	movs	r2, #1
 80021fc:	409a      	lsls	r2, r3
 80021fe:	4b10      	ldr	r3, [pc, #64]	@ (8002240 <DMA_SetConfig+0x7c>)
 8002200:	430a      	orrs	r2, r1
 8002202:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b10      	cmp	r3, #16
 8002212:	d108      	bne.n	8002226 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002224:	e007      	b.n	8002236 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	60da      	str	r2, [r3, #12]
}
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	b004      	add	sp, #16
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			@ (mov r8, r8)
 8002240:	40020000 	.word	0x40020000

08002244 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	4a10      	ldr	r2, [pc, #64]	@ (8002294 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002254:	4694      	mov	ip, r2
 8002256:	4463      	add	r3, ip
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	001a      	movs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	001a      	movs	r2, r3
 8002266:	23ff      	movs	r3, #255	@ 0xff
 8002268:	4013      	ands	r3, r2
 800226a:	3b08      	subs	r3, #8
 800226c:	2114      	movs	r1, #20
 800226e:	0018      	movs	r0, r3
 8002270:	f7fd ff48 	bl	8000104 <__udivsi3>
 8002274:	0003      	movs	r3, r0
 8002276:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a07      	ldr	r2, [pc, #28]	@ (8002298 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800227c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	221f      	movs	r2, #31
 8002282:	4013      	ands	r3, r2
 8002284:	2201      	movs	r2, #1
 8002286:	409a      	lsls	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800228c:	46c0      	nop			@ (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	b004      	add	sp, #16
 8002292:	bd80      	pop	{r7, pc}
 8002294:	10008200 	.word	0x10008200
 8002298:	40020880 	.word	0x40020880

0800229c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	223f      	movs	r2, #63	@ 0x3f
 80022aa:	4013      	ands	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80022b2:	4694      	mov	ip, r2
 80022b4:	4463      	add	r3, ip
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	001a      	movs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a07      	ldr	r2, [pc, #28]	@ (80022e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	4013      	ands	r3, r2
 80022cc:	2201      	movs	r2, #1
 80022ce:	409a      	lsls	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80022d4:	46c0      	nop			@ (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	1000823f 	.word	0x1000823f
 80022e0:	40020940 	.word	0x40020940

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	e147      	b.n	8002584 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2101      	movs	r1, #1
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4091      	lsls	r1, r2
 80022fe:	000a      	movs	r2, r1
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d100      	bne.n	800230c <HAL_GPIO_Init+0x28>
 800230a:	e138      	b.n	800257e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2203      	movs	r2, #3
 8002312:	4013      	ands	r3, r2
 8002314:	2b01      	cmp	r3, #1
 8002316:	d005      	beq.n	8002324 <HAL_GPIO_Init+0x40>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2203      	movs	r2, #3
 800231e:	4013      	ands	r3, r2
 8002320:	2b02      	cmp	r3, #2
 8002322:	d130      	bne.n	8002386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	409a      	lsls	r2, r3
 8002332:	0013      	movs	r3, r2
 8002334:	43da      	mvns	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	409a      	lsls	r2, r3
 8002346:	0013      	movs	r3, r2
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800235a:	2201      	movs	r2, #1
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	43da      	mvns	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	2201      	movs	r2, #1
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2203      	movs	r2, #3
 800238c:	4013      	ands	r3, r2
 800238e:	2b03      	cmp	r3, #3
 8002390:	d017      	beq.n	80023c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	409a      	lsls	r2, r3
 80023a0:	0013      	movs	r3, r2
 80023a2:	43da      	mvns	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	409a      	lsls	r2, r3
 80023b4:	0013      	movs	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2203      	movs	r2, #3
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d123      	bne.n	8002416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	0092      	lsls	r2, r2, #2
 80023d8:	58d3      	ldr	r3, [r2, r3]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2207      	movs	r2, #7
 80023e0:	4013      	ands	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	409a      	lsls	r2, r3
 80023e8:	0013      	movs	r3, r2
 80023ea:	43da      	mvns	r2, r3
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2107      	movs	r1, #7
 80023fa:	400b      	ands	r3, r1
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	409a      	lsls	r2, r3
 8002400:	0013      	movs	r3, r2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	08da      	lsrs	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3208      	adds	r2, #8
 8002410:	0092      	lsls	r2, r2, #2
 8002412:	6939      	ldr	r1, [r7, #16]
 8002414:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	409a      	lsls	r2, r3
 8002424:	0013      	movs	r3, r2
 8002426:	43da      	mvns	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2203      	movs	r2, #3
 8002434:	401a      	ands	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	409a      	lsls	r2, r3
 800243c:	0013      	movs	r3, r2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	23c0      	movs	r3, #192	@ 0xc0
 8002450:	029b      	lsls	r3, r3, #10
 8002452:	4013      	ands	r3, r2
 8002454:	d100      	bne.n	8002458 <HAL_GPIO_Init+0x174>
 8002456:	e092      	b.n	800257e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002458:	4a50      	ldr	r2, [pc, #320]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3318      	adds	r3, #24
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	589b      	ldr	r3, [r3, r2]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2203      	movs	r2, #3
 800246a:	4013      	ands	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	220f      	movs	r2, #15
 8002470:	409a      	lsls	r2, r3
 8002472:	0013      	movs	r3, r2
 8002474:	43da      	mvns	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	23a0      	movs	r3, #160	@ 0xa0
 8002480:	05db      	lsls	r3, r3, #23
 8002482:	429a      	cmp	r2, r3
 8002484:	d013      	beq.n	80024ae <HAL_GPIO_Init+0x1ca>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a45      	ldr	r2, [pc, #276]	@ (80025a0 <HAL_GPIO_Init+0x2bc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00d      	beq.n	80024aa <HAL_GPIO_Init+0x1c6>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a44      	ldr	r2, [pc, #272]	@ (80025a4 <HAL_GPIO_Init+0x2c0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d007      	beq.n	80024a6 <HAL_GPIO_Init+0x1c2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a43      	ldr	r2, [pc, #268]	@ (80025a8 <HAL_GPIO_Init+0x2c4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_GPIO_Init+0x1be>
 800249e:	2303      	movs	r3, #3
 80024a0:	e006      	b.n	80024b0 <HAL_GPIO_Init+0x1cc>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e004      	b.n	80024b0 <HAL_GPIO_Init+0x1cc>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e002      	b.n	80024b0 <HAL_GPIO_Init+0x1cc>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_GPIO_Init+0x1cc>
 80024ae:	2300      	movs	r3, #0
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	2103      	movs	r1, #3
 80024b4:	400a      	ands	r2, r1
 80024b6:	00d2      	lsls	r2, r2, #3
 80024b8:	4093      	lsls	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80024c0:	4936      	ldr	r1, [pc, #216]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	3318      	adds	r3, #24
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024ce:	4b33      	ldr	r3, [pc, #204]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43da      	mvns	r2, r3
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	2380      	movs	r3, #128	@ 0x80
 80024e4:	035b      	lsls	r3, r3, #13
 80024e6:	4013      	ands	r3, r2
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024f2:	4b2a      	ldr	r3, [pc, #168]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80024f8:	4b28      	ldr	r3, [pc, #160]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	43da      	mvns	r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	2380      	movs	r3, #128	@ 0x80
 800250e:	039b      	lsls	r3, r3, #14
 8002510:	4013      	ands	r3, r2
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800251c:	4b1f      	ldr	r3, [pc, #124]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002522:	4a1e      	ldr	r2, [pc, #120]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 8002524:	2384      	movs	r3, #132	@ 0x84
 8002526:	58d3      	ldr	r3, [r2, r3]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43da      	mvns	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	029b      	lsls	r3, r3, #10
 800253c:	4013      	ands	r3, r2
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002548:	4914      	ldr	r1, [pc, #80]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 800254a:	2284      	movs	r2, #132	@ 0x84
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002550:	4a12      	ldr	r2, [pc, #72]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 8002552:	2380      	movs	r3, #128	@ 0x80
 8002554:	58d3      	ldr	r3, [r2, r3]
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43da      	mvns	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	025b      	lsls	r3, r3, #9
 800256a:	4013      	ands	r3, r2
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002576:	4909      	ldr	r1, [pc, #36]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 8002578:	2280      	movs	r2, #128	@ 0x80
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	40da      	lsrs	r2, r3
 800258c:	1e13      	subs	r3, r2, #0
 800258e:	d000      	beq.n	8002592 <HAL_GPIO_Init+0x2ae>
 8002590:	e6b0      	b.n	80022f4 <HAL_GPIO_Init+0x10>
  }
}
 8002592:	46c0      	nop			@ (mov r8, r8)
 8002594:	46c0      	nop			@ (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b006      	add	sp, #24
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021800 	.word	0x40021800
 80025a0:	50000400 	.word	0x50000400
 80025a4:	50000800 	.word	0x50000800
 80025a8:	50000c00 	.word	0x50000c00

080025ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	0008      	movs	r0, r1
 80025b6:	0011      	movs	r1, r2
 80025b8:	1cbb      	adds	r3, r7, #2
 80025ba:	1c02      	adds	r2, r0, #0
 80025bc:	801a      	strh	r2, [r3, #0]
 80025be:	1c7b      	adds	r3, r7, #1
 80025c0:	1c0a      	adds	r2, r1, #0
 80025c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025c4:	1c7b      	adds	r3, r7, #1
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025cc:	1cbb      	adds	r3, r7, #2
 80025ce:	881a      	ldrh	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025d4:	e003      	b.n	80025de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025d6:	1cbb      	adds	r3, r7, #2
 80025d8:	881a      	ldrh	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b002      	add	sp, #8
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	0002      	movs	r2, r0
 80025f0:	1dbb      	adds	r3, r7, #6
 80025f2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80025f4:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	1dba      	adds	r2, r7, #6
 80025fa:	8812      	ldrh	r2, [r2, #0]
 80025fc:	4013      	ands	r3, r2
 80025fe:	d008      	beq.n	8002612 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002600:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002602:	1dba      	adds	r2, r7, #6
 8002604:	8812      	ldrh	r2, [r2, #0]
 8002606:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002608:	1dbb      	adds	r3, r7, #6
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	0018      	movs	r0, r3
 800260e:	f000 f815 	bl	800263c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	1dba      	adds	r2, r7, #6
 8002618:	8812      	ldrh	r2, [r2, #0]
 800261a:	4013      	ands	r3, r2
 800261c:	d008      	beq.n	8002630 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800261e:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002620:	1dba      	adds	r2, r7, #6
 8002622:	8812      	ldrh	r2, [r2, #0]
 8002624:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002626:	1dbb      	adds	r3, r7, #6
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	0018      	movs	r0, r3
 800262c:	f7fe f804 	bl	8000638 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002630:	46c0      	nop			@ (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021800 	.word	0x40021800

0800263c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	0002      	movs	r2, r0
 8002644:	1dbb      	adds	r3, r7, #6
 8002646:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002648:	46c0      	nop			@ (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	b002      	add	sp, #8
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002658:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a19      	ldr	r2, [pc, #100]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800265e:	4013      	ands	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	4b17      	ldr	r3, [pc, #92]	@ (80026c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	430a      	orrs	r2, r1
 8002668:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	2380      	movs	r3, #128	@ 0x80
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	429a      	cmp	r2, r3
 8002672:	d11f      	bne.n	80026b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002674:	4b14      	ldr	r3, [pc, #80]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	0013      	movs	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	189b      	adds	r3, r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4912      	ldr	r1, [pc, #72]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002682:	0018      	movs	r0, r3
 8002684:	f7fd fd3e 	bl	8000104 <__udivsi3>
 8002688:	0003      	movs	r3, r0
 800268a:	3301      	adds	r3, #1
 800268c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800268e:	e008      	b.n	80026a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3b01      	subs	r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	e001      	b.n	80026a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e009      	b.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026a2:	4b07      	ldr	r3, [pc, #28]	@ (80026c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	2380      	movs	r3, #128	@ 0x80
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	401a      	ands	r2, r3
 80026ac:	2380      	movs	r3, #128	@ 0x80
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d0ed      	beq.n	8002690 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	0018      	movs	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b004      	add	sp, #16
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	40007000 	.word	0x40007000
 80026c4:	fffff9ff 	.word	0xfffff9ff
 80026c8:	20000000 	.word	0x20000000
 80026cc:	000f4240 	.word	0x000f4240

080026d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026d4:	4b03      	ldr	r3, [pc, #12]	@ (80026e4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	23e0      	movs	r3, #224	@ 0xe0
 80026da:	01db      	lsls	r3, r3, #7
 80026dc:	4013      	ands	r3, r2
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40021000 	.word	0x40021000

080026e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e2fe      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2201      	movs	r2, #1
 8002700:	4013      	ands	r3, r2
 8002702:	d100      	bne.n	8002706 <HAL_RCC_OscConfig+0x1e>
 8002704:	e07c      	b.n	8002800 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002706:	4bc3      	ldr	r3, [pc, #780]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2238      	movs	r2, #56	@ 0x38
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002710:	4bc0      	ldr	r3, [pc, #768]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2203      	movs	r2, #3
 8002716:	4013      	ands	r3, r2
 8002718:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b10      	cmp	r3, #16
 800271e:	d102      	bne.n	8002726 <HAL_RCC_OscConfig+0x3e>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b03      	cmp	r3, #3
 8002724:	d002      	beq.n	800272c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b08      	cmp	r3, #8
 800272a:	d10b      	bne.n	8002744 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	4bb9      	ldr	r3, [pc, #740]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	029b      	lsls	r3, r3, #10
 8002734:	4013      	ands	r3, r2
 8002736:	d062      	beq.n	80027fe <HAL_RCC_OscConfig+0x116>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d15e      	bne.n	80027fe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e2d9      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	2380      	movs	r3, #128	@ 0x80
 800274a:	025b      	lsls	r3, r3, #9
 800274c:	429a      	cmp	r2, r3
 800274e:	d107      	bne.n	8002760 <HAL_RCC_OscConfig+0x78>
 8002750:	4bb0      	ldr	r3, [pc, #704]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4baf      	ldr	r3, [pc, #700]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002756:	2180      	movs	r1, #128	@ 0x80
 8002758:	0249      	lsls	r1, r1, #9
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e020      	b.n	80027a2 <HAL_RCC_OscConfig+0xba>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	23a0      	movs	r3, #160	@ 0xa0
 8002766:	02db      	lsls	r3, r3, #11
 8002768:	429a      	cmp	r2, r3
 800276a:	d10e      	bne.n	800278a <HAL_RCC_OscConfig+0xa2>
 800276c:	4ba9      	ldr	r3, [pc, #676]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4ba8      	ldr	r3, [pc, #672]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002772:	2180      	movs	r1, #128	@ 0x80
 8002774:	02c9      	lsls	r1, r1, #11
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	4ba6      	ldr	r3, [pc, #664]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4ba5      	ldr	r3, [pc, #660]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002780:	2180      	movs	r1, #128	@ 0x80
 8002782:	0249      	lsls	r1, r1, #9
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e00b      	b.n	80027a2 <HAL_RCC_OscConfig+0xba>
 800278a:	4ba2      	ldr	r3, [pc, #648]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4ba1      	ldr	r3, [pc, #644]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002790:	49a1      	ldr	r1, [pc, #644]	@ (8002a18 <HAL_RCC_OscConfig+0x330>)
 8002792:	400a      	ands	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	4b9f      	ldr	r3, [pc, #636]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4b9e      	ldr	r3, [pc, #632]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 800279c:	499f      	ldr	r1, [pc, #636]	@ (8002a1c <HAL_RCC_OscConfig+0x334>)
 800279e:	400a      	ands	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d014      	beq.n	80027d4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7ff fa61 	bl	8001c70 <HAL_GetTick>
 80027ae:	0003      	movs	r3, r0
 80027b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b4:	f7ff fa5c 	bl	8001c70 <HAL_GetTick>
 80027b8:	0002      	movs	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	@ 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e298      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	4b93      	ldr	r3, [pc, #588]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	029b      	lsls	r3, r3, #10
 80027ce:	4013      	ands	r3, r2
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0xcc>
 80027d2:	e015      	b.n	8002800 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7ff fa4c 	bl	8001c70 <HAL_GetTick>
 80027d8:	0003      	movs	r3, r0
 80027da:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027de:	f7ff fa47 	bl	8001c70 <HAL_GetTick>
 80027e2:	0002      	movs	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b64      	cmp	r3, #100	@ 0x64
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e283      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027f0:	4b88      	ldr	r3, [pc, #544]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	029b      	lsls	r3, r3, #10
 80027f8:	4013      	ands	r3, r2
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0xf6>
 80027fc:	e000      	b.n	8002800 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2202      	movs	r2, #2
 8002806:	4013      	ands	r3, r2
 8002808:	d100      	bne.n	800280c <HAL_RCC_OscConfig+0x124>
 800280a:	e099      	b.n	8002940 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280c:	4b81      	ldr	r3, [pc, #516]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2238      	movs	r2, #56	@ 0x38
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002816:	4b7f      	ldr	r3, [pc, #508]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2203      	movs	r2, #3
 800281c:	4013      	ands	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2b10      	cmp	r3, #16
 8002824:	d102      	bne.n	800282c <HAL_RCC_OscConfig+0x144>
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d002      	beq.n	8002832 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d135      	bne.n	800289e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002832:	4b78      	ldr	r3, [pc, #480]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2380      	movs	r3, #128	@ 0x80
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4013      	ands	r3, r2
 800283c:	d005      	beq.n	800284a <HAL_RCC_OscConfig+0x162>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e256      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284a:	4b72      	ldr	r3, [pc, #456]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4a74      	ldr	r2, [pc, #464]	@ (8002a20 <HAL_RCC_OscConfig+0x338>)
 8002850:	4013      	ands	r3, r2
 8002852:	0019      	movs	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	021a      	lsls	r2, r3, #8
 800285a:	4b6e      	ldr	r3, [pc, #440]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 800285c:	430a      	orrs	r2, r1
 800285e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d112      	bne.n	800288c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002866:	4b6b      	ldr	r3, [pc, #428]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a6e      	ldr	r2, [pc, #440]	@ (8002a24 <HAL_RCC_OscConfig+0x33c>)
 800286c:	4013      	ands	r3, r2
 800286e:	0019      	movs	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	4b67      	ldr	r3, [pc, #412]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800287a:	4b66      	ldr	r3, [pc, #408]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	0adb      	lsrs	r3, r3, #11
 8002880:	2207      	movs	r2, #7
 8002882:	4013      	ands	r3, r2
 8002884:	4a68      	ldr	r2, [pc, #416]	@ (8002a28 <HAL_RCC_OscConfig+0x340>)
 8002886:	40da      	lsrs	r2, r3
 8002888:	4b68      	ldr	r3, [pc, #416]	@ (8002a2c <HAL_RCC_OscConfig+0x344>)
 800288a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800288c:	4b68      	ldr	r3, [pc, #416]	@ (8002a30 <HAL_RCC_OscConfig+0x348>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	0018      	movs	r0, r3
 8002892:	f7ff f991 	bl	8001bb8 <HAL_InitTick>
 8002896:	1e03      	subs	r3, r0, #0
 8002898:	d051      	beq.n	800293e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e22c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d030      	beq.n	8002908 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002a24 <HAL_RCC_OscConfig+0x33c>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	0019      	movs	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	4b57      	ldr	r3, [pc, #348]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 80028b6:	430a      	orrs	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80028ba:	4b56      	ldr	r3, [pc, #344]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b55      	ldr	r3, [pc, #340]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 80028c0:	2180      	movs	r1, #128	@ 0x80
 80028c2:	0049      	lsls	r1, r1, #1
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7ff f9d2 	bl	8001c70 <HAL_GetTick>
 80028cc:	0003      	movs	r3, r0
 80028ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d2:	f7ff f9cd 	bl	8001c70 <HAL_GetTick>
 80028d6:	0002      	movs	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e209      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	@ 0x80
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4013      	ands	r3, r2
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f0:	4b48      	ldr	r3, [pc, #288]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002a20 <HAL_RCC_OscConfig+0x338>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	0019      	movs	r1, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	021a      	lsls	r2, r3, #8
 8002900:	4b44      	ldr	r3, [pc, #272]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	e01b      	b.n	8002940 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002908:	4b42      	ldr	r3, [pc, #264]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b41      	ldr	r3, [pc, #260]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 800290e:	4949      	ldr	r1, [pc, #292]	@ (8002a34 <HAL_RCC_OscConfig+0x34c>)
 8002910:	400a      	ands	r2, r1
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7ff f9ac 	bl	8001c70 <HAL_GetTick>
 8002918:	0003      	movs	r3, r0
 800291a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291e:	f7ff f9a7 	bl	8001c70 <HAL_GetTick>
 8002922:	0002      	movs	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e1e3      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002930:	4b38      	ldr	r3, [pc, #224]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2380      	movs	r3, #128	@ 0x80
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4013      	ands	r3, r2
 800293a:	d1f0      	bne.n	800291e <HAL_RCC_OscConfig+0x236>
 800293c:	e000      	b.n	8002940 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800293e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2208      	movs	r2, #8
 8002946:	4013      	ands	r3, r2
 8002948:	d047      	beq.n	80029da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800294a:	4b32      	ldr	r3, [pc, #200]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2238      	movs	r2, #56	@ 0x38
 8002950:	4013      	ands	r3, r2
 8002952:	2b18      	cmp	r3, #24
 8002954:	d10a      	bne.n	800296c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002956:	4b2f      	ldr	r3, [pc, #188]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295a:	2202      	movs	r2, #2
 800295c:	4013      	ands	r3, r2
 800295e:	d03c      	beq.n	80029da <HAL_RCC_OscConfig+0x2f2>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d138      	bne.n	80029da <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e1c5      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d019      	beq.n	80029a8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002974:	4b27      	ldr	r3, [pc, #156]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 8002976:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002978:	4b26      	ldr	r3, [pc, #152]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 800297a:	2101      	movs	r1, #1
 800297c:	430a      	orrs	r2, r1
 800297e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7ff f976 	bl	8001c70 <HAL_GetTick>
 8002984:	0003      	movs	r3, r0
 8002986:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298a:	f7ff f971 	bl	8001c70 <HAL_GetTick>
 800298e:	0002      	movs	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1ad      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800299c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 800299e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a0:	2202      	movs	r2, #2
 80029a2:	4013      	ands	r3, r2
 80029a4:	d0f1      	beq.n	800298a <HAL_RCC_OscConfig+0x2a2>
 80029a6:	e018      	b.n	80029da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80029a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 80029aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029ac:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 80029ae:	2101      	movs	r1, #1
 80029b0:	438a      	bics	r2, r1
 80029b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7ff f95c 	bl	8001c70 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029be:	f7ff f957 	bl	8001c70 <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e193      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d0:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 80029d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d4:	2202      	movs	r2, #2
 80029d6:	4013      	ands	r3, r2
 80029d8:	d1f1      	bne.n	80029be <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2204      	movs	r2, #4
 80029e0:	4013      	ands	r3, r2
 80029e2:	d100      	bne.n	80029e6 <HAL_RCC_OscConfig+0x2fe>
 80029e4:	e0c6      	b.n	8002b74 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e6:	231f      	movs	r3, #31
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029ee:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2238      	movs	r2, #56	@ 0x38
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	d11e      	bne.n	8002a38 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_RCC_OscConfig+0x32c>)
 80029fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fe:	2202      	movs	r2, #2
 8002a00:	4013      	ands	r3, r2
 8002a02:	d100      	bne.n	8002a06 <HAL_RCC_OscConfig+0x31e>
 8002a04:	e0b6      	b.n	8002b74 <HAL_RCC_OscConfig+0x48c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d000      	beq.n	8002a10 <HAL_RCC_OscConfig+0x328>
 8002a0e:	e0b1      	b.n	8002b74 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e171      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
 8002a14:	40021000 	.word	0x40021000
 8002a18:	fffeffff 	.word	0xfffeffff
 8002a1c:	fffbffff 	.word	0xfffbffff
 8002a20:	ffff80ff 	.word	0xffff80ff
 8002a24:	ffffc7ff 	.word	0xffffc7ff
 8002a28:	00f42400 	.word	0x00f42400
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000008 	.word	0x20000008
 8002a34:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a38:	4bb1      	ldr	r3, [pc, #708]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002a3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a3c:	2380      	movs	r3, #128	@ 0x80
 8002a3e:	055b      	lsls	r3, r3, #21
 8002a40:	4013      	ands	r3, r2
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_OscConfig+0x360>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x362>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d011      	beq.n	8002a72 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	4bac      	ldr	r3, [pc, #688]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002a50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a52:	4bab      	ldr	r3, [pc, #684]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002a54:	2180      	movs	r1, #128	@ 0x80
 8002a56:	0549      	lsls	r1, r1, #21
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a5c:	4ba8      	ldr	r3, [pc, #672]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	055b      	lsls	r3, r3, #21
 8002a64:	4013      	ands	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a6a:	231f      	movs	r3, #31
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a72:	4ba4      	ldr	r3, [pc, #656]	@ (8002d04 <HAL_RCC_OscConfig+0x61c>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	2380      	movs	r3, #128	@ 0x80
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d11a      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a7e:	4ba1      	ldr	r3, [pc, #644]	@ (8002d04 <HAL_RCC_OscConfig+0x61c>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4ba0      	ldr	r3, [pc, #640]	@ (8002d04 <HAL_RCC_OscConfig+0x61c>)
 8002a84:	2180      	movs	r1, #128	@ 0x80
 8002a86:	0049      	lsls	r1, r1, #1
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a8c:	f7ff f8f0 	bl	8001c70 <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a96:	f7ff f8eb 	bl	8001c70 <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e127      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa8:	4b96      	ldr	r3, [pc, #600]	@ (8002d04 <HAL_RCC_OscConfig+0x61c>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	2380      	movs	r3, #128	@ 0x80
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d106      	bne.n	8002aca <HAL_RCC_OscConfig+0x3e2>
 8002abc:	4b90      	ldr	r3, [pc, #576]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002abe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ac0:	4b8f      	ldr	r3, [pc, #572]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ac8:	e01c      	b.n	8002b04 <HAL_RCC_OscConfig+0x41c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCC_OscConfig+0x404>
 8002ad2:	4b8b      	ldr	r3, [pc, #556]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002ad4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ad6:	4b8a      	ldr	r3, [pc, #552]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002ad8:	2104      	movs	r1, #4
 8002ada:	430a      	orrs	r2, r1
 8002adc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ade:	4b88      	ldr	r3, [pc, #544]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002ae0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ae2:	4b87      	ldr	r3, [pc, #540]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aea:	e00b      	b.n	8002b04 <HAL_RCC_OscConfig+0x41c>
 8002aec:	4b84      	ldr	r3, [pc, #528]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002aee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002af0:	4b83      	ldr	r3, [pc, #524]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002af2:	2101      	movs	r1, #1
 8002af4:	438a      	bics	r2, r1
 8002af6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002af8:	4b81      	ldr	r3, [pc, #516]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002afa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002afc:	4b80      	ldr	r3, [pc, #512]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002afe:	2104      	movs	r1, #4
 8002b00:	438a      	bics	r2, r1
 8002b02:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d014      	beq.n	8002b36 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7ff f8b0 	bl	8001c70 <HAL_GetTick>
 8002b10:	0003      	movs	r3, r0
 8002b12:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b14:	e009      	b.n	8002b2a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7ff f8ab 	bl	8001c70 <HAL_GetTick>
 8002b1a:	0002      	movs	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	4a79      	ldr	r2, [pc, #484]	@ (8002d08 <HAL_RCC_OscConfig+0x620>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e0e6      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2a:	4b75      	ldr	r3, [pc, #468]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2e:	2202      	movs	r2, #2
 8002b30:	4013      	ands	r3, r2
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x42e>
 8002b34:	e013      	b.n	8002b5e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7ff f89b 	bl	8001c70 <HAL_GetTick>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b3e:	e009      	b.n	8002b54 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7ff f896 	bl	8001c70 <HAL_GetTick>
 8002b44:	0002      	movs	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	4a6f      	ldr	r2, [pc, #444]	@ (8002d08 <HAL_RCC_OscConfig+0x620>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e0d1      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b54:	4b6a      	ldr	r3, [pc, #424]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b58:	2202      	movs	r2, #2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b5e:	231f      	movs	r3, #31
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b68:	4b65      	ldr	r3, [pc, #404]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b6c:	4b64      	ldr	r3, [pc, #400]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002b6e:	4967      	ldr	r1, [pc, #412]	@ (8002d0c <HAL_RCC_OscConfig+0x624>)
 8002b70:	400a      	ands	r2, r1
 8002b72:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d100      	bne.n	8002b7e <HAL_RCC_OscConfig+0x496>
 8002b7c:	e0bb      	b.n	8002cf6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b7e:	4b60      	ldr	r3, [pc, #384]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2238      	movs	r2, #56	@ 0x38
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d100      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4a4>
 8002b8a:	e07b      	b.n	8002c84 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d156      	bne.n	8002c42 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b94:	4b5a      	ldr	r3, [pc, #360]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b59      	ldr	r3, [pc, #356]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002b9a:	495d      	ldr	r1, [pc, #372]	@ (8002d10 <HAL_RCC_OscConfig+0x628>)
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7ff f866 	bl	8001c70 <HAL_GetTick>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002baa:	f7ff f861 	bl	8001c70 <HAL_GetTick>
 8002bae:	0002      	movs	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e09d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bbc:	4b50      	ldr	r3, [pc, #320]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	049b      	lsls	r3, r3, #18
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d1f0      	bne.n	8002baa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc8:	4b4d      	ldr	r3, [pc, #308]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a51      	ldr	r2, [pc, #324]	@ (8002d14 <HAL_RCC_OscConfig+0x62c>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1a      	ldr	r2, [r3, #32]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	4b42      	ldr	r3, [pc, #264]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfc:	4b40      	ldr	r3, [pc, #256]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b3f      	ldr	r3, [pc, #252]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002c02:	2180      	movs	r1, #128	@ 0x80
 8002c04:	0449      	lsls	r1, r1, #17
 8002c06:	430a      	orrs	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002c10:	2180      	movs	r1, #128	@ 0x80
 8002c12:	0549      	lsls	r1, r1, #21
 8002c14:	430a      	orrs	r2, r1
 8002c16:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7ff f82a 	bl	8001c70 <HAL_GetTick>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c22:	f7ff f825 	bl	8001c70 <HAL_GetTick>
 8002c26:	0002      	movs	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e061      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c34:	4b32      	ldr	r3, [pc, #200]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	049b      	lsls	r3, r3, #18
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x53a>
 8002c40:	e059      	b.n	8002cf6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c42:	4b2f      	ldr	r3, [pc, #188]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	4b2e      	ldr	r3, [pc, #184]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002c48:	4931      	ldr	r1, [pc, #196]	@ (8002d10 <HAL_RCC_OscConfig+0x628>)
 8002c4a:	400a      	ands	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7ff f80f 	bl	8001c70 <HAL_GetTick>
 8002c52:	0003      	movs	r3, r0
 8002c54:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7ff f80a 	bl	8001c70 <HAL_GetTick>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e046      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6a:	4b25      	ldr	r3, [pc, #148]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	2380      	movs	r3, #128	@ 0x80
 8002c70:	049b      	lsls	r3, r3, #18
 8002c72:	4013      	ands	r3, r2
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c76:	4b22      	ldr	r3, [pc, #136]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	4b21      	ldr	r3, [pc, #132]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002c7c:	4926      	ldr	r1, [pc, #152]	@ (8002d18 <HAL_RCC_OscConfig+0x630>)
 8002c7e:	400a      	ands	r2, r1
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	e038      	b.n	8002cf6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e033      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	@ (8002d00 <HAL_RCC_OscConfig+0x618>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d126      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2270      	movs	r2, #112	@ 0x70
 8002ca8:	401a      	ands	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d11f      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	23fe      	movs	r3, #254	@ 0xfe
 8002cb6:	01db      	lsls	r3, r3, #7
 8002cb8:	401a      	ands	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d116      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	23f8      	movs	r3, #248	@ 0xf8
 8002cc8:	039b      	lsls	r3, r3, #14
 8002cca:	401a      	ands	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d10e      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	23e0      	movs	r3, #224	@ 0xe0
 8002cd8:	051b      	lsls	r3, r3, #20
 8002cda:	401a      	ands	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	0f5b      	lsrs	r3, r3, #29
 8002ce8:	075a      	lsls	r2, r3, #29
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b008      	add	sp, #32
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40007000 	.word	0x40007000
 8002d08:	00001388 	.word	0x00001388
 8002d0c:	efffffff 	.word	0xefffffff
 8002d10:	feffffff 	.word	0xfeffffff
 8002d14:	11c1808c 	.word	0x11c1808c
 8002d18:	eefefffc 	.word	0xeefefffc

08002d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0e9      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b76      	ldr	r3, [pc, #472]	@ (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2207      	movs	r2, #7
 8002d36:	4013      	ands	r3, r2
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d91e      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b73      	ldr	r3, [pc, #460]	@ (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2207      	movs	r2, #7
 8002d44:	4393      	bics	r3, r2
 8002d46:	0019      	movs	r1, r3
 8002d48:	4b70      	ldr	r3, [pc, #448]	@ (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d50:	f7fe ff8e 	bl	8001c70 <HAL_GetTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d58:	e009      	b.n	8002d6e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5a:	f7fe ff89 	bl	8001c70 <HAL_GetTick>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	4a6a      	ldr	r2, [pc, #424]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0ca      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d6e:	4b67      	ldr	r3, [pc, #412]	@ (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2207      	movs	r2, #7
 8002d74:	4013      	ands	r3, r2
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1ee      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2202      	movs	r2, #2
 8002d82:	4013      	ands	r3, r2
 8002d84:	d015      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d006      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d90:	4b60      	ldr	r3, [pc, #384]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	4b5f      	ldr	r3, [pc, #380]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002d96:	21e0      	movs	r1, #224	@ 0xe0
 8002d98:	01c9      	lsls	r1, r1, #7
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	4a5d      	ldr	r2, [pc, #372]	@ (8002f18 <HAL_RCC_ClockConfig+0x1fc>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	0019      	movs	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	4b59      	ldr	r3, [pc, #356]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002dae:	430a      	orrs	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2201      	movs	r2, #1
 8002db8:	4013      	ands	r3, r2
 8002dba:	d057      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dc4:	4b53      	ldr	r3, [pc, #332]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	029b      	lsls	r3, r3, #10
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d12b      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e097      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ddc:	4b4d      	ldr	r3, [pc, #308]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	@ 0x80
 8002de2:	049b      	lsls	r3, r3, #18
 8002de4:	4013      	ands	r3, r2
 8002de6:	d11f      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e08b      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df4:	4b47      	ldr	r3, [pc, #284]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2380      	movs	r3, #128	@ 0x80
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d113      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e07f      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e0c:	4b41      	ldr	r3, [pc, #260]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e10:	2202      	movs	r2, #2
 8002e12:	4013      	ands	r3, r2
 8002e14:	d108      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e074      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1e:	2202      	movs	r2, #2
 8002e20:	4013      	ands	r3, r2
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e06d      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e28:	4b3a      	ldr	r3, [pc, #232]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2207      	movs	r2, #7
 8002e2e:	4393      	bics	r3, r2
 8002e30:	0019      	movs	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	4b37      	ldr	r3, [pc, #220]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e3c:	f7fe ff18 	bl	8001c70 <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e44:	e009      	b.n	8002e5a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e46:	f7fe ff13 	bl	8001c70 <HAL_GetTick>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	4a2f      	ldr	r2, [pc, #188]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e054      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2238      	movs	r2, #56	@ 0x38
 8002e60:	401a      	ands	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d1ec      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b27      	ldr	r3, [pc, #156]	@ (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2207      	movs	r2, #7
 8002e72:	4013      	ands	r3, r2
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d21e      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b24      	ldr	r3, [pc, #144]	@ (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2207      	movs	r2, #7
 8002e80:	4393      	bics	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	4b21      	ldr	r3, [pc, #132]	@ (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fef0 	bl	8001c70 <HAL_GetTick>
 8002e90:	0003      	movs	r3, r0
 8002e92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e94:	e009      	b.n	8002eaa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e96:	f7fe feeb 	bl	8001c70 <HAL_GetTick>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f10 <HAL_RCC_ClockConfig+0x1f4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e02c      	b.n	8002f04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eaa:	4b18      	ldr	r3, [pc, #96]	@ (8002f0c <HAL_RCC_ClockConfig+0x1f0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2207      	movs	r2, #7
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1ee      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec2:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	4a15      	ldr	r2, [pc, #84]	@ (8002f1c <HAL_RCC_ClockConfig+0x200>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	0019      	movs	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	4b10      	ldr	r3, [pc, #64]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ed6:	f000 f829 	bl	8002f2c <HAL_RCC_GetSysClockFreq>
 8002eda:	0001      	movs	r1, r0
 8002edc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <HAL_RCC_ClockConfig+0x1f8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	220f      	movs	r2, #15
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f20 <HAL_RCC_ClockConfig+0x204>)
 8002ee8:	0092      	lsls	r2, r2, #2
 8002eea:	58d3      	ldr	r3, [r2, r3]
 8002eec:	221f      	movs	r2, #31
 8002eee:	4013      	ands	r3, r2
 8002ef0:	000a      	movs	r2, r1
 8002ef2:	40da      	lsrs	r2, r3
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <HAL_RCC_ClockConfig+0x208>)
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <HAL_RCC_ClockConfig+0x20c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f7fe fe5b 	bl	8001bb8 <HAL_InitTick>
 8002f02:	0003      	movs	r3, r0
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b004      	add	sp, #16
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40022000 	.word	0x40022000
 8002f10:	00001388 	.word	0x00001388
 8002f14:	40021000 	.word	0x40021000
 8002f18:	fffff0ff 	.word	0xfffff0ff
 8002f1c:	ffff8fff 	.word	0xffff8fff
 8002f20:	08004318 	.word	0x08004318
 8002f24:	20000000 	.word	0x20000000
 8002f28:	20000008 	.word	0x20000008

08002f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f32:	4b3c      	ldr	r3, [pc, #240]	@ (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2238      	movs	r2, #56	@ 0x38
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d10f      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f3c:	4b39      	ldr	r3, [pc, #228]	@ (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0adb      	lsrs	r3, r3, #11
 8002f42:	2207      	movs	r2, #7
 8002f44:	4013      	ands	r3, r2
 8002f46:	2201      	movs	r2, #1
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	0013      	movs	r3, r2
 8002f4c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f4e:	6839      	ldr	r1, [r7, #0]
 8002f50:	4835      	ldr	r0, [pc, #212]	@ (8003028 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f52:	f7fd f8d7 	bl	8000104 <__udivsi3>
 8002f56:	0003      	movs	r3, r0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	e05d      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f5c:	4b31      	ldr	r3, [pc, #196]	@ (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2238      	movs	r2, #56	@ 0x38
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d102      	bne.n	8002f6e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f68:	4b30      	ldr	r3, [pc, #192]	@ (800302c <HAL_RCC_GetSysClockFreq+0x100>)
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	e054      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2238      	movs	r2, #56	@ 0x38
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d138      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2203      	movs	r2, #3
 8002f80:	4013      	ands	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f84:	4b27      	ldr	r3, [pc, #156]	@ (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	2207      	movs	r2, #7
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	3301      	adds	r3, #1
 8002f90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d10d      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	4824      	ldr	r0, [pc, #144]	@ (800302c <HAL_RCC_GetSysClockFreq+0x100>)
 8002f9c:	f7fd f8b2 	bl	8000104 <__udivsi3>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	227f      	movs	r2, #127	@ 0x7f
 8002fac:	4013      	ands	r3, r2
 8002fae:	434b      	muls	r3, r1
 8002fb0:	617b      	str	r3, [r7, #20]
        break;
 8002fb2:	e00d      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	481c      	ldr	r0, [pc, #112]	@ (8003028 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fb8:	f7fd f8a4 	bl	8000104 <__udivsi3>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	4b18      	ldr	r3, [pc, #96]	@ (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	227f      	movs	r2, #127	@ 0x7f
 8002fc8:	4013      	ands	r3, r2
 8002fca:	434b      	muls	r3, r1
 8002fcc:	617b      	str	r3, [r7, #20]
        break;
 8002fce:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002fd0:	4b14      	ldr	r3, [pc, #80]	@ (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0f5b      	lsrs	r3, r3, #29
 8002fd6:	2207      	movs	r2, #7
 8002fd8:	4013      	ands	r3, r2
 8002fda:	3301      	adds	r3, #1
 8002fdc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	6978      	ldr	r0, [r7, #20]
 8002fe2:	f7fd f88f 	bl	8000104 <__udivsi3>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e015      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002fec:	4b0d      	ldr	r3, [pc, #52]	@ (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2238      	movs	r2, #56	@ 0x38
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d103      	bne.n	8003000 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003000:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2238      	movs	r2, #56	@ 0x38
 8003006:	4013      	ands	r3, r2
 8003008:	2b18      	cmp	r3, #24
 800300a:	d103      	bne.n	8003014 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800300c:	23fa      	movs	r3, #250	@ 0xfa
 800300e:	01db      	lsls	r3, r3, #7
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	e001      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003018:	693b      	ldr	r3, [r7, #16]
}
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b006      	add	sp, #24
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			@ (mov r8, r8)
 8003024:	40021000 	.word	0x40021000
 8003028:	00f42400 	.word	0x00f42400
 800302c:	007a1200 	.word	0x007a1200

08003030 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b02      	ldr	r3, [pc, #8]	@ (8003040 <HAL_RCC_GetHCLKFreq+0x10>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	0018      	movs	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	20000000 	.word	0x20000000

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b5b0      	push	{r4, r5, r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003048:	f7ff fff2 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 800304c:	0004      	movs	r4, r0
 800304e:	f7ff fb3f 	bl	80026d0 <LL_RCC_GetAPB1Prescaler>
 8003052:	0003      	movs	r3, r0
 8003054:	0b1a      	lsrs	r2, r3, #12
 8003056:	4b05      	ldr	r3, [pc, #20]	@ (800306c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003058:	0092      	lsls	r2, r2, #2
 800305a:	58d3      	ldr	r3, [r2, r3]
 800305c:	221f      	movs	r2, #31
 800305e:	4013      	ands	r3, r2
 8003060:	40dc      	lsrs	r4, r3
 8003062:	0023      	movs	r3, r4
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	bdb0      	pop	{r4, r5, r7, pc}
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	08004358 	.word	0x08004358

08003070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e04a      	b.n	8003118 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	223d      	movs	r2, #61	@ 0x3d
 8003086:	5c9b      	ldrb	r3, [r3, r2]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d107      	bne.n	800309e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	223c      	movs	r2, #60	@ 0x3c
 8003092:	2100      	movs	r1, #0
 8003094:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	0018      	movs	r0, r3
 800309a:	f7fd fd05 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	223d      	movs	r2, #61	@ 0x3d
 80030a2:	2102      	movs	r1, #2
 80030a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	0019      	movs	r1, r3
 80030b0:	0010      	movs	r0, r2
 80030b2:	f000 fd43 	bl	8003b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2248      	movs	r2, #72	@ 0x48
 80030ba:	2101      	movs	r1, #1
 80030bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	223e      	movs	r2, #62	@ 0x3e
 80030c2:	2101      	movs	r1, #1
 80030c4:	5499      	strb	r1, [r3, r2]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	223f      	movs	r2, #63	@ 0x3f
 80030ca:	2101      	movs	r1, #1
 80030cc:	5499      	strb	r1, [r3, r2]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2240      	movs	r2, #64	@ 0x40
 80030d2:	2101      	movs	r1, #1
 80030d4:	5499      	strb	r1, [r3, r2]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2241      	movs	r2, #65	@ 0x41
 80030da:	2101      	movs	r1, #1
 80030dc:	5499      	strb	r1, [r3, r2]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2242      	movs	r2, #66	@ 0x42
 80030e2:	2101      	movs	r1, #1
 80030e4:	5499      	strb	r1, [r3, r2]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2243      	movs	r2, #67	@ 0x43
 80030ea:	2101      	movs	r1, #1
 80030ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2244      	movs	r2, #68	@ 0x44
 80030f2:	2101      	movs	r1, #1
 80030f4:	5499      	strb	r1, [r3, r2]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2245      	movs	r2, #69	@ 0x45
 80030fa:	2101      	movs	r1, #1
 80030fc:	5499      	strb	r1, [r3, r2]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2246      	movs	r2, #70	@ 0x46
 8003102:	2101      	movs	r1, #1
 8003104:	5499      	strb	r1, [r3, r2]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2247      	movs	r2, #71	@ 0x47
 800310a:	2101      	movs	r1, #1
 800310c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	223d      	movs	r2, #61	@ 0x3d
 8003112:	2101      	movs	r1, #1
 8003114:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e04a      	b.n	80031c8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	223d      	movs	r2, #61	@ 0x3d
 8003136:	5c9b      	ldrb	r3, [r3, r2]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d107      	bne.n	800314e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	223c      	movs	r2, #60	@ 0x3c
 8003142:	2100      	movs	r1, #0
 8003144:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	0018      	movs	r0, r3
 800314a:	f7fd fc61 	bl	8000a10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	223d      	movs	r2, #61	@ 0x3d
 8003152:	2102      	movs	r1, #2
 8003154:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3304      	adds	r3, #4
 800315e:	0019      	movs	r1, r3
 8003160:	0010      	movs	r0, r2
 8003162:	f000 fceb 	bl	8003b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2248      	movs	r2, #72	@ 0x48
 800316a:	2101      	movs	r1, #1
 800316c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	223e      	movs	r2, #62	@ 0x3e
 8003172:	2101      	movs	r1, #1
 8003174:	5499      	strb	r1, [r3, r2]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	223f      	movs	r2, #63	@ 0x3f
 800317a:	2101      	movs	r1, #1
 800317c:	5499      	strb	r1, [r3, r2]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2240      	movs	r2, #64	@ 0x40
 8003182:	2101      	movs	r1, #1
 8003184:	5499      	strb	r1, [r3, r2]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2241      	movs	r2, #65	@ 0x41
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2242      	movs	r2, #66	@ 0x42
 8003192:	2101      	movs	r1, #1
 8003194:	5499      	strb	r1, [r3, r2]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2243      	movs	r2, #67	@ 0x43
 800319a:	2101      	movs	r1, #1
 800319c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2244      	movs	r2, #68	@ 0x44
 80031a2:	2101      	movs	r1, #1
 80031a4:	5499      	strb	r1, [r3, r2]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2245      	movs	r2, #69	@ 0x45
 80031aa:	2101      	movs	r1, #1
 80031ac:	5499      	strb	r1, [r3, r2]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2246      	movs	r2, #70	@ 0x46
 80031b2:	2101      	movs	r1, #1
 80031b4:	5499      	strb	r1, [r3, r2]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2247      	movs	r2, #71	@ 0x47
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	223d      	movs	r2, #61	@ 0x3d
 80031c2:	2101      	movs	r1, #1
 80031c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d108      	bne.n	80031f2 <HAL_TIM_PWM_Start+0x22>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	223e      	movs	r2, #62	@ 0x3e
 80031e4:	5c9b      	ldrb	r3, [r3, r2]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	1e5a      	subs	r2, r3, #1
 80031ec:	4193      	sbcs	r3, r2
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	e037      	b.n	8003262 <HAL_TIM_PWM_Start+0x92>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d108      	bne.n	800320a <HAL_TIM_PWM_Start+0x3a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	223f      	movs	r2, #63	@ 0x3f
 80031fc:	5c9b      	ldrb	r3, [r3, r2]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	1e5a      	subs	r2, r3, #1
 8003204:	4193      	sbcs	r3, r2
 8003206:	b2db      	uxtb	r3, r3
 8003208:	e02b      	b.n	8003262 <HAL_TIM_PWM_Start+0x92>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d108      	bne.n	8003222 <HAL_TIM_PWM_Start+0x52>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2240      	movs	r2, #64	@ 0x40
 8003214:	5c9b      	ldrb	r3, [r3, r2]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	1e5a      	subs	r2, r3, #1
 800321c:	4193      	sbcs	r3, r2
 800321e:	b2db      	uxtb	r3, r3
 8003220:	e01f      	b.n	8003262 <HAL_TIM_PWM_Start+0x92>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b0c      	cmp	r3, #12
 8003226:	d108      	bne.n	800323a <HAL_TIM_PWM_Start+0x6a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2241      	movs	r2, #65	@ 0x41
 800322c:	5c9b      	ldrb	r3, [r3, r2]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	1e5a      	subs	r2, r3, #1
 8003234:	4193      	sbcs	r3, r2
 8003236:	b2db      	uxtb	r3, r3
 8003238:	e013      	b.n	8003262 <HAL_TIM_PWM_Start+0x92>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b10      	cmp	r3, #16
 800323e:	d108      	bne.n	8003252 <HAL_TIM_PWM_Start+0x82>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2242      	movs	r2, #66	@ 0x42
 8003244:	5c9b      	ldrb	r3, [r3, r2]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	1e5a      	subs	r2, r3, #1
 800324c:	4193      	sbcs	r3, r2
 800324e:	b2db      	uxtb	r3, r3
 8003250:	e007      	b.n	8003262 <HAL_TIM_PWM_Start+0x92>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2243      	movs	r2, #67	@ 0x43
 8003256:	5c9b      	ldrb	r3, [r3, r2]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	1e5a      	subs	r2, r3, #1
 800325e:	4193      	sbcs	r3, r2
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e081      	b.n	800336e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d104      	bne.n	800327a <HAL_TIM_PWM_Start+0xaa>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	223e      	movs	r2, #62	@ 0x3e
 8003274:	2102      	movs	r1, #2
 8003276:	5499      	strb	r1, [r3, r2]
 8003278:	e023      	b.n	80032c2 <HAL_TIM_PWM_Start+0xf2>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d104      	bne.n	800328a <HAL_TIM_PWM_Start+0xba>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	223f      	movs	r2, #63	@ 0x3f
 8003284:	2102      	movs	r1, #2
 8003286:	5499      	strb	r1, [r3, r2]
 8003288:	e01b      	b.n	80032c2 <HAL_TIM_PWM_Start+0xf2>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d104      	bne.n	800329a <HAL_TIM_PWM_Start+0xca>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2240      	movs	r2, #64	@ 0x40
 8003294:	2102      	movs	r1, #2
 8003296:	5499      	strb	r1, [r3, r2]
 8003298:	e013      	b.n	80032c2 <HAL_TIM_PWM_Start+0xf2>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b0c      	cmp	r3, #12
 800329e:	d104      	bne.n	80032aa <HAL_TIM_PWM_Start+0xda>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2241      	movs	r2, #65	@ 0x41
 80032a4:	2102      	movs	r1, #2
 80032a6:	5499      	strb	r1, [r3, r2]
 80032a8:	e00b      	b.n	80032c2 <HAL_TIM_PWM_Start+0xf2>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d104      	bne.n	80032ba <HAL_TIM_PWM_Start+0xea>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2242      	movs	r2, #66	@ 0x42
 80032b4:	2102      	movs	r1, #2
 80032b6:	5499      	strb	r1, [r3, r2]
 80032b8:	e003      	b.n	80032c2 <HAL_TIM_PWM_Start+0xf2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2243      	movs	r2, #67	@ 0x43
 80032be:	2102      	movs	r1, #2
 80032c0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6839      	ldr	r1, [r7, #0]
 80032c8:	2201      	movs	r2, #1
 80032ca:	0018      	movs	r0, r3
 80032cc:	f000 ff56 	bl	800417c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a28      	ldr	r2, [pc, #160]	@ (8003378 <HAL_TIM_PWM_Start+0x1a8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_TIM_PWM_Start+0x11e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a27      	ldr	r2, [pc, #156]	@ (800337c <HAL_TIM_PWM_Start+0x1ac>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_TIM_PWM_Start+0x11e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a25      	ldr	r2, [pc, #148]	@ (8003380 <HAL_TIM_PWM_Start+0x1b0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d101      	bne.n	80032f2 <HAL_TIM_PWM_Start+0x122>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_TIM_PWM_Start+0x124>
 80032f2:	2300      	movs	r3, #0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2180      	movs	r1, #128	@ 0x80
 8003304:	0209      	lsls	r1, r1, #8
 8003306:	430a      	orrs	r2, r1
 8003308:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1a      	ldr	r2, [pc, #104]	@ (8003378 <HAL_TIM_PWM_Start+0x1a8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00a      	beq.n	800332a <HAL_TIM_PWM_Start+0x15a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	2380      	movs	r3, #128	@ 0x80
 800331a:	05db      	lsls	r3, r3, #23
 800331c:	429a      	cmp	r2, r3
 800331e:	d004      	beq.n	800332a <HAL_TIM_PWM_Start+0x15a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a17      	ldr	r2, [pc, #92]	@ (8003384 <HAL_TIM_PWM_Start+0x1b4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d116      	bne.n	8003358 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4a15      	ldr	r2, [pc, #84]	@ (8003388 <HAL_TIM_PWM_Start+0x1b8>)
 8003332:	4013      	ands	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b06      	cmp	r3, #6
 800333a:	d016      	beq.n	800336a <HAL_TIM_PWM_Start+0x19a>
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	025b      	lsls	r3, r3, #9
 8003342:	429a      	cmp	r2, r3
 8003344:	d011      	beq.n	800336a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003356:	e008      	b.n	800336a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2101      	movs	r1, #1
 8003364:	430a      	orrs	r2, r1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e000      	b.n	800336c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	0018      	movs	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	b004      	add	sp, #16
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			@ (mov r8, r8)
 8003378:	40012c00 	.word	0x40012c00
 800337c:	40014400 	.word	0x40014400
 8003380:	40014800 	.word	0x40014800
 8003384:	40000400 	.word	0x40000400
 8003388:	00010007 	.word	0x00010007

0800338c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	001a      	movs	r2, r3
 800339a:	1cbb      	adds	r3, r7, #2
 800339c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800339e:	2317      	movs	r3, #23
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d108      	bne.n	80033be <HAL_TIM_PWM_Start_DMA+0x32>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	223e      	movs	r2, #62	@ 0x3e
 80033b0:	5c9b      	ldrb	r3, [r3, r2]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	3b02      	subs	r3, #2
 80033b6:	425a      	negs	r2, r3
 80033b8:	4153      	adcs	r3, r2
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	e037      	b.n	800342e <HAL_TIM_PWM_Start_DMA+0xa2>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d108      	bne.n	80033d6 <HAL_TIM_PWM_Start_DMA+0x4a>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	223f      	movs	r2, #63	@ 0x3f
 80033c8:	5c9b      	ldrb	r3, [r3, r2]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	3b02      	subs	r3, #2
 80033ce:	425a      	negs	r2, r3
 80033d0:	4153      	adcs	r3, r2
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	e02b      	b.n	800342e <HAL_TIM_PWM_Start_DMA+0xa2>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d108      	bne.n	80033ee <HAL_TIM_PWM_Start_DMA+0x62>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2240      	movs	r2, #64	@ 0x40
 80033e0:	5c9b      	ldrb	r3, [r3, r2]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	3b02      	subs	r3, #2
 80033e6:	425a      	negs	r2, r3
 80033e8:	4153      	adcs	r3, r2
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	e01f      	b.n	800342e <HAL_TIM_PWM_Start_DMA+0xa2>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b0c      	cmp	r3, #12
 80033f2:	d108      	bne.n	8003406 <HAL_TIM_PWM_Start_DMA+0x7a>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2241      	movs	r2, #65	@ 0x41
 80033f8:	5c9b      	ldrb	r3, [r3, r2]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	3b02      	subs	r3, #2
 80033fe:	425a      	negs	r2, r3
 8003400:	4153      	adcs	r3, r2
 8003402:	b2db      	uxtb	r3, r3
 8003404:	e013      	b.n	800342e <HAL_TIM_PWM_Start_DMA+0xa2>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b10      	cmp	r3, #16
 800340a:	d108      	bne.n	800341e <HAL_TIM_PWM_Start_DMA+0x92>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2242      	movs	r2, #66	@ 0x42
 8003410:	5c9b      	ldrb	r3, [r3, r2]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	3b02      	subs	r3, #2
 8003416:	425a      	negs	r2, r3
 8003418:	4153      	adcs	r3, r2
 800341a:	b2db      	uxtb	r3, r3
 800341c:	e007      	b.n	800342e <HAL_TIM_PWM_Start_DMA+0xa2>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2243      	movs	r2, #67	@ 0x43
 8003422:	5c9b      	ldrb	r3, [r3, r2]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	3b02      	subs	r3, #2
 8003428:	425a      	negs	r2, r3
 800342a:	4153      	adcs	r3, r2
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8003432:	2302      	movs	r3, #2
 8003434:	e189      	b.n	800374a <HAL_TIM_PWM_Start_DMA+0x3be>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d108      	bne.n	800344e <HAL_TIM_PWM_Start_DMA+0xc2>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	223e      	movs	r2, #62	@ 0x3e
 8003440:	5c9b      	ldrb	r3, [r3, r2]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	425a      	negs	r2, r3
 8003448:	4153      	adcs	r3, r2
 800344a:	b2db      	uxtb	r3, r3
 800344c:	e037      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0x132>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b04      	cmp	r3, #4
 8003452:	d108      	bne.n	8003466 <HAL_TIM_PWM_Start_DMA+0xda>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	223f      	movs	r2, #63	@ 0x3f
 8003458:	5c9b      	ldrb	r3, [r3, r2]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	425a      	negs	r2, r3
 8003460:	4153      	adcs	r3, r2
 8003462:	b2db      	uxtb	r3, r3
 8003464:	e02b      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0x132>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d108      	bne.n	800347e <HAL_TIM_PWM_Start_DMA+0xf2>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2240      	movs	r2, #64	@ 0x40
 8003470:	5c9b      	ldrb	r3, [r3, r2]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	425a      	negs	r2, r3
 8003478:	4153      	adcs	r3, r2
 800347a:	b2db      	uxtb	r3, r3
 800347c:	e01f      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0x132>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b0c      	cmp	r3, #12
 8003482:	d108      	bne.n	8003496 <HAL_TIM_PWM_Start_DMA+0x10a>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2241      	movs	r2, #65	@ 0x41
 8003488:	5c9b      	ldrb	r3, [r3, r2]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	425a      	negs	r2, r3
 8003490:	4153      	adcs	r3, r2
 8003492:	b2db      	uxtb	r3, r3
 8003494:	e013      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0x132>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b10      	cmp	r3, #16
 800349a:	d108      	bne.n	80034ae <HAL_TIM_PWM_Start_DMA+0x122>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2242      	movs	r2, #66	@ 0x42
 80034a0:	5c9b      	ldrb	r3, [r3, r2]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	425a      	negs	r2, r3
 80034a8:	4153      	adcs	r3, r2
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	e007      	b.n	80034be <HAL_TIM_PWM_Start_DMA+0x132>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2243      	movs	r2, #67	@ 0x43
 80034b2:	5c9b      	ldrb	r3, [r3, r2]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	425a      	negs	r2, r3
 80034ba:	4153      	adcs	r3, r2
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d035      	beq.n	800352e <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_TIM_PWM_Start_DMA+0x144>
 80034c8:	1cbb      	adds	r3, r7, #2
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e13a      	b.n	800374a <HAL_TIM_PWM_Start_DMA+0x3be>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d104      	bne.n	80034e4 <HAL_TIM_PWM_Start_DMA+0x158>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	223e      	movs	r2, #62	@ 0x3e
 80034de:	2102      	movs	r1, #2
 80034e0:	5499      	strb	r1, [r3, r2]
 80034e2:	e026      	b.n	8003532 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d104      	bne.n	80034f4 <HAL_TIM_PWM_Start_DMA+0x168>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	223f      	movs	r2, #63	@ 0x3f
 80034ee:	2102      	movs	r1, #2
 80034f0:	5499      	strb	r1, [r3, r2]
 80034f2:	e01e      	b.n	8003532 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d104      	bne.n	8003504 <HAL_TIM_PWM_Start_DMA+0x178>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2240      	movs	r2, #64	@ 0x40
 80034fe:	2102      	movs	r1, #2
 8003500:	5499      	strb	r1, [r3, r2]
 8003502:	e016      	b.n	8003532 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b0c      	cmp	r3, #12
 8003508:	d104      	bne.n	8003514 <HAL_TIM_PWM_Start_DMA+0x188>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2241      	movs	r2, #65	@ 0x41
 800350e:	2102      	movs	r1, #2
 8003510:	5499      	strb	r1, [r3, r2]
 8003512:	e00e      	b.n	8003532 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b10      	cmp	r3, #16
 8003518:	d104      	bne.n	8003524 <HAL_TIM_PWM_Start_DMA+0x198>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2242      	movs	r2, #66	@ 0x42
 800351e:	2102      	movs	r1, #2
 8003520:	5499      	strb	r1, [r3, r2]
 8003522:	e006      	b.n	8003532 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2243      	movs	r2, #67	@ 0x43
 8003528:	2102      	movs	r1, #2
 800352a:	5499      	strb	r1, [r3, r2]
 800352c:	e001      	b.n	8003532 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e10b      	b.n	800374a <HAL_TIM_PWM_Start_DMA+0x3be>
  }

  switch (Channel)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b0c      	cmp	r3, #12
 8003536:	d100      	bne.n	800353a <HAL_TIM_PWM_Start_DMA+0x1ae>
 8003538:	e080      	b.n	800363c <HAL_TIM_PWM_Start_DMA+0x2b0>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b0c      	cmp	r3, #12
 800353e:	d900      	bls.n	8003542 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8003540:	e0a1      	b.n	8003686 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d054      	beq.n	80035f2 <HAL_TIM_PWM_Start_DMA+0x266>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b08      	cmp	r3, #8
 800354c:	d900      	bls.n	8003550 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800354e:	e09a      	b.n	8003686 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_PWM_Start_DMA+0x1d2>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b04      	cmp	r3, #4
 800355a:	d025      	beq.n	80035a8 <HAL_TIM_PWM_Start_DMA+0x21c>
 800355c:	e093      	b.n	8003686 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	4a7c      	ldr	r2, [pc, #496]	@ (8003754 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003564:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	4a7b      	ldr	r2, [pc, #492]	@ (8003758 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800356c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	4a7a      	ldr	r2, [pc, #488]	@ (800375c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8003574:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3334      	adds	r3, #52	@ 0x34
 8003582:	001a      	movs	r2, r3
 8003584:	1cbb      	adds	r3, r7, #2
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	f7fe fce4 	bl	8001f54 <HAL_DMA_Start_IT>
 800358c:	1e03      	subs	r3, r0, #0
 800358e:	d001      	beq.n	8003594 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0da      	b.n	800374a <HAL_TIM_PWM_Start_DMA+0x3be>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2180      	movs	r1, #128	@ 0x80
 80035a0:	0089      	lsls	r1, r1, #2
 80035a2:	430a      	orrs	r2, r1
 80035a4:	60da      	str	r2, [r3, #12]
      break;
 80035a6:	e073      	b.n	8003690 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	4a69      	ldr	r2, [pc, #420]	@ (8003754 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80035ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b4:	4a68      	ldr	r2, [pc, #416]	@ (8003758 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80035b6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035bc:	4a67      	ldr	r2, [pc, #412]	@ (800375c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80035be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3338      	adds	r3, #56	@ 0x38
 80035cc:	001a      	movs	r2, r3
 80035ce:	1cbb      	adds	r3, r7, #2
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	f7fe fcbf 	bl	8001f54 <HAL_DMA_Start_IT>
 80035d6:	1e03      	subs	r3, r0, #0
 80035d8:	d001      	beq.n	80035de <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0b5      	b.n	800374a <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2180      	movs	r1, #128	@ 0x80
 80035ea:	00c9      	lsls	r1, r1, #3
 80035ec:	430a      	orrs	r2, r1
 80035ee:	60da      	str	r2, [r3, #12]
      break;
 80035f0:	e04e      	b.n	8003690 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f6:	4a57      	ldr	r2, [pc, #348]	@ (8003754 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80035f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fe:	4a56      	ldr	r2, [pc, #344]	@ (8003758 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8003600:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003606:	4a55      	ldr	r2, [pc, #340]	@ (800375c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8003608:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	333c      	adds	r3, #60	@ 0x3c
 8003616:	001a      	movs	r2, r3
 8003618:	1cbb      	adds	r3, r7, #2
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	f7fe fc9a 	bl	8001f54 <HAL_DMA_Start_IT>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d001      	beq.n	8003628 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e090      	b.n	800374a <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2180      	movs	r1, #128	@ 0x80
 8003634:	0109      	lsls	r1, r1, #4
 8003636:	430a      	orrs	r2, r1
 8003638:	60da      	str	r2, [r3, #12]
      break;
 800363a:	e029      	b.n	8003690 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003640:	4a44      	ldr	r2, [pc, #272]	@ (8003754 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003642:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003648:	4a43      	ldr	r2, [pc, #268]	@ (8003758 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800364a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003650:	4a42      	ldr	r2, [pc, #264]	@ (800375c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8003652:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3340      	adds	r3, #64	@ 0x40
 8003660:	001a      	movs	r2, r3
 8003662:	1cbb      	adds	r3, r7, #2
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	f7fe fc75 	bl	8001f54 <HAL_DMA_Start_IT>
 800366a:	1e03      	subs	r3, r0, #0
 800366c:	d001      	beq.n	8003672 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06b      	b.n	800374a <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2180      	movs	r1, #128	@ 0x80
 800367e:	0149      	lsls	r1, r1, #5
 8003680:	430a      	orrs	r2, r1
 8003682:	60da      	str	r2, [r3, #12]
      break;
 8003684:	e004      	b.n	8003690 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8003686:	2317      	movs	r3, #23
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
      break;
 800368e:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003690:	2317      	movs	r3, #23
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d154      	bne.n	8003744 <HAL_TIM_PWM_Start_DMA+0x3b8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	2201      	movs	r2, #1
 80036a2:	0018      	movs	r0, r3
 80036a4:	f000 fd6a 	bl	800417c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003760 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_TIM_PWM_Start_DMA+0x33a>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003764 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_TIM_PWM_Start_DMA+0x33a>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a29      	ldr	r2, [pc, #164]	@ (8003768 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_PWM_Start_DMA+0x33e>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_TIM_PWM_Start_DMA+0x340>
 80036ca:	2300      	movs	r3, #0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2180      	movs	r1, #128	@ 0x80
 80036dc:	0209      	lsls	r1, r1, #8
 80036de:	430a      	orrs	r2, r1
 80036e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003760 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00a      	beq.n	8003702 <HAL_TIM_PWM_Start_DMA+0x376>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	2380      	movs	r3, #128	@ 0x80
 80036f2:	05db      	lsls	r3, r3, #23
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d004      	beq.n	8003702 <HAL_TIM_PWM_Start_DMA+0x376>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1b      	ldr	r2, [pc, #108]	@ (800376c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d116      	bne.n	8003730 <HAL_TIM_PWM_Start_DMA+0x3a4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a19      	ldr	r2, [pc, #100]	@ (8003770 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800370a:	4013      	ands	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b06      	cmp	r3, #6
 8003712:	d016      	beq.n	8003742 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	2380      	movs	r3, #128	@ 0x80
 8003718:	025b      	lsls	r3, r3, #9
 800371a:	429a      	cmp	r2, r3
 800371c:	d011      	beq.n	8003742 <HAL_TIM_PWM_Start_DMA+0x3b6>
      {
        __HAL_TIM_ENABLE(htim);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2101      	movs	r1, #1
 800372a:	430a      	orrs	r2, r1
 800372c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372e:	e008      	b.n	8003742 <HAL_TIM_PWM_Start_DMA+0x3b6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2101      	movs	r1, #1
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	e000      	b.n	8003744 <HAL_TIM_PWM_Start_DMA+0x3b8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003744:	2317      	movs	r3, #23
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	781b      	ldrb	r3, [r3, #0]
}
 800374a:	0018      	movs	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	b006      	add	sp, #24
 8003750:	bd80      	pop	{r7, pc}
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	08003a29 	.word	0x08003a29
 8003758:	08003ad3 	.word	0x08003ad3
 800375c:	08003995 	.word	0x08003995
 8003760:	40012c00 	.word	0x40012c00
 8003764:	40014400 	.word	0x40014400
 8003768:	40014800 	.word	0x40014800
 800376c:	40000400 	.word	0x40000400
 8003770:	00010007 	.word	0x00010007

08003774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003780:	2317      	movs	r3, #23
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	223c      	movs	r2, #60	@ 0x3c
 800378c:	5c9b      	ldrb	r3, [r3, r2]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003792:	2302      	movs	r3, #2
 8003794:	e0e5      	b.n	8003962 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	223c      	movs	r2, #60	@ 0x3c
 800379a:	2101      	movs	r1, #1
 800379c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b14      	cmp	r3, #20
 80037a2:	d900      	bls.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80037a4:	e0d1      	b.n	800394a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	009a      	lsls	r2, r3, #2
 80037aa:	4b70      	ldr	r3, [pc, #448]	@ (800396c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80037ac:	18d3      	adds	r3, r2, r3
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	0011      	movs	r1, r2
 80037ba:	0018      	movs	r0, r3
 80037bc:	f000 fa42 	bl	8003c44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2108      	movs	r1, #8
 80037cc:	430a      	orrs	r2, r1
 80037ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2104      	movs	r1, #4
 80037dc:	438a      	bics	r2, r1
 80037de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6999      	ldr	r1, [r3, #24]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	619a      	str	r2, [r3, #24]
      break;
 80037f2:	e0af      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	0011      	movs	r1, r2
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 faa1 	bl	8003d44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699a      	ldr	r2, [r3, #24]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2180      	movs	r1, #128	@ 0x80
 800380e:	0109      	lsls	r1, r1, #4
 8003810:	430a      	orrs	r2, r1
 8003812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4954      	ldr	r1, [pc, #336]	@ (8003970 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003820:	400a      	ands	r2, r1
 8003822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6999      	ldr	r1, [r3, #24]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	021a      	lsls	r2, r3, #8
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	619a      	str	r2, [r3, #24]
      break;
 8003838:	e08c      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	0011      	movs	r1, r2
 8003842:	0018      	movs	r0, r3
 8003844:	f000 fafc 	bl	8003e40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2108      	movs	r1, #8
 8003854:	430a      	orrs	r2, r1
 8003856:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2104      	movs	r1, #4
 8003864:	438a      	bics	r2, r1
 8003866:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69d9      	ldr	r1, [r3, #28]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	61da      	str	r2, [r3, #28]
      break;
 800387a:	e06b      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	0011      	movs	r1, r2
 8003884:	0018      	movs	r0, r3
 8003886:	f000 fb5d 	bl	8003f44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2180      	movs	r1, #128	@ 0x80
 8003896:	0109      	lsls	r1, r1, #4
 8003898:	430a      	orrs	r2, r1
 800389a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4932      	ldr	r1, [pc, #200]	@ (8003970 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80038a8:	400a      	ands	r2, r1
 80038aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69d9      	ldr	r1, [r3, #28]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	021a      	lsls	r2, r3, #8
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	61da      	str	r2, [r3, #28]
      break;
 80038c0:	e048      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	0011      	movs	r1, r2
 80038ca:	0018      	movs	r0, r3
 80038cc:	f000 fb9e 	bl	800400c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2108      	movs	r1, #8
 80038dc:	430a      	orrs	r2, r1
 80038de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2104      	movs	r1, #4
 80038ec:	438a      	bics	r2, r1
 80038ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003902:	e027      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	0011      	movs	r1, r2
 800390c:	0018      	movs	r0, r3
 800390e:	f000 fbd7 	bl	80040c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2180      	movs	r1, #128	@ 0x80
 800391e:	0109      	lsls	r1, r1, #4
 8003920:	430a      	orrs	r2, r1
 8003922:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4910      	ldr	r1, [pc, #64]	@ (8003970 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003930:	400a      	ands	r2, r1
 8003932:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	021a      	lsls	r2, r3, #8
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003948:	e004      	b.n	8003954 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800394a:	2317      	movs	r3, #23
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
      break;
 8003952:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	223c      	movs	r2, #60	@ 0x3c
 8003958:	2100      	movs	r1, #0
 800395a:	5499      	strb	r1, [r3, r2]

  return status;
 800395c:	2317      	movs	r3, #23
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	781b      	ldrb	r3, [r3, #0]
}
 8003962:	0018      	movs	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	b006      	add	sp, #24
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	080043d4 	.word	0x080043d4
 8003970:	fffffbff 	.word	0xfffffbff

08003974 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800397c:	46c0      	nop			@ (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b002      	add	sp, #8
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800398c:	46c0      	nop			@ (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b002      	add	sp, #8
 8003992:	bd80      	pop	{r7, pc}

08003994 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d107      	bne.n	80039bc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	223e      	movs	r2, #62	@ 0x3e
 80039b6:	2101      	movs	r1, #1
 80039b8:	5499      	strb	r1, [r3, r2]
 80039ba:	e02a      	b.n	8003a12 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d107      	bne.n	80039d6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2202      	movs	r2, #2
 80039ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	223f      	movs	r2, #63	@ 0x3f
 80039d0:	2101      	movs	r1, #1
 80039d2:	5499      	strb	r1, [r3, r2]
 80039d4:	e01d      	b.n	8003a12 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d107      	bne.n	80039f0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2204      	movs	r2, #4
 80039e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2240      	movs	r2, #64	@ 0x40
 80039ea:	2101      	movs	r1, #1
 80039ec:	5499      	strb	r1, [r3, r2]
 80039ee:	e010      	b.n	8003a12 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d107      	bne.n	8003a0a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2208      	movs	r2, #8
 80039fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2241      	movs	r2, #65	@ 0x41
 8003a04:	2101      	movs	r1, #1
 8003a06:	5499      	strb	r1, [r3, r2]
 8003a08:	e003      	b.n	8003a12 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	223d      	movs	r2, #61	@ 0x3d
 8003a0e:	2101      	movs	r1, #1
 8003a10:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	0018      	movs	r0, r3
 8003a16:	f7ff ffb5 	bl	8003984 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
}
 8003a20:	46c0      	nop			@ (mov r8, r8)
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b004      	add	sp, #16
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d10b      	bne.n	8003a58 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d136      	bne.n	8003abc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	223e      	movs	r2, #62	@ 0x3e
 8003a52:	2101      	movs	r1, #1
 8003a54:	5499      	strb	r1, [r3, r2]
 8003a56:	e031      	b.n	8003abc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d10b      	bne.n	8003a7a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2202      	movs	r2, #2
 8003a66:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d125      	bne.n	8003abc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	223f      	movs	r2, #63	@ 0x3f
 8003a74:	2101      	movs	r1, #1
 8003a76:	5499      	strb	r1, [r3, r2]
 8003a78:	e020      	b.n	8003abc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d10b      	bne.n	8003a9c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2204      	movs	r2, #4
 8003a88:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d114      	bne.n	8003abc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2240      	movs	r2, #64	@ 0x40
 8003a96:	2101      	movs	r1, #1
 8003a98:	5499      	strb	r1, [r3, r2]
 8003a9a:	e00f      	b.n	8003abc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d10a      	bne.n	8003abc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d103      	bne.n	8003abc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2241      	movs	r2, #65	@ 0x41
 8003ab8:	2101      	movs	r1, #1
 8003aba:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f7fd fa64 	bl	8000f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	771a      	strb	r2, [r3, #28]
}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b004      	add	sp, #16
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d103      	bne.n	8003af2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	771a      	strb	r2, [r3, #28]
 8003af0:	e019      	b.n	8003b26 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d103      	bne.n	8003b04 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2202      	movs	r2, #2
 8003b00:	771a      	strb	r2, [r3, #28]
 8003b02:	e010      	b.n	8003b26 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d103      	bne.n	8003b16 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2204      	movs	r2, #4
 8003b12:	771a      	strb	r2, [r3, #28]
 8003b14:	e007      	b.n	8003b26 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d102      	bne.n	8003b26 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2208      	movs	r2, #8
 8003b24:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f7ff ff23 	bl	8003974 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	771a      	strb	r2, [r3, #28]
}
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b004      	add	sp, #16
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a37      	ldr	r2, [pc, #220]	@ (8003c2c <TIM_Base_SetConfig+0xf0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d008      	beq.n	8003b66 <TIM_Base_SetConfig+0x2a>
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	2380      	movs	r3, #128	@ 0x80
 8003b58:	05db      	lsls	r3, r3, #23
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d003      	beq.n	8003b66 <TIM_Base_SetConfig+0x2a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a33      	ldr	r2, [pc, #204]	@ (8003c30 <TIM_Base_SetConfig+0xf4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d108      	bne.n	8003b78 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2270      	movs	r2, #112	@ 0x70
 8003b6a:	4393      	bics	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c2c <TIM_Base_SetConfig+0xf0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d014      	beq.n	8003baa <TIM_Base_SetConfig+0x6e>
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	2380      	movs	r3, #128	@ 0x80
 8003b84:	05db      	lsls	r3, r3, #23
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d00f      	beq.n	8003baa <TIM_Base_SetConfig+0x6e>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a28      	ldr	r2, [pc, #160]	@ (8003c30 <TIM_Base_SetConfig+0xf4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00b      	beq.n	8003baa <TIM_Base_SetConfig+0x6e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a27      	ldr	r2, [pc, #156]	@ (8003c34 <TIM_Base_SetConfig+0xf8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d007      	beq.n	8003baa <TIM_Base_SetConfig+0x6e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a26      	ldr	r2, [pc, #152]	@ (8003c38 <TIM_Base_SetConfig+0xfc>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d003      	beq.n	8003baa <TIM_Base_SetConfig+0x6e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a25      	ldr	r2, [pc, #148]	@ (8003c3c <TIM_Base_SetConfig+0x100>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d108      	bne.n	8003bbc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a24      	ldr	r2, [pc, #144]	@ (8003c40 <TIM_Base_SetConfig+0x104>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2280      	movs	r2, #128	@ 0x80
 8003bc0:	4393      	bics	r3, r2
 8003bc2:	001a      	movs	r2, r3
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a11      	ldr	r2, [pc, #68]	@ (8003c2c <TIM_Base_SetConfig+0xf0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <TIM_Base_SetConfig+0xbe>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a12      	ldr	r2, [pc, #72]	@ (8003c38 <TIM_Base_SetConfig+0xfc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <TIM_Base_SetConfig+0xbe>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a11      	ldr	r2, [pc, #68]	@ (8003c3c <TIM_Base_SetConfig+0x100>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d103      	bne.n	8003c02 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d106      	bne.n	8003c22 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4393      	bics	r3, r2
 8003c1c:	001a      	movs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	611a      	str	r2, [r3, #16]
  }
}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b004      	add	sp, #16
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40002000 	.word	0x40002000
 8003c38:	40014400 	.word	0x40014400
 8003c3c:	40014800 	.word	0x40014800
 8003c40:	fffffcff 	.word	0xfffffcff

08003c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	4393      	bics	r3, r2
 8003c5c:	001a      	movs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a2e      	ldr	r2, [pc, #184]	@ (8003d2c <TIM_OC1_SetConfig+0xe8>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2203      	movs	r2, #3
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	4393      	bics	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a24      	ldr	r2, [pc, #144]	@ (8003d30 <TIM_OC1_SetConfig+0xec>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <TIM_OC1_SetConfig+0x6e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	@ (8003d34 <TIM_OC1_SetConfig+0xf0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_OC1_SetConfig+0x6e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a22      	ldr	r2, [pc, #136]	@ (8003d38 <TIM_OC1_SetConfig+0xf4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10c      	bne.n	8003ccc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	4393      	bics	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	4393      	bics	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a18      	ldr	r2, [pc, #96]	@ (8003d30 <TIM_OC1_SetConfig+0xec>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d007      	beq.n	8003ce4 <TIM_OC1_SetConfig+0xa0>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a17      	ldr	r2, [pc, #92]	@ (8003d34 <TIM_OC1_SetConfig+0xf0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d003      	beq.n	8003ce4 <TIM_OC1_SetConfig+0xa0>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a16      	ldr	r2, [pc, #88]	@ (8003d38 <TIM_OC1_SetConfig+0xf4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d111      	bne.n	8003d08 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4a15      	ldr	r2, [pc, #84]	@ (8003d3c <TIM_OC1_SetConfig+0xf8>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4a14      	ldr	r2, [pc, #80]	@ (8003d40 <TIM_OC1_SetConfig+0xfc>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b006      	add	sp, #24
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	fffeff8f 	.word	0xfffeff8f
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40014400 	.word	0x40014400
 8003d38:	40014800 	.word	0x40014800
 8003d3c:	fffffeff 	.word	0xfffffeff
 8003d40:	fffffdff 	.word	0xfffffdff

08003d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	4393      	bics	r3, r2
 8003d5c:	001a      	movs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4a2c      	ldr	r2, [pc, #176]	@ (8003e24 <TIM_OC2_SetConfig+0xe0>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4a2b      	ldr	r2, [pc, #172]	@ (8003e28 <TIM_OC2_SetConfig+0xe4>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	4393      	bics	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a22      	ldr	r2, [pc, #136]	@ (8003e2c <TIM_OC2_SetConfig+0xe8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d10d      	bne.n	8003dc2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2280      	movs	r2, #128	@ 0x80
 8003daa:	4393      	bics	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2240      	movs	r2, #64	@ 0x40
 8003dbe:	4393      	bics	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a19      	ldr	r2, [pc, #100]	@ (8003e2c <TIM_OC2_SetConfig+0xe8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d007      	beq.n	8003dda <TIM_OC2_SetConfig+0x96>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a18      	ldr	r2, [pc, #96]	@ (8003e30 <TIM_OC2_SetConfig+0xec>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d003      	beq.n	8003dda <TIM_OC2_SetConfig+0x96>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a17      	ldr	r2, [pc, #92]	@ (8003e34 <TIM_OC2_SetConfig+0xf0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d113      	bne.n	8003e02 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4a16      	ldr	r2, [pc, #88]	@ (8003e38 <TIM_OC2_SetConfig+0xf4>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4a15      	ldr	r2, [pc, #84]	@ (8003e3c <TIM_OC2_SetConfig+0xf8>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	621a      	str	r2, [r3, #32]
}
 8003e1c:	46c0      	nop			@ (mov r8, r8)
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b006      	add	sp, #24
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	feff8fff 	.word	0xfeff8fff
 8003e28:	fffffcff 	.word	0xfffffcff
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800
 8003e38:	fffffbff 	.word	0xfffffbff
 8003e3c:	fffff7ff 	.word	0xfffff7ff

08003e40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	4a31      	ldr	r2, [pc, #196]	@ (8003f1c <TIM_OC3_SetConfig+0xdc>)
 8003e56:	401a      	ands	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8003f20 <TIM_OC3_SetConfig+0xe0>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2203      	movs	r2, #3
 8003e74:	4393      	bics	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	4a27      	ldr	r2, [pc, #156]	@ (8003f24 <TIM_OC3_SetConfig+0xe4>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a23      	ldr	r2, [pc, #140]	@ (8003f28 <TIM_OC3_SetConfig+0xe8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d10d      	bne.n	8003eba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	4a22      	ldr	r2, [pc, #136]	@ (8003f2c <TIM_OC3_SetConfig+0xec>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8003f30 <TIM_OC3_SetConfig+0xf0>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8003f28 <TIM_OC3_SetConfig+0xe8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d007      	beq.n	8003ed2 <TIM_OC3_SetConfig+0x92>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f34 <TIM_OC3_SetConfig+0xf4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d003      	beq.n	8003ed2 <TIM_OC3_SetConfig+0x92>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8003f38 <TIM_OC3_SetConfig+0xf8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d113      	bne.n	8003efa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4a19      	ldr	r2, [pc, #100]	@ (8003f3c <TIM_OC3_SetConfig+0xfc>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4a18      	ldr	r2, [pc, #96]	@ (8003f40 <TIM_OC3_SetConfig+0x100>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	621a      	str	r2, [r3, #32]
}
 8003f14:	46c0      	nop			@ (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b006      	add	sp, #24
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	fffffeff 	.word	0xfffffeff
 8003f20:	fffeff8f 	.word	0xfffeff8f
 8003f24:	fffffdff 	.word	0xfffffdff
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	fffff7ff 	.word	0xfffff7ff
 8003f30:	fffffbff 	.word	0xfffffbff
 8003f34:	40014400 	.word	0x40014400
 8003f38:	40014800 	.word	0x40014800
 8003f3c:	ffffefff 	.word	0xffffefff
 8003f40:	ffffdfff 	.word	0xffffdfff

08003f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	4a24      	ldr	r2, [pc, #144]	@ (8003fec <TIM_OC4_SetConfig+0xa8>)
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4a20      	ldr	r2, [pc, #128]	@ (8003ff0 <TIM_OC4_SetConfig+0xac>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff4 <TIM_OC4_SetConfig+0xb0>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff8 <TIM_OC4_SetConfig+0xb4>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	031b      	lsls	r3, r3, #12
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a17      	ldr	r2, [pc, #92]	@ (8003ffc <TIM_OC4_SetConfig+0xb8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d007      	beq.n	8003fb4 <TIM_OC4_SetConfig+0x70>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a16      	ldr	r2, [pc, #88]	@ (8004000 <TIM_OC4_SetConfig+0xbc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_OC4_SetConfig+0x70>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a15      	ldr	r2, [pc, #84]	@ (8004004 <TIM_OC4_SetConfig+0xc0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d109      	bne.n	8003fc8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	4a14      	ldr	r2, [pc, #80]	@ (8004008 <TIM_OC4_SetConfig+0xc4>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	019b      	lsls	r3, r3, #6
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b006      	add	sp, #24
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	ffffefff 	.word	0xffffefff
 8003ff0:	feff8fff 	.word	0xfeff8fff
 8003ff4:	fffffcff 	.word	0xfffffcff
 8003ff8:	ffffdfff 	.word	0xffffdfff
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40014400 	.word	0x40014400
 8004004:	40014800 	.word	0x40014800
 8004008:	ffffbfff 	.word	0xffffbfff

0800400c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	4a21      	ldr	r2, [pc, #132]	@ (80040a8 <TIM_OC5_SetConfig+0x9c>)
 8004022:	401a      	ands	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4a1d      	ldr	r2, [pc, #116]	@ (80040ac <TIM_OC5_SetConfig+0xa0>)
 8004038:	4013      	ands	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4a19      	ldr	r2, [pc, #100]	@ (80040b0 <TIM_OC5_SetConfig+0xa4>)
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a15      	ldr	r2, [pc, #84]	@ (80040b4 <TIM_OC5_SetConfig+0xa8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <TIM_OC5_SetConfig+0x66>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a14      	ldr	r2, [pc, #80]	@ (80040b8 <TIM_OC5_SetConfig+0xac>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <TIM_OC5_SetConfig+0x66>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a13      	ldr	r2, [pc, #76]	@ (80040bc <TIM_OC5_SetConfig+0xb0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d109      	bne.n	8004086 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	4a0c      	ldr	r2, [pc, #48]	@ (80040a8 <TIM_OC5_SetConfig+0x9c>)
 8004076:	4013      	ands	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	621a      	str	r2, [r3, #32]
}
 80040a0:	46c0      	nop			@ (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b006      	add	sp, #24
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	fffeffff 	.word	0xfffeffff
 80040ac:	fffeff8f 	.word	0xfffeff8f
 80040b0:	fffdffff 	.word	0xfffdffff
 80040b4:	40012c00 	.word	0x40012c00
 80040b8:	40014400 	.word	0x40014400
 80040bc:	40014800 	.word	0x40014800

080040c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	4a22      	ldr	r2, [pc, #136]	@ (8004160 <TIM_OC6_SetConfig+0xa0>)
 80040d6:	401a      	ands	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004164 <TIM_OC6_SetConfig+0xa4>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004168 <TIM_OC6_SetConfig+0xa8>)
 8004100:	4013      	ands	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	051b      	lsls	r3, r3, #20
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a16      	ldr	r2, [pc, #88]	@ (800416c <TIM_OC6_SetConfig+0xac>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d007      	beq.n	8004128 <TIM_OC6_SetConfig+0x68>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a15      	ldr	r2, [pc, #84]	@ (8004170 <TIM_OC6_SetConfig+0xb0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_OC6_SetConfig+0x68>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a14      	ldr	r2, [pc, #80]	@ (8004174 <TIM_OC6_SetConfig+0xb4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d109      	bne.n	800413c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	4a13      	ldr	r2, [pc, #76]	@ (8004178 <TIM_OC6_SetConfig+0xb8>)
 800412c:	4013      	ands	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	029b      	lsls	r3, r3, #10
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	46c0      	nop			@ (mov r8, r8)
 8004158:	46bd      	mov	sp, r7
 800415a:	b006      	add	sp, #24
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	ffefffff 	.word	0xffefffff
 8004164:	feff8fff 	.word	0xfeff8fff
 8004168:	ffdfffff 	.word	0xffdfffff
 800416c:	40012c00 	.word	0x40012c00
 8004170:	40014400 	.word	0x40014400
 8004174:	40014800 	.word	0x40014800
 8004178:	fffbffff 	.word	0xfffbffff

0800417c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	221f      	movs	r2, #31
 800418c:	4013      	ands	r3, r2
 800418e:	2201      	movs	r2, #1
 8004190:	409a      	lsls	r2, r3
 8004192:	0013      	movs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	43d2      	mvns	r2, r2
 800419e:	401a      	ands	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1a      	ldr	r2, [r3, #32]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	211f      	movs	r1, #31
 80041ac:	400b      	ands	r3, r1
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	4099      	lsls	r1, r3
 80041b2:	000b      	movs	r3, r1
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	46c0      	nop			@ (mov r8, r8)
 80041bc:	46bd      	mov	sp, r7
 80041be:	b006      	add	sp, #24
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	223c      	movs	r2, #60	@ 0x3c
 80041d2:	5c9b      	ldrb	r3, [r3, r2]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041d8:	2302      	movs	r3, #2
 80041da:	e050      	b.n	800427e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	223c      	movs	r2, #60	@ 0x3c
 80041e0:	2101      	movs	r1, #1
 80041e2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	223d      	movs	r2, #61	@ 0x3d
 80041e8:	2102      	movs	r1, #2
 80041ea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a21      	ldr	r2, [pc, #132]	@ (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d108      	bne.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4a20      	ldr	r2, [pc, #128]	@ (800428c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800420a:	4013      	ands	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2270      	movs	r2, #112	@ 0x70
 800421c:	4393      	bics	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a14      	ldr	r2, [pc, #80]	@ (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00a      	beq.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	2380      	movs	r3, #128	@ 0x80
 8004242:	05db      	lsls	r3, r3, #23
 8004244:	429a      	cmp	r2, r3
 8004246:	d004      	beq.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a10      	ldr	r2, [pc, #64]	@ (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d10c      	bne.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2280      	movs	r2, #128	@ 0x80
 8004256:	4393      	bics	r3, r2
 8004258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	4313      	orrs	r3, r2
 8004262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	223d      	movs	r2, #61	@ 0x3d
 8004270:	2101      	movs	r1, #1
 8004272:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	223c      	movs	r2, #60	@ 0x3c
 8004278:	2100      	movs	r1, #0
 800427a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	0018      	movs	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	b004      	add	sp, #16
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			@ (mov r8, r8)
 8004288:	40012c00 	.word	0x40012c00
 800428c:	ff0fffff 	.word	0xff0fffff
 8004290:	40000400 	.word	0x40000400

08004294 <memset>:
 8004294:	0003      	movs	r3, r0
 8004296:	1882      	adds	r2, r0, r2
 8004298:	4293      	cmp	r3, r2
 800429a:	d100      	bne.n	800429e <memset+0xa>
 800429c:	4770      	bx	lr
 800429e:	7019      	strb	r1, [r3, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	e7f9      	b.n	8004298 <memset+0x4>

080042a4 <__libc_init_array>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	2600      	movs	r6, #0
 80042a8:	4c0c      	ldr	r4, [pc, #48]	@ (80042dc <__libc_init_array+0x38>)
 80042aa:	4d0d      	ldr	r5, [pc, #52]	@ (80042e0 <__libc_init_array+0x3c>)
 80042ac:	1b64      	subs	r4, r4, r5
 80042ae:	10a4      	asrs	r4, r4, #2
 80042b0:	42a6      	cmp	r6, r4
 80042b2:	d109      	bne.n	80042c8 <__libc_init_array+0x24>
 80042b4:	2600      	movs	r6, #0
 80042b6:	f000 f823 	bl	8004300 <_init>
 80042ba:	4c0a      	ldr	r4, [pc, #40]	@ (80042e4 <__libc_init_array+0x40>)
 80042bc:	4d0a      	ldr	r5, [pc, #40]	@ (80042e8 <__libc_init_array+0x44>)
 80042be:	1b64      	subs	r4, r4, r5
 80042c0:	10a4      	asrs	r4, r4, #2
 80042c2:	42a6      	cmp	r6, r4
 80042c4:	d105      	bne.n	80042d2 <__libc_init_array+0x2e>
 80042c6:	bd70      	pop	{r4, r5, r6, pc}
 80042c8:	00b3      	lsls	r3, r6, #2
 80042ca:	58eb      	ldr	r3, [r5, r3]
 80042cc:	4798      	blx	r3
 80042ce:	3601      	adds	r6, #1
 80042d0:	e7ee      	b.n	80042b0 <__libc_init_array+0xc>
 80042d2:	00b3      	lsls	r3, r6, #2
 80042d4:	58eb      	ldr	r3, [r5, r3]
 80042d6:	4798      	blx	r3
 80042d8:	3601      	adds	r6, #1
 80042da:	e7f2      	b.n	80042c2 <__libc_init_array+0x1e>
 80042dc:	08004428 	.word	0x08004428
 80042e0:	08004428 	.word	0x08004428
 80042e4:	0800442c 	.word	0x0800442c
 80042e8:	08004428 	.word	0x08004428

080042ec <memcpy>:
 80042ec:	2300      	movs	r3, #0
 80042ee:	b510      	push	{r4, lr}
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d100      	bne.n	80042f6 <memcpy+0xa>
 80042f4:	bd10      	pop	{r4, pc}
 80042f6:	5ccc      	ldrb	r4, [r1, r3]
 80042f8:	54c4      	strb	r4, [r0, r3]
 80042fa:	3301      	adds	r3, #1
 80042fc:	e7f8      	b.n	80042f0 <memcpy+0x4>
	...

08004300 <_init>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr

0800430c <_fini>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	46c0      	nop			@ (mov r8, r8)
 8004310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004312:	bc08      	pop	{r3}
 8004314:	469e      	mov	lr, r3
 8004316:	4770      	bx	lr
