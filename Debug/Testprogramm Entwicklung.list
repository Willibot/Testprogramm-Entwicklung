
Testprogramm Entwicklung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003824  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080038e0  080038e0  000048e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039cc  080039cc  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080039cc  080039cc  0000501c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080039cc  080039cc  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039cc  080039cc  000049cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039d0  080039d0  000049d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080039d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  2000001c  080039f0  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  080039f0  00005408  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5bd  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de4  00000000  00000000  00010601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  000133e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096c  00000000  00000000  000140a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c4a  00000000  00000000  00014a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122cc  00000000  00000000  00017656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d3bf  00000000  00000000  00029922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6ce1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b8  00000000  00000000  000b6d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000b95dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080038c8 	.word	0x080038c8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	080038c8 	.word	0x080038c8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <MX_GPIO_Init>:
     PB5   ------> SPI1_MOSI
     PB7   ------> I2C1_SDA
     PB8   ------> I2C1_SCL
*/
void MX_GPIO_Init(void)
{
 80003f0:	b590      	push	{r4, r7, lr}
 80003f2:	b089      	sub	sp, #36	@ 0x24
 80003f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	240c      	movs	r4, #12
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	0018      	movs	r0, r3
 80003fc:	2314      	movs	r3, #20
 80003fe:	001a      	movs	r2, r3
 8000400:	2100      	movs	r1, #0
 8000402:	f003 fa2a 	bl	800385a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000406:	4b74      	ldr	r3, [pc, #464]	@ (80005d8 <MX_GPIO_Init+0x1e8>)
 8000408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800040a:	4b73      	ldr	r3, [pc, #460]	@ (80005d8 <MX_GPIO_Init+0x1e8>)
 800040c:	2104      	movs	r1, #4
 800040e:	430a      	orrs	r2, r1
 8000410:	635a      	str	r2, [r3, #52]	@ 0x34
 8000412:	4b71      	ldr	r3, [pc, #452]	@ (80005d8 <MX_GPIO_Init+0x1e8>)
 8000414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000416:	2204      	movs	r2, #4
 8000418:	4013      	ands	r3, r2
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b6e      	ldr	r3, [pc, #440]	@ (80005d8 <MX_GPIO_Init+0x1e8>)
 8000420:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000422:	4b6d      	ldr	r3, [pc, #436]	@ (80005d8 <MX_GPIO_Init+0x1e8>)
 8000424:	2101      	movs	r1, #1
 8000426:	430a      	orrs	r2, r1
 8000428:	635a      	str	r2, [r3, #52]	@ 0x34
 800042a:	4b6b      	ldr	r3, [pc, #428]	@ (80005d8 <MX_GPIO_Init+0x1e8>)
 800042c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800042e:	2201      	movs	r2, #1
 8000430:	4013      	ands	r3, r2
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4b68      	ldr	r3, [pc, #416]	@ (80005d8 <MX_GPIO_Init+0x1e8>)
 8000438:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800043a:	4b67      	ldr	r3, [pc, #412]	@ (80005d8 <MX_GPIO_Init+0x1e8>)
 800043c:	2102      	movs	r1, #2
 800043e:	430a      	orrs	r2, r1
 8000440:	635a      	str	r2, [r3, #52]	@ 0x34
 8000442:	4b65      	ldr	r3, [pc, #404]	@ (80005d8 <MX_GPIO_Init+0x1e8>)
 8000444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000446:	2202      	movs	r2, #2
 8000448:	4013      	ands	r3, r2
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800044e:	23c8      	movs	r3, #200	@ 0xc8
 8000450:	0159      	lsls	r1, r3, #5
 8000452:	23a0      	movs	r3, #160	@ 0xa0
 8000454:	05db      	lsls	r3, r3, #23
 8000456:	2200      	movs	r2, #0
 8000458:	0018      	movs	r0, r3
 800045a:	f001 fe33 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800045e:	4b5f      	ldr	r3, [pc, #380]	@ (80005dc <MX_GPIO_Init+0x1ec>)
 8000460:	2200      	movs	r2, #0
 8000462:	2140      	movs	r1, #64	@ 0x40
 8000464:	0018      	movs	r0, r3
 8000466:	f001 fe2d 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	4a5c      	ldr	r2, [pc, #368]	@ (80005e0 <MX_GPIO_Init+0x1f0>)
 800046e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2203      	movs	r2, #3
 8000474:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800047c:	193b      	adds	r3, r7, r4
 800047e:	4a59      	ldr	r2, [pc, #356]	@ (80005e4 <MX_GPIO_Init+0x1f4>)
 8000480:	0019      	movs	r1, r3
 8000482:	0010      	movs	r0, r2
 8000484:	f001 fcba 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA5 PA6
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 8000488:	193b      	adds	r3, r7, r4
 800048a:	4a57      	ldr	r2, [pc, #348]	@ (80005e8 <MX_GPIO_Init+0x1f8>)
 800048c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2203      	movs	r2, #3
 8000492:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	193a      	adds	r2, r7, r4
 800049c:	23a0      	movs	r3, #160	@ 0xa0
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 fcaa 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2202      	movs	r2, #2
 80004ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2284      	movs	r2, #132	@ 0x84
 80004b2:	0392      	lsls	r2, r2, #14
 80004b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	193a      	adds	r2, r7, r4
 80004be:	23a0      	movs	r3, #160	@ 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fc99 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2208      	movs	r2, #8
 80004ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	193a      	adds	r2, r7, r4
 80004de:	23a0      	movs	r3, #160	@ 0xa0
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	0011      	movs	r1, r2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fc89 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	2201      	movs	r2, #1
 80004ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	2203      	movs	r2, #3
 80004f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	4a37      	ldr	r2, [pc, #220]	@ (80005dc <MX_GPIO_Init+0x1ec>)
 8000500:	0019      	movs	r1, r3
 8000502:	0010      	movs	r0, r2
 8000504:	f001 fc7a 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2202      	movs	r2, #2
 800050c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2200      	movs	r2, #0
 8000512:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051a:	193b      	adds	r3, r7, r4
 800051c:	4a2f      	ldr	r2, [pc, #188]	@ (80005dc <MX_GPIO_Init+0x1ec>)
 800051e:	0019      	movs	r1, r3
 8000520:	0010      	movs	r0, r2
 8000522:	f001 fc6b 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000526:	0021      	movs	r1, r4
 8000528:	187b      	adds	r3, r7, r1
 800052a:	22c8      	movs	r2, #200	@ 0xc8
 800052c:	0152      	lsls	r2, r2, #5
 800052e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	000c      	movs	r4, r1
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2201      	movs	r2, #1
 8000536:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	193a      	adds	r2, r7, r4
 8000546:	23a0      	movs	r3, #160	@ 0xa0
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	0011      	movs	r1, r2
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fc55 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000552:	193b      	adds	r3, r7, r4
 8000554:	2238      	movs	r2, #56	@ 0x38
 8000556:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000558:	193b      	adds	r3, r7, r4
 800055a:	2202      	movs	r2, #2
 800055c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000570:	193b      	adds	r3, r7, r4
 8000572:	4a1a      	ldr	r2, [pc, #104]	@ (80005dc <MX_GPIO_Init+0x1ec>)
 8000574:	0019      	movs	r1, r3
 8000576:	0010      	movs	r0, r2
 8000578:	f001 fc40 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2240      	movs	r2, #64	@ 0x40
 8000580:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	193b      	adds	r3, r7, r4
 8000584:	2201      	movs	r2, #1
 8000586:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	193b      	adds	r3, r7, r4
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	193b      	adds	r3, r7, r4
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000594:	193b      	adds	r3, r7, r4
 8000596:	4a11      	ldr	r2, [pc, #68]	@ (80005dc <MX_GPIO_Init+0x1ec>)
 8000598:	0019      	movs	r1, r3
 800059a:	0010      	movs	r0, r2
 800059c:	f001 fc2e 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80005a0:	0021      	movs	r1, r4
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	22c0      	movs	r2, #192	@ 0xc0
 80005a6:	0052      	lsls	r2, r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2212      	movs	r2, #18
 80005ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2206      	movs	r2, #6
 80005c0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	4a05      	ldr	r2, [pc, #20]	@ (80005dc <MX_GPIO_Init+0x1ec>)
 80005c6:	0019      	movs	r1, r3
 80005c8:	0010      	movs	r0, r2
 80005ca:	f001 fc17 	bl	8001dfc <HAL_GPIO_Init>

}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b009      	add	sp, #36	@ 0x24
 80005d4:	bd90      	pop	{r4, r7, pc}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	40021000 	.word	0x40021000
 80005dc:	50000400 	.word	0x50000400
 80005e0:	0000c040 	.word	0x0000c040
 80005e4:	50000800 	.word	0x50000800
 80005e8:	00008065 	.word	0x00008065

080005ec <EXTI0_1_IRQHandler>:
// Eigene GPIO-Initialisierungen oder spezielle Pin-Setups können hier ergänzt werden.
// Beispiel: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // DRV8904 aktivieren
/* USER CODE END 2 */

void EXTI0_1_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80005f0:	2002      	movs	r0, #2
 80005f2:	f001 fd85 	bl	8002100 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <MX_NVIC_Init>:

  /* USER CODE END HAL_GPIO_EXTI_Callback 1 */
}

void MX_NVIC_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* Configure EXTI line 0-1 interrupt */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	2005      	movs	r0, #5
 8000606:	f001 fa3b 	bl	8001a80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800060a:	2005      	movs	r0, #5
 800060c:	f001 fa4d 	bl	8001aaa <HAL_NVIC_EnableIRQ>
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f001 f8da 	bl	80017d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f846 	bl	80006b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f7ff fee4 	bl	80003f0 <MX_GPIO_Init>
  MX_NVIC_Init();
 8000628:	f7ff ffe8 	bl	80005fc <MX_NVIC_Init>
  MX_TIM14_Init();
 800062c:	f000 f8f4 	bl	8000818 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  led_effect_engine_init();
 8000630:	f000 fdec 	bl	800120c <led_effect_engine_init>
  led_effect_engine_set(LED_EFFECT_SOLID);
 8000634:	2001      	movs	r0, #1
 8000636:	f000 fdf3 	bl	8001220 <led_effect_engine_set>

  // Test: Piezo direkt ansteuern
  sound_engine_play(SOUND_BEEP);
 800063a:	2001      	movs	r0, #1
 800063c:	f001 f858 	bl	80016f0 <sound_engine_play>

  /* USER CODE END 2 */

  /* Direkt nach MX_TIM14_Init(); */
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000640:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <main+0x90>)
 8000642:	2100      	movs	r1, #0
 8000644:	0018      	movs	r0, r3
 8000646:	f002 fb61 	bl	8002d0c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 5); // 50% Dutycycle (bei Period=9)
 800064a:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <main+0x90>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2205      	movs	r2, #5
 8000650:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_Delay(5000); // 5 Sekunden Signal an PA4
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <main+0x94>)
 8000654:	0018      	movs	r0, r3
 8000656:	f001 f943 	bl	80018e0 <HAL_Delay>
  HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 800065a:	4b13      	ldr	r3, [pc, #76]	@ (80006a8 <main+0x90>)
 800065c:	2100      	movs	r1, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f002 fc32 	bl	8002ec8 <HAL_TIM_PWM_Stop>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    sound_engine_tick();
 8000664:	f001 f854 	bl	8001710 <sound_engine_tick>
    led_effect_engine_update(HAL_GetTick());
 8000668:	f001 f930 	bl	80018cc <HAL_GetTick>
 800066c:	0003      	movs	r3, r0
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fde6 	bl	8001240 <led_effect_engine_update>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000674:	23a0      	movs	r3, #160	@ 0xa0
 8000676:	05db      	lsls	r3, r3, #23
 8000678:	2201      	movs	r2, #1
 800067a:	2110      	movs	r1, #16
 800067c:	0018      	movs	r0, r3
 800067e:	f001 fd21 	bl	80020c4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000682:	23fa      	movs	r3, #250	@ 0xfa
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	0018      	movs	r0, r3
 8000688:	f001 f92a 	bl	80018e0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800068c:	23a0      	movs	r3, #160	@ 0xa0
 800068e:	05db      	lsls	r3, r3, #23
 8000690:	2200      	movs	r2, #0
 8000692:	2110      	movs	r1, #16
 8000694:	0018      	movs	r0, r3
 8000696:	f001 fd15 	bl	80020c4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800069a:	23fa      	movs	r3, #250	@ 0xfa
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 f91e 	bl	80018e0 <HAL_Delay>
    sound_engine_tick();
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	e7dd      	b.n	8000664 <main+0x4c>
 80006a8:	2000003c 	.word	0x2000003c
 80006ac:	00001388 	.word	0x00001388

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b093      	sub	sp, #76	@ 0x4c
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	2410      	movs	r4, #16
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	0018      	movs	r0, r3
 80006bc:	2338      	movs	r3, #56	@ 0x38
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f003 f8ca 	bl	800385a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	003b      	movs	r3, r7
 80006c8:	0018      	movs	r0, r3
 80006ca:	2310      	movs	r3, #16
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f003 f8c3 	bl	800385a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2380      	movs	r3, #128	@ 0x80
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 fd4f 	bl	800217c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2202      	movs	r2, #2
 80006e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2280      	movs	r2, #128	@ 0x80
 80006e8:	0052      	lsls	r2, r2, #1
 80006ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006ec:	0021      	movs	r1, r4
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2240      	movs	r2, #64	@ 0x40
 80006f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2202      	movs	r2, #2
 80006fe:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2202      	movs	r2, #2
 8000704:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2208      	movs	r2, #8
 8000710:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2280      	movs	r2, #128	@ 0x80
 8000716:	0292      	lsls	r2, r2, #10
 8000718:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2280      	movs	r2, #128	@ 0x80
 800071e:	0492      	lsls	r2, r2, #18
 8000720:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2280      	movs	r2, #128	@ 0x80
 8000726:	0592      	lsls	r2, r2, #22
 8000728:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	187b      	adds	r3, r7, r1
 800072c:	0018      	movs	r0, r3
 800072e:	f001 fd71 	bl	8002214 <HAL_RCC_OscConfig>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000736:	f000 f819 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	003b      	movs	r3, r7
 800073c:	2207      	movs	r2, #7
 800073e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	003b      	movs	r3, r7
 8000742:	2202      	movs	r2, #2
 8000744:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	003b      	movs	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	003b      	movs	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000752:	003b      	movs	r3, r7
 8000754:	2102      	movs	r1, #2
 8000756:	0018      	movs	r0, r3
 8000758:	f002 f876 	bl	8002848 <HAL_RCC_ClockConfig>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000760:	f000 f804 	bl	800076c <Error_Handler>
  }
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b013      	add	sp, #76	@ 0x4c
 800076a:	bd90      	pop	{r4, r7, pc}

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	e7fd      	b.n	8000774 <Error_Handler+0x8>

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <HAL_MspInit+0x44>)
 8000780:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <HAL_MspInit+0x44>)
 8000784:	2101      	movs	r1, #1
 8000786:	430a      	orrs	r2, r1
 8000788:	641a      	str	r2, [r3, #64]	@ 0x40
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <HAL_MspInit+0x44>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <HAL_MspInit+0x44>)
 8000798:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <HAL_MspInit+0x44>)
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0549      	lsls	r1, r1, #21
 80007a0:	430a      	orrs	r2, r1
 80007a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <HAL_MspInit+0x44>)
 80007a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007a8:	2380      	movs	r3, #128	@ 0x80
 80007aa:	055b      	lsls	r3, r3, #21
 80007ac:	4013      	ands	r3, r2
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  // Eigene globale Initialisierungen, z.B. NVIC-Prioritäten, können hier ergänzt werden.
  /* USER CODE END MspInit 1 */
}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b002      	add	sp, #8
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	40021000 	.word	0x40021000

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	e7fd      	b.n	80007c4 <NMI_Handler+0x4>

080007c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	e7fd      	b.n	80007cc <HardFault_Handler+0x4>

080007d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e8:	f001 f85e 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ec:	46c0      	nop			@ (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80007f8:	4b03      	ldr	r3, [pc, #12]	@ (8000808 <DMA1_Channel1_IRQHandler+0x14>)
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 f9fc 	bl	8001bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000800:	46c0      	nop			@ (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	20000088 	.word	0x20000088

0800080c <SystemInit>:
  * Erklärung:
  *   Wird beim Reset aufgerufen, bevor main() startet.
  *   Hier kann z.B. die Vektor-Tabelle umgesetzt werden.
  */
void SystemInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <MX_TIM14_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	0018      	movs	r0, r3
 8000822:	231c      	movs	r3, #28
 8000824:	001a      	movs	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	f003 f817 	bl	800385a <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <MX_TIM14_Init+0x94>)
 800082e:	4a20      	ldr	r2, [pc, #128]	@ (80008b0 <MX_TIM14_Init+0x98>)
 8000830:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1599; // 64 MHz / 1600 = 40 kHz
 8000832:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <MX_TIM14_Init+0x94>)
 8000834:	4a1f      	ldr	r2, [pc, #124]	@ (80008b4 <MX_TIM14_Init+0x9c>)
 8000836:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <MX_TIM14_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9;       // 40 kHz / 10 = 4 kHz
 800083e:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <MX_TIM14_Init+0x94>)
 8000840:	2209      	movs	r2, #9
 8000842:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000844:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <MX_TIM14_Init+0x94>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800084a:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <MX_TIM14_Init+0x94>)
 800084c:	2280      	movs	r2, #128	@ 0x80
 800084e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_TIM14_Init+0x94>)
 8000852:	0018      	movs	r0, r3
 8000854:	f002 f9a2 	bl	8002b9c <HAL_TIM_Base_Init>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800085c:	f7ff ff86 	bl	800076c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_TIM14_Init+0x94>)
 8000862:	0018      	movs	r0, r3
 8000864:	f002 f9f2 	bl	8002c4c <HAL_TIM_PWM_Init>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 800086c:	f7ff ff7e 	bl	800076c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2260      	movs	r2, #96	@ 0x60
 8000874:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5; // 50% Dutycycle
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2205      	movs	r2, #5
 800087a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000888:	1d39      	adds	r1, r7, #4
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_TIM14_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	0018      	movs	r0, r3
 8000890:	f002 fba0 	bl	8002fd4 <HAL_TIM_PWM_ConfigChannel>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d001      	beq.n	800089c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000898:	f7ff ff68 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800089c:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <MX_TIM14_Init+0x94>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 f86c 	bl	800097c <HAL_TIM_MspPostInit>

}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b008      	add	sp, #32
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000003c 	.word	0x2000003c
 80008b0:	40002000 	.word	0x40002000
 80008b4:	0000063f 	.word	0x0000063f

080008b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a28      	ldr	r2, [pc, #160]	@ (8000968 <HAL_TIM_Base_MspInit+0xb0>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d137      	bne.n	800093a <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008ca:	4b28      	ldr	r3, [pc, #160]	@ (800096c <HAL_TIM_Base_MspInit+0xb4>)
 80008cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008ce:	4b27      	ldr	r3, [pc, #156]	@ (800096c <HAL_TIM_Base_MspInit+0xb4>)
 80008d0:	2102      	movs	r1, #2
 80008d2:	430a      	orrs	r2, r1
 80008d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008d6:	4b25      	ldr	r3, [pc, #148]	@ (800096c <HAL_TIM_Base_MspInit+0xb4>)
 80008d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008da:	2202      	movs	r2, #2
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel1;
 80008e2:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <HAL_TIM_Base_MspInit+0xb8>)
 80008e4:	4a23      	ldr	r2, [pc, #140]	@ (8000974 <HAL_TIM_Base_MspInit+0xbc>)
 80008e6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80008e8:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <HAL_TIM_Base_MspInit+0xb8>)
 80008ea:	2221      	movs	r2, #33	@ 0x21
 80008ec:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008ee:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <HAL_TIM_Base_MspInit+0xb8>)
 80008f0:	2210      	movs	r2, #16
 80008f2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000970 <HAL_TIM_Base_MspInit+0xb8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <HAL_TIM_Base_MspInit+0xb8>)
 80008fc:	2280      	movs	r2, #128	@ 0x80
 80008fe:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000900:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <HAL_TIM_Base_MspInit+0xb8>)
 8000902:	2280      	movs	r2, #128	@ 0x80
 8000904:	0052      	lsls	r2, r2, #1
 8000906:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000908:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <HAL_TIM_Base_MspInit+0xb8>)
 800090a:	2280      	movs	r2, #128	@ 0x80
 800090c:	00d2      	lsls	r2, r2, #3
 800090e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8000910:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <HAL_TIM_Base_MspInit+0xb8>)
 8000912:	2220      	movs	r2, #32
 8000914:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000916:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <HAL_TIM_Base_MspInit+0xb8>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_TIM_Base_MspInit+0xb8>)
 800091e:	0018      	movs	r0, r3
 8000920:	f001 f8e0 	bl	8001ae4 <HAL_DMA_Init>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000928:	f7ff ff20 	bl	800076c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <HAL_TIM_Base_MspInit+0xb8>)
 8000930:	629a      	str	r2, [r3, #40]	@ 0x28
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <HAL_TIM_Base_MspInit+0xb8>)
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000938:	e012      	b.n	8000960 <HAL_TIM_Base_MspInit+0xa8>
  else if(tim_baseHandle->Instance==TIM14)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a0e      	ldr	r2, [pc, #56]	@ (8000978 <HAL_TIM_Base_MspInit+0xc0>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d10d      	bne.n	8000960 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000944:	4b09      	ldr	r3, [pc, #36]	@ (800096c <HAL_TIM_Base_MspInit+0xb4>)
 8000946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <HAL_TIM_Base_MspInit+0xb4>)
 800094a:	2180      	movs	r1, #128	@ 0x80
 800094c:	0209      	lsls	r1, r1, #8
 800094e:	430a      	orrs	r2, r1
 8000950:	641a      	str	r2, [r3, #64]	@ 0x40
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_TIM_Base_MspInit+0xb4>)
 8000954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000956:	2380      	movs	r3, #128	@ 0x80
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	4013      	ands	r3, r2
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
}
 8000960:	46c0      	nop			@ (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b004      	add	sp, #16
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40000400 	.word	0x40000400
 800096c:	40021000 	.word	0x40021000
 8000970:	20000088 	.word	0x20000088
 8000974:	40020008 	.word	0x40020008
 8000978:	40002000 	.word	0x40002000

0800097c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b08b      	sub	sp, #44	@ 0x2c
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	2414      	movs	r4, #20
 8000986:	193b      	adds	r3, r7, r4
 8000988:	0018      	movs	r0, r3
 800098a:	2314      	movs	r3, #20
 800098c:	001a      	movs	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f002 ff63 	bl	800385a <memset>
  if(timHandle->Instance==TIM3)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a29      	ldr	r2, [pc, #164]	@ (8000a40 <HAL_TIM_MspPostInit+0xc4>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d123      	bne.n	80009e6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <HAL_TIM_MspPostInit+0xc8>)
 80009a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009a2:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <HAL_TIM_MspPostInit+0xc8>)
 80009a4:	2101      	movs	r1, #1
 80009a6:	430a      	orrs	r2, r1
 80009a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009aa:	4b26      	ldr	r3, [pc, #152]	@ (8000a44 <HAL_TIM_MspPostInit+0xc8>)
 80009ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ae:	2201      	movs	r2, #1
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009b6:	0021      	movs	r1, r4
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2280      	movs	r2, #128	@ 0x80
 80009bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2202      	movs	r2, #2
 80009c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2201      	movs	r2, #1
 80009d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	187a      	adds	r2, r7, r1
 80009d8:	23a0      	movs	r3, #160	@ 0xa0
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	0011      	movs	r1, r2
 80009de:	0018      	movs	r0, r3
 80009e0:	f001 fa0c 	bl	8001dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80009e4:	e027      	b.n	8000a36 <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM14)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a17      	ldr	r2, [pc, #92]	@ (8000a48 <HAL_TIM_MspPostInit+0xcc>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d122      	bne.n	8000a36 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <HAL_TIM_MspPostInit+0xc8>)
 80009f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009f4:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <HAL_TIM_MspPostInit+0xc8>)
 80009f6:	2101      	movs	r1, #1
 80009f8:	430a      	orrs	r2, r1
 80009fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <HAL_TIM_MspPostInit+0xc8>)
 80009fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a00:	2201      	movs	r2, #1
 8000a02:	4013      	ands	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a08:	2114      	movs	r1, #20
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2210      	movs	r2, #16
 8000a0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2202      	movs	r2, #2
 8000a14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2204      	movs	r2, #4
 8000a26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	187a      	adds	r2, r7, r1
 8000a2a:	23a0      	movs	r3, #160	@ 0xa0
 8000a2c:	05db      	lsls	r3, r3, #23
 8000a2e:	0011      	movs	r1, r2
 8000a30:	0018      	movs	r0, r3
 8000a32:	f001 f9e3 	bl	8001dfc <HAL_GPIO_Init>
}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b00b      	add	sp, #44	@ 0x2c
 8000a3c:	bd90      	pop	{r4, r7, pc}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	40000400 	.word	0x40000400
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40002000 	.word	0x40002000

08000a4c <hsv_to_rgb>:
// Diese Datei sollte von allen Effekten eingebunden werden, die Farboperationen benötigen.
// -----------------------------------------------------------------------------

#include "color_utils.h"

RGB_t hsv_to_rgb(uint8_t h, uint8_t s, uint8_t v) {
 8000a4c:	b5b0      	push	{r4, r5, r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	0004      	movs	r4, r0
 8000a54:	0008      	movs	r0, r1
 8000a56:	0011      	movs	r1, r2
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	1c22      	adds	r2, r4, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
 8000a5e:	1dbb      	adds	r3, r7, #6
 8000a60:	1c02      	adds	r2, r0, #0
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	1d7b      	adds	r3, r7, #5
 8000a66:	1c0a      	adds	r2, r1, #0
 8000a68:	701a      	strb	r2, [r3, #0]
    RGB_t rgb = {0, 0, 0};
 8000a6a:	210c      	movs	r1, #12
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	705a      	strb	r2, [r3, #1]
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	709a      	strb	r2, [r3, #2]

    uint8_t region = h / 43;
 8000a7e:	2517      	movs	r5, #23
 8000a80:	197c      	adds	r4, r7, r5
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	212b      	movs	r1, #43	@ 0x2b
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f7ff fb3b 	bl	8000104 <__udivsi3>
 8000a8e:	0003      	movs	r3, r0
 8000a90:	7023      	strb	r3, [r4, #0]
    uint8_t remainder = (h - (region * 43)) * 6;
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	7819      	ldrb	r1, [r3, #0]
 8000a96:	002c      	movs	r4, r5
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	069b      	lsls	r3, r3, #26
 8000aa0:	1a9b      	subs	r3, r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	189b      	adds	r3, r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	189b      	adds	r3, r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	189b      	adds	r3, r3, r2
 8000aae:	18cb      	adds	r3, r1, r3
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2016      	movs	r0, #22
 8000ab4:	183a      	adds	r2, r7, r0
 8000ab6:	1c19      	adds	r1, r3, #0
 8000ab8:	1c0b      	adds	r3, r1, #0
 8000aba:	18db      	adds	r3, r3, r3
 8000abc:	185b      	adds	r3, r3, r1
 8000abe:	18db      	adds	r3, r3, r3
 8000ac0:	7013      	strb	r3, [r2, #0]

    uint8_t p = (v * (255 - s)) >> 8;
 8000ac2:	1d7b      	adds	r3, r7, #5
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	1dba      	adds	r2, r7, #6
 8000ac8:	7812      	ldrb	r2, [r2, #0]
 8000aca:	21ff      	movs	r1, #255	@ 0xff
 8000acc:	1a8a      	subs	r2, r1, r2
 8000ace:	4353      	muls	r3, r2
 8000ad0:	121a      	asrs	r2, r3, #8
 8000ad2:	2315      	movs	r3, #21
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	701a      	strb	r2, [r3, #0]
    uint8_t q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8000ad8:	1d7b      	adds	r3, r7, #5
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	1dba      	adds	r2, r7, #6
 8000ade:	7812      	ldrb	r2, [r2, #0]
 8000ae0:	1839      	adds	r1, r7, r0
 8000ae2:	7809      	ldrb	r1, [r1, #0]
 8000ae4:	434a      	muls	r2, r1
 8000ae6:	1212      	asrs	r2, r2, #8
 8000ae8:	21ff      	movs	r1, #255	@ 0xff
 8000aea:	1a8a      	subs	r2, r1, r2
 8000aec:	4353      	muls	r3, r2
 8000aee:	121a      	asrs	r2, r3, #8
 8000af0:	2314      	movs	r3, #20
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	701a      	strb	r2, [r3, #0]
    uint8_t t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8000af6:	1d7b      	adds	r3, r7, #5
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	1dba      	adds	r2, r7, #6
 8000afc:	7812      	ldrb	r2, [r2, #0]
 8000afe:	1839      	adds	r1, r7, r0
 8000b00:	7809      	ldrb	r1, [r1, #0]
 8000b02:	20ff      	movs	r0, #255	@ 0xff
 8000b04:	1a41      	subs	r1, r0, r1
 8000b06:	434a      	muls	r2, r1
 8000b08:	1212      	asrs	r2, r2, #8
 8000b0a:	21ff      	movs	r1, #255	@ 0xff
 8000b0c:	1a8a      	subs	r2, r1, r2
 8000b0e:	4353      	muls	r3, r2
 8000b10:	121a      	asrs	r2, r3, #8
 8000b12:	2313      	movs	r3, #19
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	701a      	strb	r2, [r3, #0]

    switch (region) {
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d854      	bhi.n	8000bca <hsv_to_rgb+0x17e>
 8000b20:	009a      	lsls	r2, r3, #2
 8000b22:	4b43      	ldr	r3, [pc, #268]	@ (8000c30 <hsv_to_rgb+0x1e4>)
 8000b24:	18d3      	adds	r3, r2, r3
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	469f      	mov	pc, r3
        case 0:
            rgb.r = v; rgb.g = t; rgb.b = p; break;
 8000b2a:	210c      	movs	r1, #12
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	1d7a      	adds	r2, r7, #5
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2213      	movs	r2, #19
 8000b38:	18ba      	adds	r2, r7, r2
 8000b3a:	7812      	ldrb	r2, [r2, #0]
 8000b3c:	705a      	strb	r2, [r3, #1]
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2215      	movs	r2, #21
 8000b42:	18ba      	adds	r2, r7, r2
 8000b44:	7812      	ldrb	r2, [r2, #0]
 8000b46:	709a      	strb	r2, [r3, #2]
 8000b48:	e04f      	b.n	8000bea <hsv_to_rgb+0x19e>
        case 1:
            rgb.r = q; rgb.g = v; rgb.b = p; break;
 8000b4a:	210c      	movs	r1, #12
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2214      	movs	r2, #20
 8000b50:	18ba      	adds	r2, r7, r2
 8000b52:	7812      	ldrb	r2, [r2, #0]
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	1d7a      	adds	r2, r7, #5
 8000b5a:	7812      	ldrb	r2, [r2, #0]
 8000b5c:	705a      	strb	r2, [r3, #1]
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2215      	movs	r2, #21
 8000b62:	18ba      	adds	r2, r7, r2
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	709a      	strb	r2, [r3, #2]
 8000b68:	e03f      	b.n	8000bea <hsv_to_rgb+0x19e>
        case 2:
            rgb.r = p; rgb.g = v; rgb.b = t; break;
 8000b6a:	210c      	movs	r1, #12
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2215      	movs	r2, #21
 8000b70:	18ba      	adds	r2, r7, r2
 8000b72:	7812      	ldrb	r2, [r2, #0]
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	1d7a      	adds	r2, r7, #5
 8000b7a:	7812      	ldrb	r2, [r2, #0]
 8000b7c:	705a      	strb	r2, [r3, #1]
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2213      	movs	r2, #19
 8000b82:	18ba      	adds	r2, r7, r2
 8000b84:	7812      	ldrb	r2, [r2, #0]
 8000b86:	709a      	strb	r2, [r3, #2]
 8000b88:	e02f      	b.n	8000bea <hsv_to_rgb+0x19e>
        case 3:
            rgb.r = p; rgb.g = q; rgb.b = v; break;
 8000b8a:	210c      	movs	r1, #12
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2215      	movs	r2, #21
 8000b90:	18ba      	adds	r2, r7, r2
 8000b92:	7812      	ldrb	r2, [r2, #0]
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2214      	movs	r2, #20
 8000b9a:	18ba      	adds	r2, r7, r2
 8000b9c:	7812      	ldrb	r2, [r2, #0]
 8000b9e:	705a      	strb	r2, [r3, #1]
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	1d7a      	adds	r2, r7, #5
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	709a      	strb	r2, [r3, #2]
 8000ba8:	e01f      	b.n	8000bea <hsv_to_rgb+0x19e>
        case 4:
            rgb.r = t; rgb.g = p; rgb.b = v; break;
 8000baa:	210c      	movs	r1, #12
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2213      	movs	r2, #19
 8000bb0:	18ba      	adds	r2, r7, r2
 8000bb2:	7812      	ldrb	r2, [r2, #0]
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2215      	movs	r2, #21
 8000bba:	18ba      	adds	r2, r7, r2
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	705a      	strb	r2, [r3, #1]
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	1d7a      	adds	r2, r7, #5
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	709a      	strb	r2, [r3, #2]
 8000bc8:	e00f      	b.n	8000bea <hsv_to_rgb+0x19e>
        default:
            rgb.r = v; rgb.g = p; rgb.b = q; break;
 8000bca:	210c      	movs	r1, #12
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	1d7a      	adds	r2, r7, #5
 8000bd0:	7812      	ldrb	r2, [r2, #0]
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2215      	movs	r2, #21
 8000bd8:	18ba      	adds	r2, r7, r2
 8000bda:	7812      	ldrb	r2, [r2, #0]
 8000bdc:	705a      	strb	r2, [r3, #1]
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2214      	movs	r2, #20
 8000be2:	18ba      	adds	r2, r7, r2
 8000be4:	7812      	ldrb	r2, [r2, #0]
 8000be6:	709a      	strb	r2, [r3, #2]
 8000be8:	46c0      	nop			@ (mov r8, r8)
    }

    return rgb;
 8000bea:	2010      	movs	r0, #16
 8000bec:	183b      	adds	r3, r7, r0
 8000bee:	220c      	movs	r2, #12
 8000bf0:	18ba      	adds	r2, r7, r2
 8000bf2:	8811      	ldrh	r1, [r2, #0]
 8000bf4:	8019      	strh	r1, [r3, #0]
 8000bf6:	7892      	ldrb	r2, [r2, #2]
 8000bf8:	709a      	strb	r2, [r3, #2]
 8000bfa:	183a      	adds	r2, r7, r0
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	7811      	ldrb	r1, [r2, #0]
 8000c00:	20ff      	movs	r0, #255	@ 0xff
 8000c02:	4001      	ands	r1, r0
 8000c04:	20ff      	movs	r0, #255	@ 0xff
 8000c06:	4383      	bics	r3, r0
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	7851      	ldrb	r1, [r2, #1]
 8000c0c:	20ff      	movs	r0, #255	@ 0xff
 8000c0e:	4001      	ands	r1, r0
 8000c10:	0209      	lsls	r1, r1, #8
 8000c12:	4808      	ldr	r0, [pc, #32]	@ (8000c34 <hsv_to_rgb+0x1e8>)
 8000c14:	4003      	ands	r3, r0
 8000c16:	430b      	orrs	r3, r1
 8000c18:	7892      	ldrb	r2, [r2, #2]
 8000c1a:	21ff      	movs	r1, #255	@ 0xff
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	0412      	lsls	r2, r2, #16
 8000c20:	4905      	ldr	r1, [pc, #20]	@ (8000c38 <hsv_to_rgb+0x1ec>)
 8000c22:	400b      	ands	r3, r1
 8000c24:	4313      	orrs	r3, r2
}
 8000c26:	0018      	movs	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b006      	add	sp, #24
 8000c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	08003940 	.word	0x08003940
 8000c34:	ffff00ff 	.word	0xffff00ff
 8000c38:	ff00ffff 	.word	0xff00ffff

08000c3c <encode_leds_to_pwm>:
// -----------------------------------------------------------------------------
// encode_leds_to_pwm
// Kodiert den aktuellen Zustand von led_state[] in das PWM-Bufferformat für DMA.
// Reihenfolge: GRB (wie von SK6812/WS2812 erwartet).
// -----------------------------------------------------------------------------
static void encode_leds_to_pwm(void) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
    uint16_t *p = pwm_buffer;
 8000c42:	4b35      	ldr	r3, [pc, #212]	@ (8000d18 <encode_leds_to_pwm+0xdc>)
 8000c44:	617b      	str	r3, [r7, #20]

    for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8000c46:	2313      	movs	r3, #19
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e04a      	b.n	8000ce6 <encode_leds_to_pwm+0xaa>
        uint8_t colors[3] = { led_state[i].g, led_state[i].r, led_state[i].b };
 8000c50:	2013      	movs	r0, #19
 8000c52:	183b      	adds	r3, r7, r0
 8000c54:	781a      	ldrb	r2, [r3, #0]
 8000c56:	4931      	ldr	r1, [pc, #196]	@ (8000d1c <encode_leds_to_pwm+0xe0>)
 8000c58:	0013      	movs	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	189b      	adds	r3, r3, r2
 8000c5e:	18cb      	adds	r3, r1, r3
 8000c60:	3301      	adds	r3, #1
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	003b      	movs	r3, r7
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	183b      	adds	r3, r7, r0
 8000c6a:	781a      	ldrb	r2, [r3, #0]
 8000c6c:	492b      	ldr	r1, [pc, #172]	@ (8000d1c <encode_leds_to_pwm+0xe0>)
 8000c6e:	0013      	movs	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	189b      	adds	r3, r3, r2
 8000c74:	5c5a      	ldrb	r2, [r3, r1]
 8000c76:	003b      	movs	r3, r7
 8000c78:	705a      	strb	r2, [r3, #1]
 8000c7a:	183b      	adds	r3, r7, r0
 8000c7c:	781a      	ldrb	r2, [r3, #0]
 8000c7e:	4927      	ldr	r1, [pc, #156]	@ (8000d1c <encode_leds_to_pwm+0xe0>)
 8000c80:	0013      	movs	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	189b      	adds	r3, r3, r2
 8000c86:	18cb      	adds	r3, r1, r3
 8000c88:	3302      	adds	r3, #2
 8000c8a:	781a      	ldrb	r2, [r3, #0]
 8000c8c:	003b      	movs	r3, r7
 8000c8e:	709a      	strb	r2, [r3, #2]
        for (int c = 0; c < 3; ++c) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	e01e      	b.n	8000cd4 <encode_leds_to_pwm+0x98>
            for (int bit = 7; bit >= 0; --bit) {
 8000c96:	2307      	movs	r3, #7
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	e015      	b.n	8000cc8 <encode_leds_to_pwm+0x8c>
                *p++ = (colors[c] & (1 << bit)) ? TIMER_PWM_HIGH : TIMER_PWM_LOW;
 8000c9c:	003a      	movs	r2, r7
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	18d3      	adds	r3, r2, r3
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	411a      	asrs	r2, r3
 8000caa:	0013      	movs	r3, r2
 8000cac:	2201      	movs	r2, #1
 8000cae:	4013      	ands	r3, r2
 8000cb0:	d001      	beq.n	8000cb6 <encode_leds_to_pwm+0x7a>
 8000cb2:	2141      	movs	r1, #65	@ 0x41
 8000cb4:	e000      	b.n	8000cb8 <encode_leds_to_pwm+0x7c>
 8000cb6:	211e      	movs	r1, #30
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	1c9a      	adds	r2, r3, #2
 8000cbc:	617a      	str	r2, [r7, #20]
 8000cbe:	1c0a      	adds	r2, r1, #0
 8000cc0:	801a      	strh	r2, [r3, #0]
            for (int bit = 7; bit >= 0; --bit) {
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	dae6      	bge.n	8000c9c <encode_leds_to_pwm+0x60>
        for (int c = 0; c < 3; ++c) {
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	dddd      	ble.n	8000c96 <encode_leds_to_pwm+0x5a>
    for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8000cda:	2213      	movs	r2, #19
 8000cdc:	18bb      	adds	r3, r7, r2
 8000cde:	18ba      	adds	r2, r7, r2
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	3201      	adds	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	2313      	movs	r3, #19
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b0b      	cmp	r3, #11
 8000cee:	d9af      	bls.n	8000c50 <encode_leds_to_pwm+0x14>
            }
        }
    }

    // Reset-Slots füllen (Latch-Zeit)
    for (int i = 0; i < LED_RESET_SLOTS; ++i) {
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	e007      	b.n	8000d06 <encode_leds_to_pwm+0xca>
        *p++ = 0;
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	1c9a      	adds	r2, r3, #2
 8000cfa:	617a      	str	r2, [r7, #20]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < LED_RESET_SLOTS; ++i) {
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3301      	adds	r3, #1
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d0a:	ddf4      	ble.n	8000cf6 <encode_leds_to_pwm+0xba>
    }
}
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b006      	add	sp, #24
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	200000e4 	.word	0x200000e4
 8000d1c:	20000384 	.word	0x20000384

08000d20 <led_driver_update>:
// -----------------------------------------------------------------------------
// led_driver_update
// Kodiert den aktuellen LED-Zustand in den DMA-Buffer (ohne Übertragung zu starten).
// Nach jedem Setzen von LEDs aufrufen!
// -----------------------------------------------------------------------------
void led_driver_update(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
    encode_leds_to_pwm();
 8000d24:	f7ff ff8a 	bl	8000c3c <encode_leds_to_pwm>
}
 8000d28:	46c0      	nop			@ (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <led_driver_set_all>:

// -----------------------------------------------------------------------------
// led_driver_set_all
// Setzt alle LEDs auf die gewünschte Farbe (RGB).
// -----------------------------------------------------------------------------
void led_driver_set_all(RGB_t color) {
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	6018      	str	r0, [r3, #0]
    for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8000d3a:	230f      	movs	r3, #15
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e012      	b.n	8000d6a <led_driver_set_all+0x3a>
        led_state[i] = color;
 8000d44:	240f      	movs	r4, #15
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	781a      	ldrb	r2, [r3, #0]
 8000d4a:	490d      	ldr	r1, [pc, #52]	@ (8000d80 <led_driver_set_all+0x50>)
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	189b      	adds	r3, r3, r2
 8000d52:	1d3a      	adds	r2, r7, #4
 8000d54:	18cb      	adds	r3, r1, r3
 8000d56:	0011      	movs	r1, r2
 8000d58:	2203      	movs	r2, #3
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f002 fdaa 	bl	80038b4 <memcpy>
    for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8000d60:	193b      	adds	r3, r7, r4
 8000d62:	193a      	adds	r2, r7, r4
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	3201      	adds	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b0b      	cmp	r3, #11
 8000d72:	d9e7      	bls.n	8000d44 <led_driver_set_all+0x14>
    }
}
 8000d74:	46c0      	nop			@ (mov r8, r8)
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b005      	add	sp, #20
 8000d7c:	bd90      	pop	{r4, r7, pc}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	20000384 	.word	0x20000384

08000d84 <led_driver_clear>:

// -----------------------------------------------------------------------------
// led_driver_clear
// Schaltet alle LEDs aus (setzt sie auf schwarz).
// -----------------------------------------------------------------------------
void led_driver_clear(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
    RGB_t black = {0, 0, 0};
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	705a      	strb	r2, [r3, #1]
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	709a      	strb	r2, [r3, #2]
    led_driver_set_all(black);
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	f7ff ffc6 	bl	8000d30 <led_driver_set_all>
}
 8000da4:	46c0      	nop			@ (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b002      	add	sp, #8
 8000daa:	bd80      	pop	{r7, pc}

08000dac <led_effect_blink_update>:
    state = false;
    last_toggle = timer_tick;
    led_driver_clear();
}

void led_effect_blink_update(uint32_t tick) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
    // Geschwindigkeit: speed 0–255 → Intervall 1000–200 ms
    uint32_t interval = 200 + (1000 - (uint32_t)effect_params.speed * 8);
 8000db4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e60 <led_effect_blink_update+0xb4>)
 8000db6:	789b      	ldrb	r3, [r3, #2]
 8000db8:	001a      	movs	r2, r3
 8000dba:	2396      	movs	r3, #150	@ 0x96
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	613b      	str	r3, [r7, #16]

    if (tick - last_toggle >= interval) {
 8000dc2:	4b28      	ldr	r3, [pc, #160]	@ (8000e64 <led_effect_blink_update+0xb8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d843      	bhi.n	8000e58 <led_effect_blink_update+0xac>
        last_toggle = tick;
 8000dd0:	4b24      	ldr	r3, [pc, #144]	@ (8000e64 <led_effect_blink_update+0xb8>)
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	601a      	str	r2, [r3, #0]
        state = !state;
 8000dd6:	4b24      	ldr	r3, [pc, #144]	@ (8000e68 <led_effect_blink_update+0xbc>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	1e5a      	subs	r2, r3, #1
 8000ddc:	4193      	sbcs	r3, r2
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2201      	movs	r2, #1
 8000de2:	4053      	eors	r3, r2
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	1c1a      	adds	r2, r3, #0
 8000de8:	2301      	movs	r3, #1
 8000dea:	4013      	ands	r3, r2
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b1e      	ldr	r3, [pc, #120]	@ (8000e68 <led_effect_blink_update+0xbc>)
 8000df0:	701a      	strb	r2, [r3, #0]

        if (state) {
 8000df2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e68 <led_effect_blink_update+0xbc>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d02a      	beq.n	8000e50 <led_effect_blink_update+0xa4>
            // KORREKTUR: Funktionsname hsv2rgb → hsv_to_rgb
            RGB_t color = hsv_to_rgb(effect_params.hue, 255, effect_params.brightness);
 8000dfa:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <led_effect_blink_update+0xb4>)
 8000dfc:	7818      	ldrb	r0, [r3, #0]
 8000dfe:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <led_effect_blink_update+0xb4>)
 8000e00:	785b      	ldrb	r3, [r3, #1]
 8000e02:	001a      	movs	r2, r3
 8000e04:	21ff      	movs	r1, #255	@ 0xff
 8000e06:	f7ff fe21 	bl	8000a4c <hsv_to_rgb>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	230c      	movs	r3, #12
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	1c11      	adds	r1, r2, #0
 8000e14:	7019      	strb	r1, [r3, #0]
 8000e16:	0411      	lsls	r1, r2, #16
 8000e18:	0e09      	lsrs	r1, r1, #24
 8000e1a:	7059      	strb	r1, [r3, #1]
 8000e1c:	0212      	lsls	r2, r2, #8
 8000e1e:	0e12      	lsrs	r2, r2, #24
 8000e20:	709a      	strb	r2, [r3, #2]
            for (int i = 0; i < LED_COUNT; i++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	e00f      	b.n	8000e48 <led_effect_blink_update+0x9c>
                led_state[i] = color;
 8000e28:	4910      	ldr	r1, [pc, #64]	@ (8000e6c <led_effect_blink_update+0xc0>)
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	189b      	adds	r3, r3, r2
 8000e32:	220c      	movs	r2, #12
 8000e34:	18ba      	adds	r2, r7, r2
 8000e36:	18cb      	adds	r3, r1, r3
 8000e38:	0011      	movs	r1, r2
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f002 fd39 	bl	80038b4 <memcpy>
            for (int i = 0; i < LED_COUNT; i++) {
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3301      	adds	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2b0b      	cmp	r3, #11
 8000e4c:	ddec      	ble.n	8000e28 <led_effect_blink_update+0x7c>
 8000e4e:	e001      	b.n	8000e54 <led_effect_blink_update+0xa8>
            }
        } else {
            led_driver_clear();
 8000e50:	f7ff ff98 	bl	8000d84 <led_driver_clear>
        }

        led_driver_update();
 8000e54:	f7ff ff64 	bl	8000d20 <led_driver_update>
    }
}
 8000e58:	46c0      	nop			@ (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b006      	add	sp, #24
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200003d0 	.word	0x200003d0
 8000e64:	200003ac 	.word	0x200003ac
 8000e68:	200003a8 	.word	0x200003a8
 8000e6c:	20000384 	.word	0x20000384

08000e70 <led_effect_breathe_update>:
    brightness = 0;
    direction = 1;
    last_update = 0;
}

void led_effect_breathe_update(uint32_t tick) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    // Geschwindigkeit: Je höher effect_params.speed, desto schneller das Atmen
    uint32_t interval = 50 - effect_params.speed; // Wertebereich ggf. anpassen
 8000e78:	4b2c      	ldr	r3, [pc, #176]	@ (8000f2c <led_effect_breathe_update+0xbc>)
 8000e7a:	789b      	ldrb	r3, [r3, #2]
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2332      	movs	r3, #50	@ 0x32
 8000e80:	1a9b      	subs	r3, r3, r2
 8000e82:	613b      	str	r3, [r7, #16]

    if (tick - last_update < interval) return;
 8000e84:	4b2a      	ldr	r3, [pc, #168]	@ (8000f30 <led_effect_breathe_update+0xc0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d847      	bhi.n	8000f22 <led_effect_breathe_update+0xb2>
    last_update = tick;
 8000e92:	4b27      	ldr	r3, [pc, #156]	@ (8000f30 <led_effect_breathe_update+0xc0>)
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	601a      	str	r2, [r3, #0]

    // Richtung umkehren bei Max/Min
    if (brightness == 255) direction = -1;
 8000e98:	4b26      	ldr	r3, [pc, #152]	@ (8000f34 <led_effect_breathe_update+0xc4>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2bff      	cmp	r3, #255	@ 0xff
 8000e9e:	d102      	bne.n	8000ea6 <led_effect_breathe_update+0x36>
 8000ea0:	4b25      	ldr	r3, [pc, #148]	@ (8000f38 <led_effect_breathe_update+0xc8>)
 8000ea2:	22ff      	movs	r2, #255	@ 0xff
 8000ea4:	701a      	strb	r2, [r3, #0]
    if (brightness == 0) direction = 1;
 8000ea6:	4b23      	ldr	r3, [pc, #140]	@ (8000f34 <led_effect_breathe_update+0xc4>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d102      	bne.n	8000eb4 <led_effect_breathe_update+0x44>
 8000eae:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <led_effect_breathe_update+0xc8>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	701a      	strb	r2, [r3, #0]

    brightness += direction;
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f34 <led_effect_breathe_update+0xc4>)
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f38 <led_effect_breathe_update+0xc8>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	18d3      	adds	r3, r2, r3
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <led_effect_breathe_update+0xc4>)
 8000ec6:	701a      	strb	r2, [r3, #0]

    RGB_t color = hsv_to_rgb(effect_params.hue, 255, brightness);
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <led_effect_breathe_update+0xbc>)
 8000eca:	7818      	ldrb	r0, [r3, #0]
 8000ecc:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <led_effect_breathe_update+0xc4>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	21ff      	movs	r1, #255	@ 0xff
 8000ed4:	f7ff fdba 	bl	8000a4c <hsv_to_rgb>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	001a      	movs	r2, r3
 8000edc:	230c      	movs	r3, #12
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	1c11      	adds	r1, r2, #0
 8000ee2:	7019      	strb	r1, [r3, #0]
 8000ee4:	0411      	lsls	r1, r2, #16
 8000ee6:	0e09      	lsrs	r1, r1, #24
 8000ee8:	7059      	strb	r1, [r3, #1]
 8000eea:	0212      	lsls	r2, r2, #8
 8000eec:	0e12      	lsrs	r2, r2, #24
 8000eee:	709a      	strb	r2, [r3, #2]

    for (int i = 0; i < 12; i++) {
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	e00f      	b.n	8000f16 <led_effect_breathe_update+0xa6>
        led_state[i] = color;
 8000ef6:	4911      	ldr	r1, [pc, #68]	@ (8000f3c <led_effect_breathe_update+0xcc>)
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	0013      	movs	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	189b      	adds	r3, r3, r2
 8000f00:	220c      	movs	r2, #12
 8000f02:	18ba      	adds	r2, r7, r2
 8000f04:	18cb      	adds	r3, r1, r3
 8000f06:	0011      	movs	r1, r2
 8000f08:	2203      	movs	r2, #3
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f002 fcd2 	bl	80038b4 <memcpy>
    for (int i = 0; i < 12; i++) {
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3301      	adds	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2b0b      	cmp	r3, #11
 8000f1a:	ddec      	ble.n	8000ef6 <led_effect_breathe_update+0x86>
    }

    led_driver_update();
 8000f1c:	f7ff ff00 	bl	8000d20 <led_driver_update>
 8000f20:	e000      	b.n	8000f24 <led_effect_breathe_update+0xb4>
    if (tick - last_update < interval) return;
 8000f22:	46c0      	nop			@ (mov r8, r8)
}
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b006      	add	sp, #24
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	200003d0 	.word	0x200003d0
 8000f30:	200003b4 	.word	0x200003b4
 8000f34:	200003b0 	.word	0x200003b0
 8000f38:	20000004 	.word	0x20000004
 8000f3c:	20000384 	.word	0x20000384

08000f40 <led_effect_chase_left_update>:
void led_effect_chase_left_start(void) {
    current_pos = 0;
    last_update = 0;
}

void led_effect_chase_left_update(uint32_t tick) {
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    // Geschwindigkeit: Je höher effect_params.speed, desto kürzer das Intervall
    uint32_t interval = 150 - effect_params.speed * 10;
 8000f48:	4b33      	ldr	r3, [pc, #204]	@ (8001018 <led_effect_chase_left_update+0xd8>)
 8000f4a:	789b      	ldrb	r3, [r3, #2]
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	075b      	lsls	r3, r3, #29
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	3396      	adds	r3, #150	@ 0x96
 8000f5c:	613b      	str	r3, [r7, #16]
    if (tick - last_update < interval) return;
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800101c <led_effect_chase_left_update+0xdc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d850      	bhi.n	800100e <led_effect_chase_left_update+0xce>
    last_update = tick;
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <led_effect_chase_left_update+0xdc>)
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 12; i++) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	e039      	b.n	8000fec <led_effect_chase_left_update+0xac>
        led_state[i] = (i == current_pos)
 8000f78:	4b29      	ldr	r3, [pc, #164]	@ (8001020 <led_effect_chase_left_update+0xe0>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	001a      	movs	r2, r3
            ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
            : (RGB_t){0, 0, 0};
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d117      	bne.n	8000fb4 <led_effect_chase_left_update+0x74>
            ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
 8000f84:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <led_effect_chase_left_update+0xd8>)
 8000f86:	7818      	ldrb	r0, [r3, #0]
 8000f88:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <led_effect_chase_left_update+0xd8>)
 8000f8a:	785a      	ldrb	r2, [r3, #1]
 8000f8c:	4d25      	ldr	r5, [pc, #148]	@ (8001024 <led_effect_chase_left_update+0xe4>)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	001c      	movs	r4, r3
 8000f92:	0064      	lsls	r4, r4, #1
 8000f94:	18e4      	adds	r4, r4, r3
 8000f96:	21ff      	movs	r1, #255	@ 0xff
 8000f98:	f7ff fd58 	bl	8000a4c <hsv_to_rgb>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	1c1a      	adds	r2, r3, #0
 8000fa0:	5562      	strb	r2, [r4, r5]
 8000fa2:	041a      	lsls	r2, r3, #16
 8000fa4:	0e11      	lsrs	r1, r2, #24
 8000fa6:	192a      	adds	r2, r5, r4
 8000fa8:	7051      	strb	r1, [r2, #1]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	0e1a      	lsrs	r2, r3, #24
 8000fae:	192b      	adds	r3, r5, r4
 8000fb0:	709a      	strb	r2, [r3, #2]
 8000fb2:	e018      	b.n	8000fe6 <led_effect_chase_left_update+0xa6>
        led_state[i] = (i == current_pos)
 8000fb4:	491b      	ldr	r1, [pc, #108]	@ (8001024 <led_effect_chase_left_update+0xe4>)
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	0013      	movs	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	189b      	adds	r3, r3, r2
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	545a      	strb	r2, [r3, r1]
 8000fc2:	4918      	ldr	r1, [pc, #96]	@ (8001024 <led_effect_chase_left_update+0xe4>)
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	0013      	movs	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	189b      	adds	r3, r3, r2
 8000fcc:	18cb      	adds	r3, r1, r3
 8000fce:	3301      	adds	r3, #1
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	4913      	ldr	r1, [pc, #76]	@ (8001024 <led_effect_chase_left_update+0xe4>)
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	0013      	movs	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	189b      	adds	r3, r3, r2
 8000fde:	18cb      	adds	r3, r1, r3
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 12; i++) {
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	2b0b      	cmp	r3, #11
 8000ff0:	ddc2      	ble.n	8000f78 <led_effect_chase_left_update+0x38>
    }

    current_pos = (current_pos + 1) % 12;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <led_effect_chase_left_update+0xe0>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	210c      	movs	r1, #12
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff f9f2 	bl	80003e4 <__aeabi_idivmod>
 8001000:	000b      	movs	r3, r1
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <led_effect_chase_left_update+0xe0>)
 8001006:	701a      	strb	r2, [r3, #0]
    led_driver_update();
 8001008:	f7ff fe8a 	bl	8000d20 <led_driver_update>
 800100c:	e000      	b.n	8001010 <led_effect_chase_left_update+0xd0>
    if (tick - last_update < interval) return;
 800100e:	46c0      	nop			@ (mov r8, r8)
}
 8001010:	46bd      	mov	sp, r7
 8001012:	b006      	add	sp, #24
 8001014:	bdb0      	pop	{r4, r5, r7, pc}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	200003d0 	.word	0x200003d0
 800101c:	200003bc 	.word	0x200003bc
 8001020:	200003b8 	.word	0x200003b8
 8001024:	20000384 	.word	0x20000384

08001028 <led_effect_chase_right_update>:
void led_effect_chase_right_start(void) {
    current_pos = 11;
    last_update = 0;
}

void led_effect_chase_right_update(uint32_t tick) {
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    // Geschwindigkeit: Je höher effect_params.speed, desto kürzer das Intervall
    uint32_t interval = 150 - effect_params.speed * 10;
 8001030:	4b33      	ldr	r3, [pc, #204]	@ (8001100 <led_effect_chase_right_update+0xd8>)
 8001032:	789b      	ldrb	r3, [r3, #2]
 8001034:	001a      	movs	r2, r3
 8001036:	0013      	movs	r3, r2
 8001038:	075b      	lsls	r3, r3, #29
 800103a:	1a9b      	subs	r3, r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	3396      	adds	r3, #150	@ 0x96
 8001044:	613b      	str	r3, [r7, #16]
    if (tick - last_update < interval) return;
 8001046:	4b2f      	ldr	r3, [pc, #188]	@ (8001104 <led_effect_chase_right_update+0xdc>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	429a      	cmp	r2, r3
 8001052:	d851      	bhi.n	80010f8 <led_effect_chase_right_update+0xd0>
    last_update = tick;
 8001054:	4b2b      	ldr	r3, [pc, #172]	@ (8001104 <led_effect_chase_right_update+0xdc>)
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 12; i++) {
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e039      	b.n	80010d4 <led_effect_chase_right_update+0xac>
        led_state[i] = (i == current_pos)
 8001060:	4b29      	ldr	r3, [pc, #164]	@ (8001108 <led_effect_chase_right_update+0xe0>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	001a      	movs	r2, r3
            ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
            : (RGB_t){0, 0, 0};
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	4293      	cmp	r3, r2
 800106a:	d117      	bne.n	800109c <led_effect_chase_right_update+0x74>
            ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
 800106c:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <led_effect_chase_right_update+0xd8>)
 800106e:	7818      	ldrb	r0, [r3, #0]
 8001070:	4b23      	ldr	r3, [pc, #140]	@ (8001100 <led_effect_chase_right_update+0xd8>)
 8001072:	785a      	ldrb	r2, [r3, #1]
 8001074:	4d25      	ldr	r5, [pc, #148]	@ (800110c <led_effect_chase_right_update+0xe4>)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	001c      	movs	r4, r3
 800107a:	0064      	lsls	r4, r4, #1
 800107c:	18e4      	adds	r4, r4, r3
 800107e:	21ff      	movs	r1, #255	@ 0xff
 8001080:	f7ff fce4 	bl	8000a4c <hsv_to_rgb>
 8001084:	0003      	movs	r3, r0
 8001086:	1c1a      	adds	r2, r3, #0
 8001088:	5562      	strb	r2, [r4, r5]
 800108a:	041a      	lsls	r2, r3, #16
 800108c:	0e11      	lsrs	r1, r2, #24
 800108e:	192a      	adds	r2, r5, r4
 8001090:	7051      	strb	r1, [r2, #1]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	0e1a      	lsrs	r2, r3, #24
 8001096:	192b      	adds	r3, r5, r4
 8001098:	709a      	strb	r2, [r3, #2]
 800109a:	e018      	b.n	80010ce <led_effect_chase_right_update+0xa6>
        led_state[i] = (i == current_pos)
 800109c:	491b      	ldr	r1, [pc, #108]	@ (800110c <led_effect_chase_right_update+0xe4>)
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	0013      	movs	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	189b      	adds	r3, r3, r2
 80010a6:	2200      	movs	r2, #0
 80010a8:	545a      	strb	r2, [r3, r1]
 80010aa:	4918      	ldr	r1, [pc, #96]	@ (800110c <led_effect_chase_right_update+0xe4>)
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	0013      	movs	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	189b      	adds	r3, r3, r2
 80010b4:	18cb      	adds	r3, r1, r3
 80010b6:	3301      	adds	r3, #1
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	4913      	ldr	r1, [pc, #76]	@ (800110c <led_effect_chase_right_update+0xe4>)
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	0013      	movs	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	189b      	adds	r3, r3, r2
 80010c6:	18cb      	adds	r3, r1, r3
 80010c8:	3302      	adds	r3, #2
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 12; i++) {
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	2b0b      	cmp	r3, #11
 80010d8:	ddc2      	ble.n	8001060 <led_effect_chase_right_update+0x38>
    }

    current_pos = (current_pos == 0) ? 11 : current_pos - 1;
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <led_effect_chase_right_update+0xe0>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d004      	beq.n	80010ec <led_effect_chase_right_update+0xc4>
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <led_effect_chase_right_update+0xe0>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	e000      	b.n	80010ee <led_effect_chase_right_update+0xc6>
 80010ec:	220b      	movs	r2, #11
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <led_effect_chase_right_update+0xe0>)
 80010f0:	701a      	strb	r2, [r3, #0]
    led_driver_update();
 80010f2:	f7ff fe15 	bl	8000d20 <led_driver_update>
 80010f6:	e000      	b.n	80010fa <led_effect_chase_right_update+0xd2>
    if (tick - last_update < interval) return;
 80010f8:	46c0      	nop			@ (mov r8, r8)
}
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b006      	add	sp, #24
 80010fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001100:	200003d0 	.word	0x200003d0
 8001104:	200003c4 	.word	0x200003c4
 8001108:	200003c0 	.word	0x200003c0
 800110c:	20000384 	.word	0x20000384

08001110 <led_effect_config_mode_update>:
    active_led = 0;
    last_update = 0;
    on = 1;
}

void led_effect_config_mode_update(uint32_t tick) {
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    if (tick - last_update < (200 - effect_params.speed * 10)) return;
 8001118:	4b37      	ldr	r3, [pc, #220]	@ (80011f8 <led_effect_config_mode_update+0xe8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	1ad1      	subs	r1, r2, r3
 8001120:	4b36      	ldr	r3, [pc, #216]	@ (80011fc <led_effect_config_mode_update+0xec>)
 8001122:	789b      	ldrb	r3, [r3, #2]
 8001124:	001a      	movs	r2, r3
 8001126:	0013      	movs	r3, r2
 8001128:	075b      	lsls	r3, r3, #29
 800112a:	1a9b      	subs	r3, r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	1a9b      	subs	r3, r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	33c8      	adds	r3, #200	@ 0xc8
 8001134:	4299      	cmp	r1, r3
 8001136:	d35b      	bcc.n	80011f0 <led_effect_config_mode_update+0xe0>
    last_update = tick;
 8001138:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <led_effect_config_mode_update+0xe8>)
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	601a      	str	r2, [r3, #0]

    on ^= 1;  // toggle LEDs an/aus
 800113e:	4b30      	ldr	r3, [pc, #192]	@ (8001200 <led_effect_config_mode_update+0xf0>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2201      	movs	r2, #1
 8001144:	4053      	eors	r3, r2
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <led_effect_config_mode_update+0xf0>)
 800114a:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 12; i++) {
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e03d      	b.n	80011ce <led_effect_config_mode_update+0xbe>
        if (i == active_led && on) {
 8001152:	4b2c      	ldr	r3, [pc, #176]	@ (8001204 <led_effect_config_mode_update+0xf4>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	001a      	movs	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4293      	cmp	r3, r2
 800115c:	d11b      	bne.n	8001196 <led_effect_config_mode_update+0x86>
 800115e:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <led_effect_config_mode_update+0xf0>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d017      	beq.n	8001196 <led_effect_config_mode_update+0x86>
            led_state[i] = hsv_to_rgb(effect_params.hue, 255, effect_params.brightness);
 8001166:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <led_effect_config_mode_update+0xec>)
 8001168:	7818      	ldrb	r0, [r3, #0]
 800116a:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <led_effect_config_mode_update+0xec>)
 800116c:	785a      	ldrb	r2, [r3, #1]
 800116e:	4d26      	ldr	r5, [pc, #152]	@ (8001208 <led_effect_config_mode_update+0xf8>)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	001c      	movs	r4, r3
 8001174:	0064      	lsls	r4, r4, #1
 8001176:	18e4      	adds	r4, r4, r3
 8001178:	21ff      	movs	r1, #255	@ 0xff
 800117a:	f7ff fc67 	bl	8000a4c <hsv_to_rgb>
 800117e:	0003      	movs	r3, r0
 8001180:	1c1a      	adds	r2, r3, #0
 8001182:	5562      	strb	r2, [r4, r5]
 8001184:	041a      	lsls	r2, r3, #16
 8001186:	0e11      	lsrs	r1, r2, #24
 8001188:	192a      	adds	r2, r5, r4
 800118a:	7051      	strb	r1, [r2, #1]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	0e1a      	lsrs	r2, r3, #24
 8001190:	192b      	adds	r3, r5, r4
 8001192:	709a      	strb	r2, [r3, #2]
 8001194:	e018      	b.n	80011c8 <led_effect_config_mode_update+0xb8>
        } else {
            led_state[i].r = 0;
 8001196:	491c      	ldr	r1, [pc, #112]	@ (8001208 <led_effect_config_mode_update+0xf8>)
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	0013      	movs	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	189b      	adds	r3, r3, r2
 80011a0:	2200      	movs	r2, #0
 80011a2:	545a      	strb	r2, [r3, r1]
            led_state[i].g = 0;
 80011a4:	4918      	ldr	r1, [pc, #96]	@ (8001208 <led_effect_config_mode_update+0xf8>)
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	0013      	movs	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	189b      	adds	r3, r3, r2
 80011ae:	18cb      	adds	r3, r1, r3
 80011b0:	3301      	adds	r3, #1
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
            led_state[i].b = 0;
 80011b6:	4914      	ldr	r1, [pc, #80]	@ (8001208 <led_effect_config_mode_update+0xf8>)
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	0013      	movs	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	189b      	adds	r3, r3, r2
 80011c0:	18cb      	adds	r3, r1, r3
 80011c2:	3302      	adds	r3, #2
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 12; i++) {
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3301      	adds	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b0b      	cmp	r3, #11
 80011d2:	ddbe      	ble.n	8001152 <led_effect_config_mode_update+0x42>
        }
    }

    active_led = (active_led + 1) % 12;
 80011d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <led_effect_config_mode_update+0xf4>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	210c      	movs	r1, #12
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff f901 	bl	80003e4 <__aeabi_idivmod>
 80011e2:	000b      	movs	r3, r1
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <led_effect_config_mode_update+0xf4>)
 80011e8:	701a      	strb	r2, [r3, #0]

    led_driver_update();
 80011ea:	f7ff fd99 	bl	8000d20 <led_driver_update>
 80011ee:	e000      	b.n	80011f2 <led_effect_config_mode_update+0xe2>
    if (tick - last_update < (200 - effect_params.speed * 10)) return;
 80011f0:	46c0      	nop			@ (mov r8, r8)
}
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b004      	add	sp, #16
 80011f6:	bdb0      	pop	{r4, r5, r7, pc}
 80011f8:	200003c8 	.word	0x200003c8
 80011fc:	200003d0 	.word	0x200003d0
 8001200:	200003cd 	.word	0x200003cd
 8001204:	200003cc 	.word	0x200003cc
 8001208:	20000384 	.word	0x20000384

0800120c <led_effect_engine_init>:
led_effect_id_t current_effect = LED_EFFECT_NONE;

// KORREKTUR: Globale Definition von effect_params_t effect_params hinzufügen
effect_params_t effect_params;

void led_effect_engine_init(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
    current_effect = LED_EFFECT_NONE;
 8001210:	4b02      	ldr	r3, [pc, #8]	@ (800121c <led_effect_engine_init+0x10>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200003ce 	.word	0x200003ce

08001220 <led_effect_engine_set>:

void led_effect_engine_set(led_effect_id_t effect) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	0002      	movs	r2, r0
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	701a      	strb	r2, [r3, #0]
    current_effect = effect;
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <led_effect_engine_set+0x1c>)
 800122e:	1dfa      	adds	r2, r7, #7
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	701a      	strb	r2, [r3, #0]
}
 8001234:	46c0      	nop			@ (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	b002      	add	sp, #8
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200003ce 	.word	0x200003ce

08001240 <led_effect_engine_update>:

void led_effect_engine_update(uint32_t tick) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    switch (current_effect) {
 8001248:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <led_effect_engine_update+0x74>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b08      	cmp	r3, #8
 800124e:	d82c      	bhi.n	80012aa <led_effect_engine_update+0x6a>
 8001250:	009a      	lsls	r2, r3, #2
 8001252:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <led_effect_engine_update+0x78>)
 8001254:	18d3      	adds	r3, r2, r3
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	469f      	mov	pc, r3
        case LED_EFFECT_SOLID:
            led_effect_solid_update(tick);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	0018      	movs	r0, r3
 800125e:	f000 f91b 	bl	8001498 <led_effect_solid_update>
            break;
 8001262:	e023      	b.n	80012ac <led_effect_engine_update+0x6c>
        case LED_EFFECT_BLINK:
            led_effect_blink_update(tick);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	0018      	movs	r0, r3
 8001268:	f7ff fda0 	bl	8000dac <led_effect_blink_update>
            break;
 800126c:	e01e      	b.n	80012ac <led_effect_engine_update+0x6c>
        case LED_EFFECT_BREATHE:
            led_effect_breathe_update(tick);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff fdfd 	bl	8000e70 <led_effect_breathe_update>
            break;
 8001276:	e019      	b.n	80012ac <led_effect_engine_update+0x6c>
        case LED_EFFECT_FLASH_ALT:
            led_effect_flash_alt_update(tick);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	0018      	movs	r0, r3
 800127c:	f000 f81e 	bl	80012bc <led_effect_flash_alt_update>
            break;
 8001280:	e014      	b.n	80012ac <led_effect_engine_update+0x6c>
        case LED_EFFECT_CHASE_LEFT:
            led_effect_chase_left_update(tick);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff fe5b 	bl	8000f40 <led_effect_chase_left_update>
            break;
 800128a:	e00f      	b.n	80012ac <led_effect_engine_update+0x6c>
        case LED_EFFECT_CHASE_RIGHT:
            led_effect_chase_right_update(tick);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	0018      	movs	r0, r3
 8001290:	f7ff feca 	bl	8001028 <led_effect_chase_right_update>
            break;
 8001294:	e00a      	b.n	80012ac <led_effect_engine_update+0x6c>
        case LED_EFFECT_CONFIG_MODE:
            led_effect_config_mode_update(tick);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff ff39 	bl	8001110 <led_effect_config_mode_update>
            break;
 800129e:	e005      	b.n	80012ac <led_effect_engine_update+0x6c>
        case LED_EFFECT_SINGLE_LED:
            led_effect_single_led_update(tick);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	0018      	movs	r0, r3
 80012a4:	f000 f888 	bl	80013b8 <led_effect_single_led_update>
            break;
 80012a8:	e000      	b.n	80012ac <led_effect_engine_update+0x6c>
        default:
            break;
 80012aa:	46c0      	nop			@ (mov r8, r8)
    }
}
 80012ac:	46c0      	nop			@ (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200003ce 	.word	0x200003ce
 80012b8:	08003954 	.word	0x08003954

080012bc <led_effect_flash_alt_update>:
void led_effect_flash_alt_start(void) {
    flash_on = 0;
    last_update = 0;
}

void led_effect_flash_alt_update(uint32_t tick) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
    if (tick - last_update < (300 - effect_params.speed * 20)) return;
 80012c4:	4b36      	ldr	r3, [pc, #216]	@ (80013a0 <led_effect_flash_alt_update+0xe4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	1ad1      	subs	r1, r2, r3
 80012cc:	4b35      	ldr	r3, [pc, #212]	@ (80013a4 <led_effect_flash_alt_update+0xe8>)
 80012ce:	789b      	ldrb	r3, [r3, #2]
 80012d0:	001a      	movs	r2, r3
 80012d2:	0013      	movs	r3, r2
 80012d4:	071b      	lsls	r3, r3, #28
 80012d6:	1a9b      	subs	r3, r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	332d      	adds	r3, #45	@ 0x2d
 80012e0:	33ff      	adds	r3, #255	@ 0xff
 80012e2:	4299      	cmp	r1, r3
 80012e4:	d358      	bcc.n	8001398 <led_effect_flash_alt_update+0xdc>
    last_update = tick;
 80012e6:	4b2e      	ldr	r3, [pc, #184]	@ (80013a0 <led_effect_flash_alt_update+0xe4>)
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	601a      	str	r2, [r3, #0]

    flash_on ^= 1;
 80012ec:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <led_effect_flash_alt_update+0xec>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2201      	movs	r2, #1
 80012f2:	4053      	eors	r3, r2
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <led_effect_flash_alt_update+0xec>)
 80012f8:	701a      	strb	r2, [r3, #0]

    RGB_t color = flash_on
        ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
 80012fa:	4b2b      	ldr	r3, [pc, #172]	@ (80013a8 <led_effect_flash_alt_update+0xec>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
        : hsv_to_rgb((effect_params.hue + 128) % 256, 255, effect_params.brightness); // Kontrastfarbe
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d014      	beq.n	800132c <led_effect_flash_alt_update+0x70>
        ? hsv_to_rgb(effect_params.hue, 255, effect_params.brightness)
 8001302:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <led_effect_flash_alt_update+0xe8>)
 8001304:	7818      	ldrb	r0, [r3, #0]
 8001306:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <led_effect_flash_alt_update+0xe8>)
 8001308:	785b      	ldrb	r3, [r3, #1]
 800130a:	001a      	movs	r2, r3
 800130c:	21ff      	movs	r1, #255	@ 0xff
 800130e:	f7ff fb9d 	bl	8000a4c <hsv_to_rgb>
 8001312:	0003      	movs	r3, r0
 8001314:	001a      	movs	r2, r3
 8001316:	2308      	movs	r3, #8
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	1c11      	adds	r1, r2, #0
 800131c:	7019      	strb	r1, [r3, #0]
 800131e:	0411      	lsls	r1, r2, #16
 8001320:	0e09      	lsrs	r1, r1, #24
 8001322:	7059      	strb	r1, [r3, #1]
 8001324:	0212      	lsls	r2, r2, #8
 8001326:	0e12      	lsrs	r2, r2, #24
 8001328:	709a      	strb	r2, [r3, #2]
 800132a:	e01c      	b.n	8001366 <led_effect_flash_alt_update+0xaa>
        : hsv_to_rgb((effect_params.hue + 128) % 256, 255, effect_params.brightness); // Kontrastfarbe
 800132c:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <led_effect_flash_alt_update+0xe8>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	3380      	adds	r3, #128	@ 0x80
 8001332:	4a1e      	ldr	r2, [pc, #120]	@ (80013ac <led_effect_flash_alt_update+0xf0>)
 8001334:	4013      	ands	r3, r2
 8001336:	d503      	bpl.n	8001340 <led_effect_flash_alt_update+0x84>
 8001338:	3b01      	subs	r3, #1
 800133a:	4a1d      	ldr	r2, [pc, #116]	@ (80013b0 <led_effect_flash_alt_update+0xf4>)
 800133c:	4313      	orrs	r3, r2
 800133e:	3301      	adds	r3, #1
 8001340:	b2d8      	uxtb	r0, r3
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <led_effect_flash_alt_update+0xe8>)
 8001344:	785b      	ldrb	r3, [r3, #1]
 8001346:	001a      	movs	r2, r3
 8001348:	21ff      	movs	r1, #255	@ 0xff
 800134a:	f7ff fb7f 	bl	8000a4c <hsv_to_rgb>
 800134e:	0003      	movs	r3, r0
 8001350:	001a      	movs	r2, r3
 8001352:	2308      	movs	r3, #8
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	1c11      	adds	r1, r2, #0
 8001358:	7019      	strb	r1, [r3, #0]
 800135a:	0411      	lsls	r1, r2, #16
 800135c:	0e09      	lsrs	r1, r1, #24
 800135e:	7059      	strb	r1, [r3, #1]
 8001360:	0212      	lsls	r2, r2, #8
 8001362:	0e12      	lsrs	r2, r2, #24
 8001364:	709a      	strb	r2, [r3, #2]

    for (int i = 0; i < 12; i++) {
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	e00f      	b.n	800138c <led_effect_flash_alt_update+0xd0>
        led_state[i] = color;
 800136c:	4911      	ldr	r1, [pc, #68]	@ (80013b4 <led_effect_flash_alt_update+0xf8>)
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	0013      	movs	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	189b      	adds	r3, r3, r2
 8001376:	2208      	movs	r2, #8
 8001378:	18ba      	adds	r2, r7, r2
 800137a:	18cb      	adds	r3, r1, r3
 800137c:	0011      	movs	r1, r2
 800137e:	2203      	movs	r2, #3
 8001380:	0018      	movs	r0, r3
 8001382:	f002 fa97 	bl	80038b4 <memcpy>
    for (int i = 0; i < 12; i++) {
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b0b      	cmp	r3, #11
 8001390:	ddec      	ble.n	800136c <led_effect_flash_alt_update+0xb0>
    }

    led_driver_update();
 8001392:	f7ff fcc5 	bl	8000d20 <led_driver_update>
 8001396:	e000      	b.n	800139a <led_effect_flash_alt_update+0xde>
    if (tick - last_update < (300 - effect_params.speed * 20)) return;
 8001398:	46c0      	nop			@ (mov r8, r8)
}
 800139a:	46bd      	mov	sp, r7
 800139c:	b004      	add	sp, #16
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200003d8 	.word	0x200003d8
 80013a4:	200003d0 	.word	0x200003d0
 80013a8:	200003d4 	.word	0x200003d4
 80013ac:	800000ff 	.word	0x800000ff
 80013b0:	ffffff00 	.word	0xffffff00
 80013b4:	20000384 	.word	0x20000384

080013b8 <led_effect_single_led_update>:
void led_effect_single_led_start(void) {
    last_update = 0;
    led_on = 1;
}

void led_effect_single_led_update(uint32_t tick) {
 80013b8:	b5b0      	push	{r4, r5, r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    if (tick - last_update < (500 - effect_params.speed * 20)) return;
 80013c0:	4b31      	ldr	r3, [pc, #196]	@ (8001488 <led_effect_single_led_update+0xd0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	1ad1      	subs	r1, r2, r3
 80013c8:	4b30      	ldr	r3, [pc, #192]	@ (800148c <led_effect_single_led_update+0xd4>)
 80013ca:	789b      	ldrb	r3, [r3, #2]
 80013cc:	001a      	movs	r2, r3
 80013ce:	0013      	movs	r3, r2
 80013d0:	071b      	lsls	r3, r3, #28
 80013d2:	1a9b      	subs	r3, r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	33f5      	adds	r3, #245	@ 0xf5
 80013dc:	33ff      	adds	r3, #255	@ 0xff
 80013de:	4299      	cmp	r1, r3
 80013e0:	d34d      	bcc.n	800147e <led_effect_single_led_update+0xc6>
    last_update = tick;
 80013e2:	4b29      	ldr	r3, [pc, #164]	@ (8001488 <led_effect_single_led_update+0xd0>)
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	601a      	str	r2, [r3, #0]
    led_on ^= 1;
 80013e8:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <led_effect_single_led_update+0xd8>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2201      	movs	r2, #1
 80013ee:	4053      	eors	r3, r2
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b27      	ldr	r3, [pc, #156]	@ (8001490 <led_effect_single_led_update+0xd8>)
 80013f4:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 12; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e03a      	b.n	8001472 <led_effect_single_led_update+0xba>
        if (i == 0 && led_on) {
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d11b      	bne.n	800143a <led_effect_single_led_update+0x82>
 8001402:	4b23      	ldr	r3, [pc, #140]	@ (8001490 <led_effect_single_led_update+0xd8>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d017      	beq.n	800143a <led_effect_single_led_update+0x82>
            led_state[i] = hsv_to_rgb(effect_params.hue, 255, effect_params.brightness);
 800140a:	4b20      	ldr	r3, [pc, #128]	@ (800148c <led_effect_single_led_update+0xd4>)
 800140c:	7818      	ldrb	r0, [r3, #0]
 800140e:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <led_effect_single_led_update+0xd4>)
 8001410:	785a      	ldrb	r2, [r3, #1]
 8001412:	4d20      	ldr	r5, [pc, #128]	@ (8001494 <led_effect_single_led_update+0xdc>)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	001c      	movs	r4, r3
 8001418:	0064      	lsls	r4, r4, #1
 800141a:	18e4      	adds	r4, r4, r3
 800141c:	21ff      	movs	r1, #255	@ 0xff
 800141e:	f7ff fb15 	bl	8000a4c <hsv_to_rgb>
 8001422:	0003      	movs	r3, r0
 8001424:	1c1a      	adds	r2, r3, #0
 8001426:	5562      	strb	r2, [r4, r5]
 8001428:	041a      	lsls	r2, r3, #16
 800142a:	0e11      	lsrs	r1, r2, #24
 800142c:	192a      	adds	r2, r5, r4
 800142e:	7051      	strb	r1, [r2, #1]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	0e1a      	lsrs	r2, r3, #24
 8001434:	192b      	adds	r3, r5, r4
 8001436:	709a      	strb	r2, [r3, #2]
 8001438:	e018      	b.n	800146c <led_effect_single_led_update+0xb4>
        } else {
            led_state[i].r = 0;
 800143a:	4916      	ldr	r1, [pc, #88]	@ (8001494 <led_effect_single_led_update+0xdc>)
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	0013      	movs	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	189b      	adds	r3, r3, r2
 8001444:	2200      	movs	r2, #0
 8001446:	545a      	strb	r2, [r3, r1]
            led_state[i].g = 0;
 8001448:	4912      	ldr	r1, [pc, #72]	@ (8001494 <led_effect_single_led_update+0xdc>)
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	0013      	movs	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	189b      	adds	r3, r3, r2
 8001452:	18cb      	adds	r3, r1, r3
 8001454:	3301      	adds	r3, #1
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
            led_state[i].b = 0;
 800145a:	490e      	ldr	r1, [pc, #56]	@ (8001494 <led_effect_single_led_update+0xdc>)
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	0013      	movs	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	189b      	adds	r3, r3, r2
 8001464:	18cb      	adds	r3, r1, r3
 8001466:	3302      	adds	r3, #2
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 12; i++) {
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3301      	adds	r3, #1
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b0b      	cmp	r3, #11
 8001476:	ddc1      	ble.n	80013fc <led_effect_single_led_update+0x44>
        }
    }

    led_driver_update();
 8001478:	f7ff fc52 	bl	8000d20 <led_driver_update>
 800147c:	e000      	b.n	8001480 <led_effect_single_led_update+0xc8>
    if (tick - last_update < (500 - effect_params.speed * 20)) return;
 800147e:	46c0      	nop			@ (mov r8, r8)
}
 8001480:	46bd      	mov	sp, r7
 8001482:	b004      	add	sp, #16
 8001484:	bdb0      	pop	{r4, r5, r7, pc}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	200003dc 	.word	0x200003dc
 800148c:	200003d0 	.word	0x200003d0
 8001490:	200003e0 	.word	0x200003e0
 8001494:	20000384 	.word	0x20000384

08001498 <led_effect_solid_update>:
void led_effect_solid_start(void) {
    prev_hue = 255;         // Erzwingt Update beim ersten Tick
    prev_brightness = 255;
}

void led_effect_solid_update(uint32_t tick) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    (void)tick;

    if (effect_params.hue != prev_hue || effect_params.brightness != prev_brightness) {
 80014a0:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <led_effect_solid_update+0x90>)
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	4b21      	ldr	r3, [pc, #132]	@ (800152c <led_effect_solid_update+0x94>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d105      	bne.n	80014b8 <led_effect_solid_update+0x20>
 80014ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <led_effect_solid_update+0x90>)
 80014ae:	785a      	ldrb	r2, [r3, #1]
 80014b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <led_effect_solid_update+0x98>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d033      	beq.n	8001520 <led_effect_solid_update+0x88>
        RGB_t color = hsv_to_rgb(effect_params.hue, 255, effect_params.brightness);
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <led_effect_solid_update+0x90>)
 80014ba:	7818      	ldrb	r0, [r3, #0]
 80014bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <led_effect_solid_update+0x90>)
 80014be:	785b      	ldrb	r3, [r3, #1]
 80014c0:	001a      	movs	r2, r3
 80014c2:	21ff      	movs	r1, #255	@ 0xff
 80014c4:	f7ff fac2 	bl	8000a4c <hsv_to_rgb>
 80014c8:	0003      	movs	r3, r0
 80014ca:	001a      	movs	r2, r3
 80014cc:	2308      	movs	r3, #8
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	1c11      	adds	r1, r2, #0
 80014d2:	7019      	strb	r1, [r3, #0]
 80014d4:	0411      	lsls	r1, r2, #16
 80014d6:	0e09      	lsrs	r1, r1, #24
 80014d8:	7059      	strb	r1, [r3, #1]
 80014da:	0212      	lsls	r2, r2, #8
 80014dc:	0e12      	lsrs	r2, r2, #24
 80014de:	709a      	strb	r2, [r3, #2]
        for (int i = 0; i < 12; i++) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e00f      	b.n	8001506 <led_effect_solid_update+0x6e>
            led_state[i] = color;
 80014e6:	4913      	ldr	r1, [pc, #76]	@ (8001534 <led_effect_solid_update+0x9c>)
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	0013      	movs	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	189b      	adds	r3, r3, r2
 80014f0:	2208      	movs	r2, #8
 80014f2:	18ba      	adds	r2, r7, r2
 80014f4:	18cb      	adds	r3, r1, r3
 80014f6:	0011      	movs	r1, r2
 80014f8:	2203      	movs	r2, #3
 80014fa:	0018      	movs	r0, r3
 80014fc:	f002 f9da 	bl	80038b4 <memcpy>
        for (int i = 0; i < 12; i++) {
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3301      	adds	r3, #1
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b0b      	cmp	r3, #11
 800150a:	ddec      	ble.n	80014e6 <led_effect_solid_update+0x4e>
        }
        led_driver_update();
 800150c:	f7ff fc08 	bl	8000d20 <led_driver_update>
        prev_hue = effect_params.hue;
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <led_effect_solid_update+0x90>)
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <led_effect_solid_update+0x94>)
 8001516:	701a      	strb	r2, [r3, #0]
        prev_brightness = effect_params.brightness;
 8001518:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <led_effect_solid_update+0x90>)
 800151a:	785a      	ldrb	r2, [r3, #1]
 800151c:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <led_effect_solid_update+0x98>)
 800151e:	701a      	strb	r2, [r3, #0]
    }
}
 8001520:	46c0      	nop			@ (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b004      	add	sp, #16
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200003d0 	.word	0x200003d0
 800152c:	20000005 	.word	0x20000005
 8001530:	20000006 	.word	0x20000006
 8001534:	20000384 	.word	0x20000384

08001538 <piezo_beep>:
void piezo_init(void) {
    HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 0);
}

void piezo_beep(uint16_t freq_hz, uint16_t duration_ms) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	0002      	movs	r2, r0
 8001540:	1dbb      	adds	r3, r7, #6
 8001542:	801a      	strh	r2, [r3, #0]
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	1c0a      	adds	r2, r1, #0
 8001548:	801a      	strh	r2, [r3, #0]
    uint32_t timer_clock = HAL_RCC_GetPCLK1Freq(); // z.B. 64 MHz
 800154a:	f001 fb11 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 800154e:	0003      	movs	r3, r0
 8001550:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = 1;
 8001552:	2301      	movs	r3, #1
 8001554:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / freq_hz) - 1;
 8001556:	1dbb      	adds	r3, r7, #6
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	0019      	movs	r1, r3
 800155c:	6978      	ldr	r0, [r7, #20]
 800155e:	f7fe fdd1 	bl	8000104 <__udivsi3>
 8001562:	0003      	movs	r3, r0
 8001564:	3b01      	subs	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_PRESCALER(&htim14, prescaler);
 8001568:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <piezo_beep+0x68>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim14, period);
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <piezo_beep+0x68>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001578:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <piezo_beep+0x68>)
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, period / 2);
 800157e:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <piezo_beep+0x68>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	0852      	lsrs	r2, r2, #1
 8001586:	635a      	str	r2, [r3, #52]	@ 0x34

    beep_end_time = HAL_GetTick() + duration_ms;
 8001588:	f000 f9a0 	bl	80018cc <HAL_GetTick>
 800158c:	0002      	movs	r2, r0
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	18d2      	adds	r2, r2, r3
 8001594:	4b03      	ldr	r3, [pc, #12]	@ (80015a4 <piezo_beep+0x6c>)
 8001596:	601a      	str	r2, [r3, #0]
}
 8001598:	46c0      	nop			@ (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b006      	add	sp, #24
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000003c 	.word	0x2000003c
 80015a4:	200003e4 	.word	0x200003e4

080015a8 <sound_beep_start>:
extern uint32_t timer_tick; // <-- hinzufügen

static bool beep_active = false;
static uint32_t beep_end_time = 0;

void sound_beep_start(uint16_t duration_ms, uint16_t frequency_hz) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	0002      	movs	r2, r0
 80015b0:	1dbb      	adds	r3, r7, #6
 80015b2:	801a      	strh	r2, [r3, #0]
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	1c0a      	adds	r2, r1, #0
 80015b8:	801a      	strh	r2, [r3, #0]
    piezo_beep(frequency_hz, duration_ms); // <-- piezo_beep statt piezo_on
 80015ba:	1dbb      	adds	r3, r7, #6
 80015bc:	881a      	ldrh	r2, [r3, #0]
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	0011      	movs	r1, r2
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff ffb7 	bl	8001538 <piezo_beep>
    beep_end_time = timer_tick + duration_ms;
 80015ca:	1dbb      	adds	r3, r7, #6
 80015cc:	881a      	ldrh	r2, [r3, #0]
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <sound_beep_start+0x40>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	18d2      	adds	r2, r2, r3
 80015d4:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <sound_beep_start+0x44>)
 80015d6:	601a      	str	r2, [r3, #0]
    beep_active = true;
 80015d8:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <sound_beep_start+0x48>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
}
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b002      	add	sp, #8
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	20000038 	.word	0x20000038
 80015ec:	200003ec 	.word	0x200003ec
 80015f0:	200003e8 	.word	0x200003e8

080015f4 <sound_config_mode_start>:
    CONFIG_BEEP2
} config_state = CONFIG_IDLE;

static uint32_t timestamp = 0;

void sound_config_mode_start(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
    config_state = CONFIG_BEEP1;
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <sound_config_mode_start+0x28>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
    piezo_beep(4000, 100); // 100 ms, 4 kHz
 80015fe:	23fa      	movs	r3, #250	@ 0xfa
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	2164      	movs	r1, #100	@ 0x64
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff ff97 	bl	8001538 <piezo_beep>
    timestamp = timer_tick + 100;
 800160a:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <sound_config_mode_start+0x2c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3364      	adds	r3, #100	@ 0x64
 8001610:	001a      	movs	r2, r3
 8001612:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <sound_config_mode_start+0x30>)
 8001614:	601a      	str	r2, [r3, #0]
}
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200003f0 	.word	0x200003f0
 8001620:	20000038 	.word	0x20000038
 8001624:	200003f4 	.word	0x200003f4

08001628 <sound_double_beep_start>:
static uint16_t len1 = 80;
static uint16_t pause = 50;
static uint16_t freq2 = 4000;
static uint16_t len2 = 80;

void sound_double_beep_start(uint16_t freq, uint16_t len_ms, uint16_t pause_ms) {
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	0004      	movs	r4, r0
 8001630:	0008      	movs	r0, r1
 8001632:	0011      	movs	r1, r2
 8001634:	1dbb      	adds	r3, r7, #6
 8001636:	1c22      	adds	r2, r4, #0
 8001638:	801a      	strh	r2, [r3, #0]
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	1c02      	adds	r2, r0, #0
 800163e:	801a      	strh	r2, [r3, #0]
 8001640:	1cbb      	adds	r3, r7, #2
 8001642:	1c0a      	adds	r2, r1, #0
 8001644:	801a      	strh	r2, [r3, #0]
    freq1 = freq;
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <sound_double_beep_start+0x74>)
 8001648:	1dba      	adds	r2, r7, #6
 800164a:	8812      	ldrh	r2, [r2, #0]
 800164c:	801a      	strh	r2, [r3, #0]
    len1 = len_ms;
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <sound_double_beep_start+0x78>)
 8001650:	1d3a      	adds	r2, r7, #4
 8001652:	8812      	ldrh	r2, [r2, #0]
 8001654:	801a      	strh	r2, [r3, #0]
    pause = pause_ms;
 8001656:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <sound_double_beep_start+0x7c>)
 8001658:	1cba      	adds	r2, r7, #2
 800165a:	8812      	ldrh	r2, [r2, #0]
 800165c:	801a      	strh	r2, [r3, #0]
    freq2 = freq;   // Optional: zweiten Ton parametrierbar machen
 800165e:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <sound_double_beep_start+0x80>)
 8001660:	1dba      	adds	r2, r7, #6
 8001662:	8812      	ldrh	r2, [r2, #0]
 8001664:	801a      	strh	r2, [r3, #0]
    len2 = len_ms;  // Optional: zweite Länge parametrierbar machen
 8001666:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <sound_double_beep_start+0x84>)
 8001668:	1d3a      	adds	r2, r7, #4
 800166a:	8812      	ldrh	r2, [r2, #0]
 800166c:	801a      	strh	r2, [r3, #0]

    piezo_beep(freq1, len1);
 800166e:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <sound_double_beep_start+0x74>)
 8001670:	881a      	ldrh	r2, [r3, #0]
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <sound_double_beep_start+0x78>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	0019      	movs	r1, r3
 8001678:	0010      	movs	r0, r2
 800167a:	f7ff ff5d 	bl	8001538 <piezo_beep>
    state = DBEEP_FIRST_BEEP;
 800167e:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <sound_double_beep_start+0x88>)
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
    timestamp = timer_tick + len1;
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <sound_double_beep_start+0x78>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	001a      	movs	r2, r3
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <sound_double_beep_start+0x8c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	18d2      	adds	r2, r2, r3
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <sound_double_beep_start+0x90>)
 8001692:	601a      	str	r2, [r3, #0]
}
 8001694:	46c0      	nop			@ (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b003      	add	sp, #12
 800169a:	bd90      	pop	{r4, r7, pc}
 800169c:	20000008 	.word	0x20000008
 80016a0:	2000000a 	.word	0x2000000a
 80016a4:	2000000c 	.word	0x2000000c
 80016a8:	2000000e 	.word	0x2000000e
 80016ac:	20000010 	.word	0x20000010
 80016b0:	200003f8 	.word	0x200003f8
 80016b4:	20000038 	.word	0x20000038
 80016b8:	200003fc 	.word	0x200003fc

080016bc <sound_engine_set>:

// Globale Zustände
static sound_id_t current_sound = SOUND_NONE;
static uint8_t sound_repeat_counter = 0;

void sound_engine_set(sound_id_t sound_id, uint8_t repeat) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	0002      	movs	r2, r0
 80016c4:	1dfb      	adds	r3, r7, #7
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	1dbb      	adds	r3, r7, #6
 80016ca:	1c0a      	adds	r2, r1, #0
 80016cc:	701a      	strb	r2, [r3, #0]
    current_sound = sound_id;
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <sound_engine_set+0x2c>)
 80016d0:	1dfa      	adds	r2, r7, #7
 80016d2:	7812      	ldrb	r2, [r2, #0]
 80016d4:	701a      	strb	r2, [r3, #0]
    sound_repeat_counter = repeat;
 80016d6:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <sound_engine_set+0x30>)
 80016d8:	1dba      	adds	r2, r7, #6
 80016da:	7812      	ldrb	r2, [r2, #0]
 80016dc:	701a      	strb	r2, [r3, #0]
}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	20000400 	.word	0x20000400
 80016ec:	20000401 	.word	0x20000401

080016f0 <sound_engine_play>:

void sound_engine_play(sound_id_t sound) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	0002      	movs	r2, r0
 80016f8:	1dfb      	adds	r3, r7, #7
 80016fa:	701a      	strb	r2, [r3, #0]
    sound_engine_set(sound, 1);
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	0018      	movs	r0, r3
 8001704:	f7ff ffda 	bl	80016bc <sound_engine_set>
}
 8001708:	46c0      	nop			@ (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}

08001710 <sound_engine_tick>:

void sound_engine_tick(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
    if (current_sound == SOUND_NONE) return;
 8001714:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <sound_engine_tick+0x68>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d02a      	beq.n	8001772 <sound_engine_tick+0x62>

    switch (current_sound) {
 800171c:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <sound_engine_tick+0x68>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d014      	beq.n	800174e <sound_engine_tick+0x3e>
 8001724:	dc16      	bgt.n	8001754 <sound_engine_tick+0x44>
 8001726:	2b01      	cmp	r3, #1
 8001728:	d002      	beq.n	8001730 <sound_engine_tick+0x20>
 800172a:	2b02      	cmp	r3, #2
 800172c:	d007      	beq.n	800173e <sound_engine_tick+0x2e>
            break;
        case SOUND_CONFIG_MODE:
            sound_config_mode_start();
            break;
        default:
            break;
 800172e:	e011      	b.n	8001754 <sound_engine_tick+0x44>
            sound_beep_start(80, 4000); // Beispiel: 80 ms, 4 kHz
 8001730:	23fa      	movs	r3, #250	@ 0xfa
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	0019      	movs	r1, r3
 8001736:	2050      	movs	r0, #80	@ 0x50
 8001738:	f7ff ff36 	bl	80015a8 <sound_beep_start>
            break;
 800173c:	e00b      	b.n	8001756 <sound_engine_tick+0x46>
            sound_double_beep_start(4000, 80, 50); // freq, len, pause
 800173e:	23fa      	movs	r3, #250	@ 0xfa
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	2232      	movs	r2, #50	@ 0x32
 8001744:	2150      	movs	r1, #80	@ 0x50
 8001746:	0018      	movs	r0, r3
 8001748:	f7ff ff6e 	bl	8001628 <sound_double_beep_start>
            break;
 800174c:	e003      	b.n	8001756 <sound_engine_tick+0x46>
            sound_config_mode_start();
 800174e:	f7ff ff51 	bl	80015f4 <sound_config_mode_start>
            break;
 8001752:	e000      	b.n	8001756 <sound_engine_tick+0x46>
            break;
 8001754:	46c0      	nop			@ (mov r8, r8)
    }

    if (--sound_repeat_counter == 0) {
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <sound_engine_tick+0x6c>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	3b01      	subs	r3, #1
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <sound_engine_tick+0x6c>)
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <sound_engine_tick+0x6c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d104      	bne.n	8001774 <sound_engine_tick+0x64>
        current_sound = SOUND_NONE;
 800176a:	4b03      	ldr	r3, [pc, #12]	@ (8001778 <sound_engine_tick+0x68>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
 8001770:	e000      	b.n	8001774 <sound_engine_tick+0x64>
    if (current_sound == SOUND_NONE) return;
 8001772:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000400 	.word	0x20000400
 800177c:	20000401 	.word	0x20000401

08001780 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001780:	480d      	ldr	r0, [pc, #52]	@ (80017b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001782:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001784:	f7ff f842 	bl	800080c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <LoopForever+0x6>)
  ldr r1, =_edata
 800178a:	490d      	ldr	r1, [pc, #52]	@ (80017c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800178c:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <LoopForever+0xe>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a0:	4c0a      	ldr	r4, [pc, #40]	@ (80017cc <LoopForever+0x16>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017ae:	f002 f85d 	bl	800386c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80017b2:	f7fe ff31 	bl	8000618 <main>

080017b6 <LoopForever>:

LoopForever:
  b LoopForever
 80017b6:	e7fe      	b.n	80017b6 <LoopForever>
  ldr   r0, =_estack
 80017b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80017c4:	080039d4 	.word	0x080039d4
  ldr r2, =_sbss
 80017c8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80017cc:	20000408 	.word	0x20000408

080017d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC1_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017da:	1dfb      	adds	r3, r7, #7
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <HAL_Init+0x3c>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <HAL_Init+0x3c>)
 80017e6:	2180      	movs	r1, #128	@ 0x80
 80017e8:	0049      	lsls	r1, r1, #1
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ee:	2003      	movs	r0, #3
 80017f0:	f000 f810 	bl	8001814 <HAL_InitTick>
 80017f4:	1e03      	subs	r3, r0, #0
 80017f6:	d003      	beq.n	8001800 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80017f8:	1dfb      	adds	r3, r7, #7
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	e001      	b.n	8001804 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7fe ffba 	bl	8000778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	781b      	ldrb	r3, [r3, #0]
}
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	b002      	add	sp, #8
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40022000 	.word	0x40022000

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800181c:	230f      	movs	r3, #15
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001824:	4b1d      	ldr	r3, [pc, #116]	@ (800189c <HAL_InitTick+0x88>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d02b      	beq.n	8001884 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800182c:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <HAL_InitTick+0x8c>)
 800182e:	681c      	ldr	r4, [r3, #0]
 8001830:	4b1a      	ldr	r3, [pc, #104]	@ (800189c <HAL_InitTick+0x88>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	0019      	movs	r1, r3
 8001836:	23fa      	movs	r3, #250	@ 0xfa
 8001838:	0098      	lsls	r0, r3, #2
 800183a:	f7fe fc63 	bl	8000104 <__udivsi3>
 800183e:	0003      	movs	r3, r0
 8001840:	0019      	movs	r1, r3
 8001842:	0020      	movs	r0, r4
 8001844:	f7fe fc5e 	bl	8000104 <__udivsi3>
 8001848:	0003      	movs	r3, r0
 800184a:	0018      	movs	r0, r3
 800184c:	f000 f93d 	bl	8001aca <HAL_SYSTICK_Config>
 8001850:	1e03      	subs	r3, r0, #0
 8001852:	d112      	bne.n	800187a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d80a      	bhi.n	8001870 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	2301      	movs	r3, #1
 800185e:	425b      	negs	r3, r3
 8001860:	2200      	movs	r2, #0
 8001862:	0018      	movs	r0, r3
 8001864:	f000 f90c 	bl	8001a80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001868:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <HAL_InitTick+0x90>)
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e00d      	b.n	800188c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001870:	230f      	movs	r3, #15
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	e008      	b.n	800188c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800187a:	230f      	movs	r3, #15
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e003      	b.n	800188c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001884:	230f      	movs	r3, #15
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800188c:	230f      	movs	r3, #15
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	781b      	ldrb	r3, [r3, #0]
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b005      	add	sp, #20
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	20000018 	.word	0x20000018
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000014 	.word	0x20000014

080018a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <HAL_IncTick+0x1c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	001a      	movs	r2, r3
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <HAL_IncTick+0x20>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	18d2      	adds	r2, r2, r3
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <HAL_IncTick+0x20>)
 80018ba:	601a      	str	r2, [r3, #0]
}
 80018bc:	46c0      	nop			@ (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	20000018 	.word	0x20000018
 80018c8:	20000404 	.word	0x20000404

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b02      	ldr	r3, [pc, #8]	@ (80018dc <HAL_GetTick+0x10>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	20000404 	.word	0x20000404

080018e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e8:	f7ff fff0 	bl	80018cc <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3301      	adds	r3, #1
 80018f8:	d005      	beq.n	8001906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <HAL_Delay+0x44>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	001a      	movs	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	189b      	adds	r3, r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	f7ff ffe0 	bl	80018cc <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	429a      	cmp	r2, r3
 8001916:	d8f7      	bhi.n	8001908 <HAL_Delay+0x28>
  {
  }
}
 8001918:	46c0      	nop			@ (mov r8, r8)
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	b004      	add	sp, #16
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	20000018 	.word	0x20000018

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	0002      	movs	r2, r0
 8001930:	1dfb      	adds	r3, r7, #7
 8001932:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b7f      	cmp	r3, #127	@ 0x7f
 800193a:	d809      	bhi.n	8001950 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193c:	1dfb      	adds	r3, r7, #7
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	001a      	movs	r2, r3
 8001942:	231f      	movs	r3, #31
 8001944:	401a      	ands	r2, r3
 8001946:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <__NVIC_EnableIRQ+0x30>)
 8001948:	2101      	movs	r1, #1
 800194a:	4091      	lsls	r1, r2
 800194c:	000a      	movs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001950:	46c0      	nop			@ (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	0002      	movs	r2, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001970:	d828      	bhi.n	80019c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001972:	4a2f      	ldr	r2, [pc, #188]	@ (8001a30 <__NVIC_SetPriority+0xd4>)
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b25b      	sxtb	r3, r3
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	33c0      	adds	r3, #192	@ 0xc0
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	589b      	ldr	r3, [r3, r2]
 8001982:	1dfa      	adds	r2, r7, #7
 8001984:	7812      	ldrb	r2, [r2, #0]
 8001986:	0011      	movs	r1, r2
 8001988:	2203      	movs	r2, #3
 800198a:	400a      	ands	r2, r1
 800198c:	00d2      	lsls	r2, r2, #3
 800198e:	21ff      	movs	r1, #255	@ 0xff
 8001990:	4091      	lsls	r1, r2
 8001992:	000a      	movs	r2, r1
 8001994:	43d2      	mvns	r2, r2
 8001996:	401a      	ands	r2, r3
 8001998:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	019b      	lsls	r3, r3, #6
 800199e:	22ff      	movs	r2, #255	@ 0xff
 80019a0:	401a      	ands	r2, r3
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	0018      	movs	r0, r3
 80019a8:	2303      	movs	r3, #3
 80019aa:	4003      	ands	r3, r0
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019b0:	481f      	ldr	r0, [pc, #124]	@ (8001a30 <__NVIC_SetPriority+0xd4>)
 80019b2:	1dfb      	adds	r3, r7, #7
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b25b      	sxtb	r3, r3
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	430a      	orrs	r2, r1
 80019bc:	33c0      	adds	r3, #192	@ 0xc0
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019c2:	e031      	b.n	8001a28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a34 <__NVIC_SetPriority+0xd8>)
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	0019      	movs	r1, r3
 80019cc:	230f      	movs	r3, #15
 80019ce:	400b      	ands	r3, r1
 80019d0:	3b08      	subs	r3, #8
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3306      	adds	r3, #6
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	18d3      	adds	r3, r2, r3
 80019da:	3304      	adds	r3, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	1dfa      	adds	r2, r7, #7
 80019e0:	7812      	ldrb	r2, [r2, #0]
 80019e2:	0011      	movs	r1, r2
 80019e4:	2203      	movs	r2, #3
 80019e6:	400a      	ands	r2, r1
 80019e8:	00d2      	lsls	r2, r2, #3
 80019ea:	21ff      	movs	r1, #255	@ 0xff
 80019ec:	4091      	lsls	r1, r2
 80019ee:	000a      	movs	r2, r1
 80019f0:	43d2      	mvns	r2, r2
 80019f2:	401a      	ands	r2, r3
 80019f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	019b      	lsls	r3, r3, #6
 80019fa:	22ff      	movs	r2, #255	@ 0xff
 80019fc:	401a      	ands	r2, r3
 80019fe:	1dfb      	adds	r3, r7, #7
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	0018      	movs	r0, r3
 8001a04:	2303      	movs	r3, #3
 8001a06:	4003      	ands	r3, r0
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a0c:	4809      	ldr	r0, [pc, #36]	@ (8001a34 <__NVIC_SetPriority+0xd8>)
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	001c      	movs	r4, r3
 8001a14:	230f      	movs	r3, #15
 8001a16:	4023      	ands	r3, r4
 8001a18:	3b08      	subs	r3, #8
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	3306      	adds	r3, #6
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	18c3      	adds	r3, r0, r3
 8001a24:	3304      	adds	r3, #4
 8001a26:	601a      	str	r2, [r3, #0]
}
 8001a28:	46c0      	nop			@ (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b003      	add	sp, #12
 8001a2e:	bd90      	pop	{r4, r7, pc}
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	1e5a      	subs	r2, r3, #1
 8001a44:	2380      	movs	r3, #128	@ 0x80
 8001a46:	045b      	lsls	r3, r3, #17
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d301      	bcc.n	8001a50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e010      	b.n	8001a72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a50:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <SysTick_Config+0x44>)
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	3a01      	subs	r2, #1
 8001a56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a58:	2301      	movs	r3, #1
 8001a5a:	425b      	negs	r3, r3
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f7ff ff7c 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a64:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <SysTick_Config+0x44>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	@ (8001a7c <SysTick_Config+0x44>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	1c02      	adds	r2, r0, #0
 8001a90:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b25b      	sxtb	r3, r3
 8001a9a:	0011      	movs	r1, r2
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff ff5d 	bl	800195c <__NVIC_SetPriority>
}
 8001aa2:	46c0      	nop			@ (mov r8, r8)
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b004      	add	sp, #16
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab6:	1dfb      	adds	r3, r7, #7
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7ff ff33 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff ffaf 	bl	8001a38 <SysTick_Config>
 8001ada:	0003      	movs	r3, r0
}
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e077      	b.n	8001be6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a3d      	ldr	r2, [pc, #244]	@ (8001bf0 <HAL_DMA_Init+0x10c>)
 8001afc:	4694      	mov	ip, r2
 8001afe:	4463      	add	r3, ip
 8001b00:	2114      	movs	r1, #20
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7fe fafe 	bl	8000104 <__udivsi3>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	009a      	lsls	r2, r3, #2
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2225      	movs	r2, #37	@ 0x25
 8001b14:	2102      	movs	r1, #2
 8001b16:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4934      	ldr	r1, [pc, #208]	@ (8001bf4 <HAL_DMA_Init+0x110>)
 8001b24:	400a      	ands	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f000 f8fb 	bl	8001d5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	2380      	movs	r3, #128	@ 0x80
 8001b6c:	01db      	lsls	r3, r3, #7
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d102      	bne.n	8001b78 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b80:	213f      	movs	r1, #63	@ 0x3f
 8001b82:	400a      	ands	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b8e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d011      	beq.n	8001bbc <HAL_DMA_Init+0xd8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d80d      	bhi.n	8001bbc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 f906 	bl	8001db4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	e008      	b.n	8001bce <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2225      	movs	r2, #37	@ 0x25
 8001bd8:	2101      	movs	r1, #1
 8001bda:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2224      	movs	r2, #36	@ 0x24
 8001be0:	2100      	movs	r1, #0
 8001be2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b002      	add	sp, #8
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	bffdfff8 	.word	0xbffdfff8
 8001bf4:	ffff800f 	.word	0xffff800f

08001bf8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001c00:	4b55      	ldr	r3, [pc, #340]	@ (8001d58 <HAL_DMA_IRQHandler+0x160>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	221c      	movs	r2, #28
 8001c14:	4013      	ands	r3, r2
 8001c16:	2204      	movs	r2, #4
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	0013      	movs	r3, r2
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d027      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x7a>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2204      	movs	r2, #4
 8001c26:	4013      	ands	r3, r2
 8001c28:	d023      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2220      	movs	r2, #32
 8001c32:	4013      	ands	r3, r2
 8001c34:	d107      	bne.n	8001c46 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2104      	movs	r1, #4
 8001c42:	438a      	bics	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001c46:	4b44      	ldr	r3, [pc, #272]	@ (8001d58 <HAL_DMA_IRQHandler+0x160>)
 8001c48:	6859      	ldr	r1, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	221c      	movs	r2, #28
 8001c50:	4013      	ands	r3, r2
 8001c52:	2204      	movs	r2, #4
 8001c54:	409a      	lsls	r2, r3
 8001c56:	4b40      	ldr	r3, [pc, #256]	@ (8001d58 <HAL_DMA_IRQHandler+0x160>)
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d100      	bne.n	8001c66 <HAL_DMA_IRQHandler+0x6e>
 8001c64:	e073      	b.n	8001d4e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	0010      	movs	r0, r2
 8001c6e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001c70:	e06d      	b.n	8001d4e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	221c      	movs	r2, #28
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	0013      	movs	r3, r2
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4013      	ands	r3, r2
 8001c84:	d02e      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0xec>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d02a      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2220      	movs	r2, #32
 8001c96:	4013      	ands	r3, r2
 8001c98:	d10b      	bne.n	8001cb2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	210a      	movs	r1, #10
 8001ca6:	438a      	bics	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2225      	movs	r2, #37	@ 0x25
 8001cae:	2101      	movs	r1, #1
 8001cb0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001cb2:	4b29      	ldr	r3, [pc, #164]	@ (8001d58 <HAL_DMA_IRQHandler+0x160>)
 8001cb4:	6859      	ldr	r1, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	221c      	movs	r2, #28
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	4b25      	ldr	r3, [pc, #148]	@ (8001d58 <HAL_DMA_IRQHandler+0x160>)
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2224      	movs	r2, #36	@ 0x24
 8001ccc:	2100      	movs	r1, #0
 8001cce:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d03a      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	0010      	movs	r0, r2
 8001ce0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001ce2:	e034      	b.n	8001d4e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	221c      	movs	r2, #28
 8001cea:	4013      	ands	r3, r2
 8001cec:	2208      	movs	r2, #8
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	0013      	movs	r3, r2
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d02b      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x158>
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2208      	movs	r2, #8
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d027      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	210e      	movs	r1, #14
 8001d0c:	438a      	bics	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <HAL_DMA_IRQHandler+0x160>)
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	221c      	movs	r2, #28
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <HAL_DMA_IRQHandler+0x160>)
 8001d22:	430a      	orrs	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2225      	movs	r2, #37	@ 0x25
 8001d30:	2101      	movs	r1, #1
 8001d32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2224      	movs	r2, #36	@ 0x24
 8001d38:	2100      	movs	r1, #0
 8001d3a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	0010      	movs	r0, r2
 8001d4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	46c0      	nop			@ (mov r8, r8)
}
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b004      	add	sp, #16
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40020000 	.word	0x40020000

08001d5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	4a10      	ldr	r2, [pc, #64]	@ (8001dac <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001d6c:	4694      	mov	ip, r2
 8001d6e:	4463      	add	r3, ip
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	001a      	movs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	23ff      	movs	r3, #255	@ 0xff
 8001d80:	4013      	ands	r3, r2
 8001d82:	3b08      	subs	r3, #8
 8001d84:	2114      	movs	r1, #20
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7fe f9bc 	bl	8000104 <__udivsi3>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a07      	ldr	r2, [pc, #28]	@ (8001db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001d94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	221f      	movs	r2, #31
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001da4:	46c0      	nop			@ (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b004      	add	sp, #16
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	10008200 	.word	0x10008200
 8001db0:	40020880 	.word	0x40020880

08001db4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	223f      	movs	r2, #63	@ 0x3f
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001dca:	4694      	mov	ip, r2
 8001dcc:	4463      	add	r3, ip
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	001a      	movs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001dda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	4013      	ands	r3, r2
 8001de4:	2201      	movs	r2, #1
 8001de6:	409a      	lsls	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001dec:	46c0      	nop			@ (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b004      	add	sp, #16
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	1000823f 	.word	0x1000823f
 8001df8:	40020940 	.word	0x40020940

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0a:	e147      	b.n	800209c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4091      	lsls	r1, r2
 8001e16:	000a      	movs	r2, r1
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d100      	bne.n	8001e24 <HAL_GPIO_Init+0x28>
 8001e22:	e138      	b.n	8002096 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2203      	movs	r2, #3
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d005      	beq.n	8001e3c <HAL_GPIO_Init+0x40>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d130      	bne.n	8001e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	0013      	movs	r3, r2
 8001e4c:	43da      	mvns	r2, r3
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	0013      	movs	r3, r2
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e72:	2201      	movs	r2, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	409a      	lsls	r2, r3
 8001e78:	0013      	movs	r3, r2
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	2201      	movs	r2, #1
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	0013      	movs	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d017      	beq.n	8001eda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	0013      	movs	r3, r2
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2203      	movs	r2, #3
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d123      	bne.n	8001f2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	08da      	lsrs	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3208      	adds	r2, #8
 8001eee:	0092      	lsls	r2, r2, #2
 8001ef0:	58d3      	ldr	r3, [r2, r3]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2207      	movs	r2, #7
 8001ef8:	4013      	ands	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	409a      	lsls	r2, r3
 8001f00:	0013      	movs	r3, r2
 8001f02:	43da      	mvns	r2, r3
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2107      	movs	r1, #7
 8001f12:	400b      	ands	r3, r1
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	409a      	lsls	r2, r3
 8001f18:	0013      	movs	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	08da      	lsrs	r2, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3208      	adds	r2, #8
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	6939      	ldr	r1, [r7, #16]
 8001f2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	0013      	movs	r3, r2
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	409a      	lsls	r2, r3
 8001f54:	0013      	movs	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	23c0      	movs	r3, #192	@ 0xc0
 8001f68:	029b      	lsls	r3, r3, #10
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d100      	bne.n	8001f70 <HAL_GPIO_Init+0x174>
 8001f6e:	e092      	b.n	8002096 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001f70:	4a50      	ldr	r2, [pc, #320]	@ (80020b4 <HAL_GPIO_Init+0x2b8>)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3318      	adds	r3, #24
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	589b      	ldr	r3, [r3, r2]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2203      	movs	r2, #3
 8001f82:	4013      	ands	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	220f      	movs	r2, #15
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	0013      	movs	r3, r2
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	23a0      	movs	r3, #160	@ 0xa0
 8001f98:	05db      	lsls	r3, r3, #23
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0x1ca>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a45      	ldr	r2, [pc, #276]	@ (80020b8 <HAL_GPIO_Init+0x2bc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_GPIO_Init+0x1c6>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a44      	ldr	r2, [pc, #272]	@ (80020bc <HAL_GPIO_Init+0x2c0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <HAL_GPIO_Init+0x1c2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a43      	ldr	r2, [pc, #268]	@ (80020c0 <HAL_GPIO_Init+0x2c4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_GPIO_Init+0x1be>
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x1cc>
 8001fba:	2305      	movs	r3, #5
 8001fbc:	e004      	b.n	8001fc8 <HAL_GPIO_Init+0x1cc>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e002      	b.n	8001fc8 <HAL_GPIO_Init+0x1cc>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_GPIO_Init+0x1cc>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	2103      	movs	r1, #3
 8001fcc:	400a      	ands	r2, r1
 8001fce:	00d2      	lsls	r2, r2, #3
 8001fd0:	4093      	lsls	r3, r2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001fd8:	4936      	ldr	r1, [pc, #216]	@ (80020b4 <HAL_GPIO_Init+0x2b8>)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	3318      	adds	r3, #24
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fe6:	4b33      	ldr	r3, [pc, #204]	@ (80020b4 <HAL_GPIO_Init+0x2b8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	2380      	movs	r3, #128	@ 0x80
 8001ffc:	035b      	lsls	r3, r3, #13
 8001ffe:	4013      	ands	r3, r2
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800200a:	4b2a      	ldr	r3, [pc, #168]	@ (80020b4 <HAL_GPIO_Init+0x2b8>)
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002010:	4b28      	ldr	r3, [pc, #160]	@ (80020b4 <HAL_GPIO_Init+0x2b8>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43da      	mvns	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	2380      	movs	r3, #128	@ 0x80
 8002026:	039b      	lsls	r3, r3, #14
 8002028:	4013      	ands	r3, r2
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002034:	4b1f      	ldr	r3, [pc, #124]	@ (80020b4 <HAL_GPIO_Init+0x2b8>)
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800203a:	4a1e      	ldr	r2, [pc, #120]	@ (80020b4 <HAL_GPIO_Init+0x2b8>)
 800203c:	2384      	movs	r3, #132	@ 0x84
 800203e:	58d3      	ldr	r3, [r2, r3]
 8002040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	43da      	mvns	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	029b      	lsls	r3, r3, #10
 8002054:	4013      	ands	r3, r2
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002060:	4914      	ldr	r1, [pc, #80]	@ (80020b4 <HAL_GPIO_Init+0x2b8>)
 8002062:	2284      	movs	r2, #132	@ 0x84
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002068:	4a12      	ldr	r2, [pc, #72]	@ (80020b4 <HAL_GPIO_Init+0x2b8>)
 800206a:	2380      	movs	r3, #128	@ 0x80
 800206c:	58d3      	ldr	r3, [r2, r3]
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43da      	mvns	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	2380      	movs	r3, #128	@ 0x80
 8002080:	025b      	lsls	r3, r3, #9
 8002082:	4013      	ands	r3, r2
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800208e:	4909      	ldr	r1, [pc, #36]	@ (80020b4 <HAL_GPIO_Init+0x2b8>)
 8002090:	2280      	movs	r2, #128	@ 0x80
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	3301      	adds	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	40da      	lsrs	r2, r3
 80020a4:	1e13      	subs	r3, r2, #0
 80020a6:	d000      	beq.n	80020aa <HAL_GPIO_Init+0x2ae>
 80020a8:	e6b0      	b.n	8001e0c <HAL_GPIO_Init+0x10>
  }
}
 80020aa:	46c0      	nop			@ (mov r8, r8)
 80020ac:	46c0      	nop			@ (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b006      	add	sp, #24
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021800 	.word	0x40021800
 80020b8:	50000400 	.word	0x50000400
 80020bc:	50000800 	.word	0x50000800
 80020c0:	50000c00 	.word	0x50000c00

080020c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	0008      	movs	r0, r1
 80020ce:	0011      	movs	r1, r2
 80020d0:	1cbb      	adds	r3, r7, #2
 80020d2:	1c02      	adds	r2, r0, #0
 80020d4:	801a      	strh	r2, [r3, #0]
 80020d6:	1c7b      	adds	r3, r7, #1
 80020d8:	1c0a      	adds	r2, r1, #0
 80020da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020dc:	1c7b      	adds	r3, r7, #1
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d004      	beq.n	80020ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020e4:	1cbb      	adds	r3, r7, #2
 80020e6:	881a      	ldrh	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020ec:	e003      	b.n	80020f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ee:	1cbb      	adds	r3, r7, #2
 80020f0:	881a      	ldrh	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	0002      	movs	r2, r0
 8002108:	1dbb      	adds	r3, r7, #6
 800210a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800210c:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	1dba      	adds	r2, r7, #6
 8002112:	8812      	ldrh	r2, [r2, #0]
 8002114:	4013      	ands	r3, r2
 8002116:	d008      	beq.n	800212a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002118:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800211a:	1dba      	adds	r2, r7, #6
 800211c:	8812      	ldrh	r2, [r2, #0]
 800211e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002120:	1dbb      	adds	r3, r7, #6
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	0018      	movs	r0, r3
 8002126:	f000 f815 	bl	8002154 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	1dba      	adds	r2, r7, #6
 8002130:	8812      	ldrh	r2, [r2, #0]
 8002132:	4013      	ands	r3, r2
 8002134:	d008      	beq.n	8002148 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002138:	1dba      	adds	r2, r7, #6
 800213a:	8812      	ldrh	r2, [r2, #0]
 800213c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800213e:	1dbb      	adds	r3, r7, #6
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	0018      	movs	r0, r3
 8002144:	f000 f810 	bl	8002168 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002148:	46c0      	nop			@ (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021800 	.word	0x40021800

08002154 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	0002      	movs	r2, r0
 800215c:	1dbb      	adds	r3, r7, #6
 800215e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002160:	46c0      	nop			@ (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b002      	add	sp, #8
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	0002      	movs	r2, r0
 8002170:	1dbb      	adds	r3, r7, #6
 8002172:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002174:	46c0      	nop			@ (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	b002      	add	sp, #8
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002184:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a19      	ldr	r2, [pc, #100]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800218a:	4013      	ands	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	4b17      	ldr	r3, [pc, #92]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	2380      	movs	r3, #128	@ 0x80
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	429a      	cmp	r2, r3
 800219e:	d11f      	bne.n	80021e0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80021a0:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	0013      	movs	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	189b      	adds	r3, r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4912      	ldr	r1, [pc, #72]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80021ae:	0018      	movs	r0, r3
 80021b0:	f7fd ffa8 	bl	8000104 <__udivsi3>
 80021b4:	0003      	movs	r3, r0
 80021b6:	3301      	adds	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ba:	e008      	b.n	80021ce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e001      	b.n	80021ce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e009      	b.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ce:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	2380      	movs	r3, #128	@ 0x80
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	401a      	ands	r2, r3
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	429a      	cmp	r2, r3
 80021de:	d0ed      	beq.n	80021bc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b004      	add	sp, #16
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	40007000 	.word	0x40007000
 80021f0:	fffff9ff 	.word	0xfffff9ff
 80021f4:	20000000 	.word	0x20000000
 80021f8:	000f4240 	.word	0x000f4240

080021fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	23e0      	movs	r3, #224	@ 0xe0
 8002206:	01db      	lsls	r3, r3, #7
 8002208:	4013      	ands	r3, r2
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000

08002214 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e2fe      	b.n	8002824 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2201      	movs	r2, #1
 800222c:	4013      	ands	r3, r2
 800222e:	d100      	bne.n	8002232 <HAL_RCC_OscConfig+0x1e>
 8002230:	e07c      	b.n	800232c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002232:	4bc3      	ldr	r3, [pc, #780]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2238      	movs	r2, #56	@ 0x38
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800223c:	4bc0      	ldr	r3, [pc, #768]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2203      	movs	r2, #3
 8002242:	4013      	ands	r3, r2
 8002244:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b10      	cmp	r3, #16
 800224a:	d102      	bne.n	8002252 <HAL_RCC_OscConfig+0x3e>
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d002      	beq.n	8002258 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	2b08      	cmp	r3, #8
 8002256:	d10b      	bne.n	8002270 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	4bb9      	ldr	r3, [pc, #740]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	029b      	lsls	r3, r3, #10
 8002260:	4013      	ands	r3, r2
 8002262:	d062      	beq.n	800232a <HAL_RCC_OscConfig+0x116>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d15e      	bne.n	800232a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e2d9      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	025b      	lsls	r3, r3, #9
 8002278:	429a      	cmp	r2, r3
 800227a:	d107      	bne.n	800228c <HAL_RCC_OscConfig+0x78>
 800227c:	4bb0      	ldr	r3, [pc, #704]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4baf      	ldr	r3, [pc, #700]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 8002282:	2180      	movs	r1, #128	@ 0x80
 8002284:	0249      	lsls	r1, r1, #9
 8002286:	430a      	orrs	r2, r1
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e020      	b.n	80022ce <HAL_RCC_OscConfig+0xba>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	23a0      	movs	r3, #160	@ 0xa0
 8002292:	02db      	lsls	r3, r3, #11
 8002294:	429a      	cmp	r2, r3
 8002296:	d10e      	bne.n	80022b6 <HAL_RCC_OscConfig+0xa2>
 8002298:	4ba9      	ldr	r3, [pc, #676]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4ba8      	ldr	r3, [pc, #672]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 800229e:	2180      	movs	r1, #128	@ 0x80
 80022a0:	02c9      	lsls	r1, r1, #11
 80022a2:	430a      	orrs	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	4ba6      	ldr	r3, [pc, #664]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4ba5      	ldr	r3, [pc, #660]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80022ac:	2180      	movs	r1, #128	@ 0x80
 80022ae:	0249      	lsls	r1, r1, #9
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e00b      	b.n	80022ce <HAL_RCC_OscConfig+0xba>
 80022b6:	4ba2      	ldr	r3, [pc, #648]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4ba1      	ldr	r3, [pc, #644]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80022bc:	49a1      	ldr	r1, [pc, #644]	@ (8002544 <HAL_RCC_OscConfig+0x330>)
 80022be:	400a      	ands	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	4b9f      	ldr	r3, [pc, #636]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b9e      	ldr	r3, [pc, #632]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80022c8:	499f      	ldr	r1, [pc, #636]	@ (8002548 <HAL_RCC_OscConfig+0x334>)
 80022ca:	400a      	ands	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d014      	beq.n	8002300 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7ff faf9 	bl	80018cc <HAL_GetTick>
 80022da:	0003      	movs	r3, r0
 80022dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e0:	f7ff faf4 	bl	80018cc <HAL_GetTick>
 80022e4:	0002      	movs	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	@ 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e298      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f2:	4b93      	ldr	r3, [pc, #588]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	2380      	movs	r3, #128	@ 0x80
 80022f8:	029b      	lsls	r3, r3, #10
 80022fa:	4013      	ands	r3, r2
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0xcc>
 80022fe:	e015      	b.n	800232c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7ff fae4 	bl	80018cc <HAL_GetTick>
 8002304:	0003      	movs	r3, r0
 8002306:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230a:	f7ff fadf 	bl	80018cc <HAL_GetTick>
 800230e:	0002      	movs	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b64      	cmp	r3, #100	@ 0x64
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e283      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800231c:	4b88      	ldr	r3, [pc, #544]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	029b      	lsls	r3, r3, #10
 8002324:	4013      	ands	r3, r2
 8002326:	d1f0      	bne.n	800230a <HAL_RCC_OscConfig+0xf6>
 8002328:	e000      	b.n	800232c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2202      	movs	r2, #2
 8002332:	4013      	ands	r3, r2
 8002334:	d100      	bne.n	8002338 <HAL_RCC_OscConfig+0x124>
 8002336:	e099      	b.n	800246c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002338:	4b81      	ldr	r3, [pc, #516]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2238      	movs	r2, #56	@ 0x38
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002342:	4b7f      	ldr	r3, [pc, #508]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2203      	movs	r2, #3
 8002348:	4013      	ands	r3, r2
 800234a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b10      	cmp	r3, #16
 8002350:	d102      	bne.n	8002358 <HAL_RCC_OscConfig+0x144>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d002      	beq.n	800235e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d135      	bne.n	80023ca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800235e:	4b78      	ldr	r3, [pc, #480]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	2380      	movs	r3, #128	@ 0x80
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4013      	ands	r3, r2
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x162>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e256      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b72      	ldr	r3, [pc, #456]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a74      	ldr	r2, [pc, #464]	@ (800254c <HAL_RCC_OscConfig+0x338>)
 800237c:	4013      	ands	r3, r2
 800237e:	0019      	movs	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	021a      	lsls	r2, r3, #8
 8002386:	4b6e      	ldr	r3, [pc, #440]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 8002388:	430a      	orrs	r2, r1
 800238a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d112      	bne.n	80023b8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002392:	4b6b      	ldr	r3, [pc, #428]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a6e      	ldr	r2, [pc, #440]	@ (8002550 <HAL_RCC_OscConfig+0x33c>)
 8002398:	4013      	ands	r3, r2
 800239a:	0019      	movs	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	4b67      	ldr	r3, [pc, #412]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80023a6:	4b66      	ldr	r3, [pc, #408]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	0adb      	lsrs	r3, r3, #11
 80023ac:	2207      	movs	r2, #7
 80023ae:	4013      	ands	r3, r2
 80023b0:	4a68      	ldr	r2, [pc, #416]	@ (8002554 <HAL_RCC_OscConfig+0x340>)
 80023b2:	40da      	lsrs	r2, r3
 80023b4:	4b68      	ldr	r3, [pc, #416]	@ (8002558 <HAL_RCC_OscConfig+0x344>)
 80023b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023b8:	4b68      	ldr	r3, [pc, #416]	@ (800255c <HAL_RCC_OscConfig+0x348>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0018      	movs	r0, r3
 80023be:	f7ff fa29 	bl	8001814 <HAL_InitTick>
 80023c2:	1e03      	subs	r3, r0, #0
 80023c4:	d051      	beq.n	800246a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e22c      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d030      	beq.n	8002434 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a5e      	ldr	r2, [pc, #376]	@ (8002550 <HAL_RCC_OscConfig+0x33c>)
 80023d8:	4013      	ands	r3, r2
 80023da:	0019      	movs	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	4b57      	ldr	r3, [pc, #348]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80023e2:	430a      	orrs	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80023e6:	4b56      	ldr	r3, [pc, #344]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b55      	ldr	r3, [pc, #340]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80023ec:	2180      	movs	r1, #128	@ 0x80
 80023ee:	0049      	lsls	r1, r1, #1
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff fa6a 	bl	80018cc <HAL_GetTick>
 80023f8:	0003      	movs	r3, r0
 80023fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fe:	f7ff fa65 	bl	80018cc <HAL_GetTick>
 8002402:	0002      	movs	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e209      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002410:	4b4b      	ldr	r3, [pc, #300]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2380      	movs	r3, #128	@ 0x80
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4013      	ands	r3, r2
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241c:	4b48      	ldr	r3, [pc, #288]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	4a4a      	ldr	r2, [pc, #296]	@ (800254c <HAL_RCC_OscConfig+0x338>)
 8002422:	4013      	ands	r3, r2
 8002424:	0019      	movs	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	021a      	lsls	r2, r3, #8
 800242c:	4b44      	ldr	r3, [pc, #272]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 800242e:	430a      	orrs	r2, r1
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	e01b      	b.n	800246c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002434:	4b42      	ldr	r3, [pc, #264]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b41      	ldr	r3, [pc, #260]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 800243a:	4949      	ldr	r1, [pc, #292]	@ (8002560 <HAL_RCC_OscConfig+0x34c>)
 800243c:	400a      	ands	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7ff fa44 	bl	80018cc <HAL_GetTick>
 8002444:	0003      	movs	r3, r0
 8002446:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244a:	f7ff fa3f 	bl	80018cc <HAL_GetTick>
 800244e:	0002      	movs	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e1e3      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800245c:	4b38      	ldr	r3, [pc, #224]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2380      	movs	r3, #128	@ 0x80
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4013      	ands	r3, r2
 8002466:	d1f0      	bne.n	800244a <HAL_RCC_OscConfig+0x236>
 8002468:	e000      	b.n	800246c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800246a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2208      	movs	r2, #8
 8002472:	4013      	ands	r3, r2
 8002474:	d047      	beq.n	8002506 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002476:	4b32      	ldr	r3, [pc, #200]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2238      	movs	r2, #56	@ 0x38
 800247c:	4013      	ands	r3, r2
 800247e:	2b18      	cmp	r3, #24
 8002480:	d10a      	bne.n	8002498 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002482:	4b2f      	ldr	r3, [pc, #188]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 8002484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002486:	2202      	movs	r2, #2
 8002488:	4013      	ands	r3, r2
 800248a:	d03c      	beq.n	8002506 <HAL_RCC_OscConfig+0x2f2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d138      	bne.n	8002506 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e1c5      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d019      	beq.n	80024d4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80024a0:	4b27      	ldr	r3, [pc, #156]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80024a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024a4:	4b26      	ldr	r3, [pc, #152]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80024a6:	2101      	movs	r1, #1
 80024a8:	430a      	orrs	r2, r1
 80024aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7ff fa0e 	bl	80018cc <HAL_GetTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b6:	f7ff fa09 	bl	80018cc <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e1ad      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80024ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024cc:	2202      	movs	r2, #2
 80024ce:	4013      	ands	r3, r2
 80024d0:	d0f1      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2a2>
 80024d2:	e018      	b.n	8002506 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80024d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80024d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024d8:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80024da:	2101      	movs	r1, #1
 80024dc:	438a      	bics	r2, r1
 80024de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7ff f9f4 	bl	80018cc <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ea:	f7ff f9ef 	bl	80018cc <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e193      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024fc:	4b10      	ldr	r3, [pc, #64]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 80024fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002500:	2202      	movs	r2, #2
 8002502:	4013      	ands	r3, r2
 8002504:	d1f1      	bne.n	80024ea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2204      	movs	r2, #4
 800250c:	4013      	ands	r3, r2
 800250e:	d100      	bne.n	8002512 <HAL_RCC_OscConfig+0x2fe>
 8002510:	e0c6      	b.n	80026a0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002512:	231f      	movs	r3, #31
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2238      	movs	r2, #56	@ 0x38
 8002520:	4013      	ands	r3, r2
 8002522:	2b20      	cmp	r3, #32
 8002524:	d11e      	bne.n	8002564 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_RCC_OscConfig+0x32c>)
 8002528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252a:	2202      	movs	r2, #2
 800252c:	4013      	ands	r3, r2
 800252e:	d100      	bne.n	8002532 <HAL_RCC_OscConfig+0x31e>
 8002530:	e0b6      	b.n	80026a0 <HAL_RCC_OscConfig+0x48c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d000      	beq.n	800253c <HAL_RCC_OscConfig+0x328>
 800253a:	e0b1      	b.n	80026a0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e171      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
 8002540:	40021000 	.word	0x40021000
 8002544:	fffeffff 	.word	0xfffeffff
 8002548:	fffbffff 	.word	0xfffbffff
 800254c:	ffff80ff 	.word	0xffff80ff
 8002550:	ffffc7ff 	.word	0xffffc7ff
 8002554:	00f42400 	.word	0x00f42400
 8002558:	20000000 	.word	0x20000000
 800255c:	20000014 	.word	0x20000014
 8002560:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002564:	4bb1      	ldr	r3, [pc, #708]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	055b      	lsls	r3, r3, #21
 800256c:	4013      	ands	r3, r2
 800256e:	d101      	bne.n	8002574 <HAL_RCC_OscConfig+0x360>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_RCC_OscConfig+0x362>
 8002574:	2300      	movs	r3, #0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d011      	beq.n	800259e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	4bac      	ldr	r3, [pc, #688]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 800257c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800257e:	4bab      	ldr	r3, [pc, #684]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002580:	2180      	movs	r1, #128	@ 0x80
 8002582:	0549      	lsls	r1, r1, #21
 8002584:	430a      	orrs	r2, r1
 8002586:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002588:	4ba8      	ldr	r3, [pc, #672]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 800258a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	055b      	lsls	r3, r3, #21
 8002590:	4013      	ands	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002596:	231f      	movs	r3, #31
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259e:	4ba4      	ldr	r3, [pc, #656]	@ (8002830 <HAL_RCC_OscConfig+0x61c>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4013      	ands	r3, r2
 80025a8:	d11a      	bne.n	80025e0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025aa:	4ba1      	ldr	r3, [pc, #644]	@ (8002830 <HAL_RCC_OscConfig+0x61c>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4ba0      	ldr	r3, [pc, #640]	@ (8002830 <HAL_RCC_OscConfig+0x61c>)
 80025b0:	2180      	movs	r1, #128	@ 0x80
 80025b2:	0049      	lsls	r1, r1, #1
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80025b8:	f7ff f988 	bl	80018cc <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c2:	f7ff f983 	bl	80018cc <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e127      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d4:	4b96      	ldr	r3, [pc, #600]	@ (8002830 <HAL_RCC_OscConfig+0x61c>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4013      	ands	r3, r2
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x3e2>
 80025e8:	4b90      	ldr	r3, [pc, #576]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 80025ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025ec:	4b8f      	ldr	r3, [pc, #572]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 80025ee:	2101      	movs	r1, #1
 80025f0:	430a      	orrs	r2, r1
 80025f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025f4:	e01c      	b.n	8002630 <HAL_RCC_OscConfig+0x41c>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b05      	cmp	r3, #5
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x404>
 80025fe:	4b8b      	ldr	r3, [pc, #556]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002600:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002602:	4b8a      	ldr	r3, [pc, #552]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002604:	2104      	movs	r1, #4
 8002606:	430a      	orrs	r2, r1
 8002608:	65da      	str	r2, [r3, #92]	@ 0x5c
 800260a:	4b88      	ldr	r3, [pc, #544]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 800260c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800260e:	4b87      	ldr	r3, [pc, #540]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002610:	2101      	movs	r1, #1
 8002612:	430a      	orrs	r2, r1
 8002614:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002616:	e00b      	b.n	8002630 <HAL_RCC_OscConfig+0x41c>
 8002618:	4b84      	ldr	r3, [pc, #528]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 800261a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800261c:	4b83      	ldr	r3, [pc, #524]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 800261e:	2101      	movs	r1, #1
 8002620:	438a      	bics	r2, r1
 8002622:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002624:	4b81      	ldr	r3, [pc, #516]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002626:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002628:	4b80      	ldr	r3, [pc, #512]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 800262a:	2104      	movs	r1, #4
 800262c:	438a      	bics	r2, r1
 800262e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d014      	beq.n	8002662 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7ff f948 	bl	80018cc <HAL_GetTick>
 800263c:	0003      	movs	r3, r0
 800263e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002640:	e009      	b.n	8002656 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7ff f943 	bl	80018cc <HAL_GetTick>
 8002646:	0002      	movs	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	4a79      	ldr	r2, [pc, #484]	@ (8002834 <HAL_RCC_OscConfig+0x620>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0e6      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002656:	4b75      	ldr	r3, [pc, #468]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265a:	2202      	movs	r2, #2
 800265c:	4013      	ands	r3, r2
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x42e>
 8002660:	e013      	b.n	800268a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7ff f933 	bl	80018cc <HAL_GetTick>
 8002666:	0003      	movs	r3, r0
 8002668:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800266a:	e009      	b.n	8002680 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7ff f92e 	bl	80018cc <HAL_GetTick>
 8002670:	0002      	movs	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	4a6f      	ldr	r2, [pc, #444]	@ (8002834 <HAL_RCC_OscConfig+0x620>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0d1      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002680:	4b6a      	ldr	r3, [pc, #424]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002684:	2202      	movs	r2, #2
 8002686:	4013      	ands	r3, r2
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800268a:	231f      	movs	r3, #31
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d105      	bne.n	80026a0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002694:	4b65      	ldr	r3, [pc, #404]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002696:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002698:	4b64      	ldr	r3, [pc, #400]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 800269a:	4967      	ldr	r1, [pc, #412]	@ (8002838 <HAL_RCC_OscConfig+0x624>)
 800269c:	400a      	ands	r2, r1
 800269e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d100      	bne.n	80026aa <HAL_RCC_OscConfig+0x496>
 80026a8:	e0bb      	b.n	8002822 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026aa:	4b60      	ldr	r3, [pc, #384]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2238      	movs	r2, #56	@ 0x38
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b10      	cmp	r3, #16
 80026b4:	d100      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4a4>
 80026b6:	e07b      	b.n	80027b0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d156      	bne.n	800276e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c0:	4b5a      	ldr	r3, [pc, #360]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b59      	ldr	r3, [pc, #356]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 80026c6:	495d      	ldr	r1, [pc, #372]	@ (800283c <HAL_RCC_OscConfig+0x628>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7ff f8fe 	bl	80018cc <HAL_GetTick>
 80026d0:	0003      	movs	r3, r0
 80026d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d6:	f7ff f8f9 	bl	80018cc <HAL_GetTick>
 80026da:	0002      	movs	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e09d      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e8:	4b50      	ldr	r3, [pc, #320]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	049b      	lsls	r3, r3, #18
 80026f0:	4013      	ands	r3, r2
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f4:	4b4d      	ldr	r3, [pc, #308]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4a51      	ldr	r2, [pc, #324]	@ (8002840 <HAL_RCC_OscConfig+0x62c>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1a      	ldr	r2, [r3, #32]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002720:	431a      	orrs	r2, r3
 8002722:	4b42      	ldr	r3, [pc, #264]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002724:	430a      	orrs	r2, r1
 8002726:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002728:	4b40      	ldr	r3, [pc, #256]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b3f      	ldr	r3, [pc, #252]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 800272e:	2180      	movs	r1, #128	@ 0x80
 8002730:	0449      	lsls	r1, r1, #17
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002736:	4b3d      	ldr	r3, [pc, #244]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	4b3c      	ldr	r3, [pc, #240]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 800273c:	2180      	movs	r1, #128	@ 0x80
 800273e:	0549      	lsls	r1, r1, #21
 8002740:	430a      	orrs	r2, r1
 8002742:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7ff f8c2 	bl	80018cc <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274e:	f7ff f8bd 	bl	80018cc <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e061      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002760:	4b32      	ldr	r3, [pc, #200]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2380      	movs	r3, #128	@ 0x80
 8002766:	049b      	lsls	r3, r3, #18
 8002768:	4013      	ands	r3, r2
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x53a>
 800276c:	e059      	b.n	8002822 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	4b2f      	ldr	r3, [pc, #188]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4b2e      	ldr	r3, [pc, #184]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002774:	4931      	ldr	r1, [pc, #196]	@ (800283c <HAL_RCC_OscConfig+0x628>)
 8002776:	400a      	ands	r2, r1
 8002778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7ff f8a7 	bl	80018cc <HAL_GetTick>
 800277e:	0003      	movs	r3, r0
 8002780:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002784:	f7ff f8a2 	bl	80018cc <HAL_GetTick>
 8002788:	0002      	movs	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e046      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002796:	4b25      	ldr	r3, [pc, #148]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	2380      	movs	r3, #128	@ 0x80
 800279c:	049b      	lsls	r3, r3, #18
 800279e:	4013      	ands	r3, r2
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80027a2:	4b22      	ldr	r3, [pc, #136]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	4b21      	ldr	r3, [pc, #132]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 80027a8:	4926      	ldr	r1, [pc, #152]	@ (8002844 <HAL_RCC_OscConfig+0x630>)
 80027aa:	400a      	ands	r2, r1
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	e038      	b.n	8002822 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e033      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80027bc:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <HAL_RCC_OscConfig+0x618>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2203      	movs	r2, #3
 80027c6:	401a      	ands	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d126      	bne.n	800281e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2270      	movs	r2, #112	@ 0x70
 80027d4:	401a      	ands	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d11f      	bne.n	800281e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	23fe      	movs	r3, #254	@ 0xfe
 80027e2:	01db      	lsls	r3, r3, #7
 80027e4:	401a      	ands	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d116      	bne.n	800281e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	23f8      	movs	r3, #248	@ 0xf8
 80027f4:	039b      	lsls	r3, r3, #14
 80027f6:	401a      	ands	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d10e      	bne.n	800281e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	23e0      	movs	r3, #224	@ 0xe0
 8002804:	051b      	lsls	r3, r3, #20
 8002806:	401a      	ands	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d106      	bne.n	800281e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	0f5b      	lsrs	r3, r3, #29
 8002814:	075a      	lsls	r2, r3, #29
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d001      	beq.n	8002822 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b008      	add	sp, #32
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	40007000 	.word	0x40007000
 8002834:	00001388 	.word	0x00001388
 8002838:	efffffff 	.word	0xefffffff
 800283c:	feffffff 	.word	0xfeffffff
 8002840:	11c1808c 	.word	0x11c1808c
 8002844:	eefefffc 	.word	0xeefefffc

08002848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0e9      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800285c:	4b76      	ldr	r3, [pc, #472]	@ (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2207      	movs	r2, #7
 8002862:	4013      	ands	r3, r2
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d91e      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286a:	4b73      	ldr	r3, [pc, #460]	@ (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2207      	movs	r2, #7
 8002870:	4393      	bics	r3, r2
 8002872:	0019      	movs	r1, r3
 8002874:	4b70      	ldr	r3, [pc, #448]	@ (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800287c:	f7ff f826 	bl	80018cc <HAL_GetTick>
 8002880:	0003      	movs	r3, r0
 8002882:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002884:	e009      	b.n	800289a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002886:	f7ff f821 	bl	80018cc <HAL_GetTick>
 800288a:	0002      	movs	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	4a6a      	ldr	r2, [pc, #424]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e0ca      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800289a:	4b67      	ldr	r3, [pc, #412]	@ (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2207      	movs	r2, #7
 80028a0:	4013      	ands	r3, r2
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1ee      	bne.n	8002886 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2202      	movs	r2, #2
 80028ae:	4013      	ands	r3, r2
 80028b0:	d015      	beq.n	80028de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2204      	movs	r2, #4
 80028b8:	4013      	ands	r3, r2
 80028ba:	d006      	beq.n	80028ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028bc:	4b60      	ldr	r3, [pc, #384]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	4b5f      	ldr	r3, [pc, #380]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 80028c2:	21e0      	movs	r1, #224	@ 0xe0
 80028c4:	01c9      	lsls	r1, r1, #7
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	4a5d      	ldr	r2, [pc, #372]	@ (8002a44 <HAL_RCC_ClockConfig+0x1fc>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	4b59      	ldr	r3, [pc, #356]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 80028da:	430a      	orrs	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2201      	movs	r2, #1
 80028e4:	4013      	ands	r3, r2
 80028e6:	d057      	beq.n	8002998 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f0:	4b53      	ldr	r3, [pc, #332]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	029b      	lsls	r3, r3, #10
 80028f8:	4013      	ands	r3, r2
 80028fa:	d12b      	bne.n	8002954 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e097      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d107      	bne.n	8002918 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002908:	4b4d      	ldr	r3, [pc, #308]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	049b      	lsls	r3, r3, #18
 8002910:	4013      	ands	r3, r2
 8002912:	d11f      	bne.n	8002954 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e08b      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d107      	bne.n	8002930 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002920:	4b47      	ldr	r3, [pc, #284]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	@ 0x80
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4013      	ands	r3, r2
 800292a:	d113      	bne.n	8002954 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e07f      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d106      	bne.n	8002946 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002938:	4b41      	ldr	r3, [pc, #260]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 800293a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293c:	2202      	movs	r2, #2
 800293e:	4013      	ands	r3, r2
 8002940:	d108      	bne.n	8002954 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e074      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002946:	4b3e      	ldr	r3, [pc, #248]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 8002948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294a:	2202      	movs	r2, #2
 800294c:	4013      	ands	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e06d      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002954:	4b3a      	ldr	r3, [pc, #232]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2207      	movs	r2, #7
 800295a:	4393      	bics	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	4b37      	ldr	r3, [pc, #220]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002968:	f7fe ffb0 	bl	80018cc <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002970:	e009      	b.n	8002986 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002972:	f7fe ffab 	bl	80018cc <HAL_GetTick>
 8002976:	0002      	movs	r2, r0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	4a2f      	ldr	r2, [pc, #188]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e054      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	4b2e      	ldr	r3, [pc, #184]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2238      	movs	r2, #56	@ 0x38
 800298c:	401a      	ands	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	429a      	cmp	r2, r3
 8002996:	d1ec      	bne.n	8002972 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002998:	4b27      	ldr	r3, [pc, #156]	@ (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2207      	movs	r2, #7
 800299e:	4013      	ands	r3, r2
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d21e      	bcs.n	80029e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b24      	ldr	r3, [pc, #144]	@ (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2207      	movs	r2, #7
 80029ac:	4393      	bics	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	4b21      	ldr	r3, [pc, #132]	@ (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029b8:	f7fe ff88 	bl	80018cc <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029c0:	e009      	b.n	80029d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c2:	f7fe ff83 	bl	80018cc <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	4a1b      	ldr	r2, [pc, #108]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e02c      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029d6:	4b18      	ldr	r3, [pc, #96]	@ (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2207      	movs	r2, #7
 80029dc:	4013      	ands	r3, r2
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1ee      	bne.n	80029c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2204      	movs	r2, #4
 80029ea:	4013      	ands	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029ee:	4b14      	ldr	r3, [pc, #80]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	4a15      	ldr	r2, [pc, #84]	@ (8002a48 <HAL_RCC_ClockConfig+0x200>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	0019      	movs	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a02:	f000 f829 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a06:	0001      	movs	r1, r0
 8002a08:	4b0d      	ldr	r3, [pc, #52]	@ (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	220f      	movs	r2, #15
 8002a10:	401a      	ands	r2, r3
 8002a12:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <HAL_RCC_ClockConfig+0x204>)
 8002a14:	0092      	lsls	r2, r2, #2
 8002a16:	58d3      	ldr	r3, [r2, r3]
 8002a18:	221f      	movs	r2, #31
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	000a      	movs	r2, r1
 8002a1e:	40da      	lsrs	r2, r3
 8002a20:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <HAL_RCC_ClockConfig+0x208>)
 8002a22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <HAL_RCC_ClockConfig+0x20c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7fe fef3 	bl	8001814 <HAL_InitTick>
 8002a2e:	0003      	movs	r3, r0
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b004      	add	sp, #16
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40022000 	.word	0x40022000
 8002a3c:	00001388 	.word	0x00001388
 8002a40:	40021000 	.word	0x40021000
 8002a44:	fffff0ff 	.word	0xfffff0ff
 8002a48:	ffff8fff 	.word	0xffff8fff
 8002a4c:	080038e0 	.word	0x080038e0
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000014 	.word	0x20000014

08002a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2238      	movs	r2, #56	@ 0x38
 8002a64:	4013      	ands	r3, r2
 8002a66:	d10f      	bne.n	8002a88 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a68:	4b39      	ldr	r3, [pc, #228]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0adb      	lsrs	r3, r3, #11
 8002a6e:	2207      	movs	r2, #7
 8002a70:	4013      	ands	r3, r2
 8002a72:	2201      	movs	r2, #1
 8002a74:	409a      	lsls	r2, r3
 8002a76:	0013      	movs	r3, r2
 8002a78:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a7a:	6839      	ldr	r1, [r7, #0]
 8002a7c:	4835      	ldr	r0, [pc, #212]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a7e:	f7fd fb41 	bl	8000104 <__udivsi3>
 8002a82:	0003      	movs	r3, r0
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	e05d      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a88:	4b31      	ldr	r3, [pc, #196]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2238      	movs	r2, #56	@ 0x38
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d102      	bne.n	8002a9a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a94:	4b30      	ldr	r3, [pc, #192]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	e054      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2238      	movs	r2, #56	@ 0x38
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b10      	cmp	r3, #16
 8002aa4:	d138      	bne.n	8002b18 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	4013      	ands	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab0:	4b27      	ldr	r3, [pc, #156]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	4013      	ands	r3, r2
 8002aba:	3301      	adds	r3, #1
 8002abc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d10d      	bne.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	4824      	ldr	r0, [pc, #144]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ac8:	f7fd fb1c 	bl	8000104 <__udivsi3>
 8002acc:	0003      	movs	r3, r0
 8002ace:	0019      	movs	r1, r3
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	227f      	movs	r2, #127	@ 0x7f
 8002ad8:	4013      	ands	r3, r2
 8002ada:	434b      	muls	r3, r1
 8002adc:	617b      	str	r3, [r7, #20]
        break;
 8002ade:	e00d      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	481c      	ldr	r0, [pc, #112]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ae4:	f7fd fb0e 	bl	8000104 <__udivsi3>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	0019      	movs	r1, r3
 8002aec:	4b18      	ldr	r3, [pc, #96]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	227f      	movs	r2, #127	@ 0x7f
 8002af4:	4013      	ands	r3, r2
 8002af6:	434b      	muls	r3, r1
 8002af8:	617b      	str	r3, [r7, #20]
        break;
 8002afa:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002afc:	4b14      	ldr	r3, [pc, #80]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	0f5b      	lsrs	r3, r3, #29
 8002b02:	2207      	movs	r2, #7
 8002b04:	4013      	ands	r3, r2
 8002b06:	3301      	adds	r3, #1
 8002b08:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	6978      	ldr	r0, [r7, #20]
 8002b0e:	f7fd faf9 	bl	8000104 <__udivsi3>
 8002b12:	0003      	movs	r3, r0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	e015      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b18:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2238      	movs	r2, #56	@ 0x38
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d103      	bne.n	8002b2c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b24:	2380      	movs	r3, #128	@ 0x80
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b2c:	4b08      	ldr	r3, [pc, #32]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2238      	movs	r2, #56	@ 0x38
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b18      	cmp	r3, #24
 8002b36:	d103      	bne.n	8002b40 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b38:	23fa      	movs	r3, #250	@ 0xfa
 8002b3a:	01db      	lsls	r3, r3, #7
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	e001      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b44:	693b      	ldr	r3, [r7, #16]
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b006      	add	sp, #24
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	40021000 	.word	0x40021000
 8002b54:	00f42400 	.word	0x00f42400
 8002b58:	007a1200 	.word	0x007a1200

08002b5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b60:	4b02      	ldr	r3, [pc, #8]	@ (8002b6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	20000000 	.word	0x20000000

08002b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b74:	f7ff fff2 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002b78:	0004      	movs	r4, r0
 8002b7a:	f7ff fb3f 	bl	80021fc <LL_RCC_GetAPB1Prescaler>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	0b1a      	lsrs	r2, r3, #12
 8002b82:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b84:	0092      	lsls	r2, r2, #2
 8002b86:	58d3      	ldr	r3, [r2, r3]
 8002b88:	221f      	movs	r2, #31
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	40dc      	lsrs	r4, r3
 8002b8e:	0023      	movs	r3, r4
}
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bdb0      	pop	{r4, r5, r7, pc}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	08003920 	.word	0x08003920

08002b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e04a      	b.n	8002c44 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	223d      	movs	r2, #61	@ 0x3d
 8002bb2:	5c9b      	ldrb	r3, [r3, r2]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d107      	bne.n	8002bca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	223c      	movs	r2, #60	@ 0x3c
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7fd fe77 	bl	80008b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	223d      	movs	r2, #61	@ 0x3d
 8002bce:	2102      	movs	r1, #2
 8002bd0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	0019      	movs	r1, r3
 8002bdc:	0010      	movs	r0, r2
 8002bde:	f000 faf9 	bl	80031d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2248      	movs	r2, #72	@ 0x48
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	223e      	movs	r2, #62	@ 0x3e
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	223f      	movs	r2, #63	@ 0x3f
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2240      	movs	r2, #64	@ 0x40
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2241      	movs	r2, #65	@ 0x41
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2242      	movs	r2, #66	@ 0x42
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2243      	movs	r2, #67	@ 0x43
 8002c16:	2101      	movs	r1, #1
 8002c18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2244      	movs	r2, #68	@ 0x44
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2245      	movs	r2, #69	@ 0x45
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2246      	movs	r2, #70	@ 0x46
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2247      	movs	r2, #71	@ 0x47
 8002c36:	2101      	movs	r1, #1
 8002c38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	223d      	movs	r2, #61	@ 0x3d
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b002      	add	sp, #8
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e04a      	b.n	8002cf4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	223d      	movs	r2, #61	@ 0x3d
 8002c62:	5c9b      	ldrb	r3, [r3, r2]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d107      	bne.n	8002c7a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	223c      	movs	r2, #60	@ 0x3c
 8002c6e:	2100      	movs	r1, #0
 8002c70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	0018      	movs	r0, r3
 8002c76:	f000 f841 	bl	8002cfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	223d      	movs	r2, #61	@ 0x3d
 8002c7e:	2102      	movs	r1, #2
 8002c80:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	0019      	movs	r1, r3
 8002c8c:	0010      	movs	r0, r2
 8002c8e:	f000 faa1 	bl	80031d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2248      	movs	r2, #72	@ 0x48
 8002c96:	2101      	movs	r1, #1
 8002c98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	223e      	movs	r2, #62	@ 0x3e
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	223f      	movs	r2, #63	@ 0x3f
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2240      	movs	r2, #64	@ 0x40
 8002cae:	2101      	movs	r1, #1
 8002cb0:	5499      	strb	r1, [r3, r2]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2241      	movs	r2, #65	@ 0x41
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	5499      	strb	r1, [r3, r2]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2242      	movs	r2, #66	@ 0x42
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	5499      	strb	r1, [r3, r2]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2243      	movs	r2, #67	@ 0x43
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2244      	movs	r2, #68	@ 0x44
 8002cce:	2101      	movs	r1, #1
 8002cd0:	5499      	strb	r1, [r3, r2]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2245      	movs	r2, #69	@ 0x45
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	5499      	strb	r1, [r3, r2]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2246      	movs	r2, #70	@ 0x46
 8002cde:	2101      	movs	r1, #1
 8002ce0:	5499      	strb	r1, [r3, r2]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2247      	movs	r2, #71	@ 0x47
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	223d      	movs	r2, #61	@ 0x3d
 8002cee:	2101      	movs	r1, #1
 8002cf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d04:	46c0      	nop			@ (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b002      	add	sp, #8
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d108      	bne.n	8002d2e <HAL_TIM_PWM_Start+0x22>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	223e      	movs	r2, #62	@ 0x3e
 8002d20:	5c9b      	ldrb	r3, [r3, r2]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	1e5a      	subs	r2, r3, #1
 8002d28:	4193      	sbcs	r3, r2
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	e037      	b.n	8002d9e <HAL_TIM_PWM_Start+0x92>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d108      	bne.n	8002d46 <HAL_TIM_PWM_Start+0x3a>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	223f      	movs	r2, #63	@ 0x3f
 8002d38:	5c9b      	ldrb	r3, [r3, r2]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	1e5a      	subs	r2, r3, #1
 8002d40:	4193      	sbcs	r3, r2
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	e02b      	b.n	8002d9e <HAL_TIM_PWM_Start+0x92>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d108      	bne.n	8002d5e <HAL_TIM_PWM_Start+0x52>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2240      	movs	r2, #64	@ 0x40
 8002d50:	5c9b      	ldrb	r3, [r3, r2]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	1e5a      	subs	r2, r3, #1
 8002d58:	4193      	sbcs	r3, r2
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	e01f      	b.n	8002d9e <HAL_TIM_PWM_Start+0x92>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b0c      	cmp	r3, #12
 8002d62:	d108      	bne.n	8002d76 <HAL_TIM_PWM_Start+0x6a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2241      	movs	r2, #65	@ 0x41
 8002d68:	5c9b      	ldrb	r3, [r3, r2]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	1e5a      	subs	r2, r3, #1
 8002d70:	4193      	sbcs	r3, r2
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	e013      	b.n	8002d9e <HAL_TIM_PWM_Start+0x92>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d108      	bne.n	8002d8e <HAL_TIM_PWM_Start+0x82>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2242      	movs	r2, #66	@ 0x42
 8002d80:	5c9b      	ldrb	r3, [r3, r2]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	1e5a      	subs	r2, r3, #1
 8002d88:	4193      	sbcs	r3, r2
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	e007      	b.n	8002d9e <HAL_TIM_PWM_Start+0x92>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2243      	movs	r2, #67	@ 0x43
 8002d92:	5c9b      	ldrb	r3, [r3, r2]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	1e5a      	subs	r2, r3, #1
 8002d9a:	4193      	sbcs	r3, r2
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e081      	b.n	8002eaa <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d104      	bne.n	8002db6 <HAL_TIM_PWM_Start+0xaa>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	223e      	movs	r2, #62	@ 0x3e
 8002db0:	2102      	movs	r1, #2
 8002db2:	5499      	strb	r1, [r3, r2]
 8002db4:	e023      	b.n	8002dfe <HAL_TIM_PWM_Start+0xf2>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d104      	bne.n	8002dc6 <HAL_TIM_PWM_Start+0xba>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	223f      	movs	r2, #63	@ 0x3f
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	5499      	strb	r1, [r3, r2]
 8002dc4:	e01b      	b.n	8002dfe <HAL_TIM_PWM_Start+0xf2>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d104      	bne.n	8002dd6 <HAL_TIM_PWM_Start+0xca>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2240      	movs	r2, #64	@ 0x40
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	5499      	strb	r1, [r3, r2]
 8002dd4:	e013      	b.n	8002dfe <HAL_TIM_PWM_Start+0xf2>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_PWM_Start+0xda>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2241      	movs	r2, #65	@ 0x41
 8002de0:	2102      	movs	r1, #2
 8002de2:	5499      	strb	r1, [r3, r2]
 8002de4:	e00b      	b.n	8002dfe <HAL_TIM_PWM_Start+0xf2>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_PWM_Start+0xea>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2242      	movs	r2, #66	@ 0x42
 8002df0:	2102      	movs	r1, #2
 8002df2:	5499      	strb	r1, [r3, r2]
 8002df4:	e003      	b.n	8002dfe <HAL_TIM_PWM_Start+0xf2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2243      	movs	r2, #67	@ 0x43
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6839      	ldr	r1, [r7, #0]
 8002e04:	2201      	movs	r2, #1
 8002e06:	0018      	movs	r0, r3
 8002e08:	f000 fd04 	bl	8003814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a28      	ldr	r2, [pc, #160]	@ (8002eb4 <HAL_TIM_PWM_Start+0x1a8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d009      	beq.n	8002e2a <HAL_TIM_PWM_Start+0x11e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a27      	ldr	r2, [pc, #156]	@ (8002eb8 <HAL_TIM_PWM_Start+0x1ac>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_TIM_PWM_Start+0x11e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a25      	ldr	r2, [pc, #148]	@ (8002ebc <HAL_TIM_PWM_Start+0x1b0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_PWM_Start+0x122>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_TIM_PWM_Start+0x124>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2180      	movs	r1, #128	@ 0x80
 8002e40:	0209      	lsls	r1, r1, #8
 8002e42:	430a      	orrs	r2, r1
 8002e44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8002eb4 <HAL_TIM_PWM_Start+0x1a8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00a      	beq.n	8002e66 <HAL_TIM_PWM_Start+0x15a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	05db      	lsls	r3, r3, #23
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d004      	beq.n	8002e66 <HAL_TIM_PWM_Start+0x15a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a17      	ldr	r2, [pc, #92]	@ (8002ec0 <HAL_TIM_PWM_Start+0x1b4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d116      	bne.n	8002e94 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4a15      	ldr	r2, [pc, #84]	@ (8002ec4 <HAL_TIM_PWM_Start+0x1b8>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b06      	cmp	r3, #6
 8002e76:	d016      	beq.n	8002ea6 <HAL_TIM_PWM_Start+0x19a>
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	2380      	movs	r3, #128	@ 0x80
 8002e7c:	025b      	lsls	r3, r3, #9
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d011      	beq.n	8002ea6 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e92:	e008      	b.n	8002ea6 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e000      	b.n	8002ea8 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b004      	add	sp, #16
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	40012c00 	.word	0x40012c00
 8002eb8:	40014400 	.word	0x40014400
 8002ebc:	40014800 	.word	0x40014800
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	00010007 	.word	0x00010007

08002ec8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6839      	ldr	r1, [r7, #0]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 fc9a 	bl	8003814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a35      	ldr	r2, [pc, #212]	@ (8002fbc <HAL_TIM_PWM_Stop+0xf4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d009      	beq.n	8002efe <HAL_TIM_PWM_Stop+0x36>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a34      	ldr	r2, [pc, #208]	@ (8002fc0 <HAL_TIM_PWM_Stop+0xf8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_TIM_PWM_Stop+0x36>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a32      	ldr	r2, [pc, #200]	@ (8002fc4 <HAL_TIM_PWM_Stop+0xfc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d101      	bne.n	8002f02 <HAL_TIM_PWM_Stop+0x3a>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_TIM_PWM_Stop+0x3c>
 8002f02:	2300      	movs	r3, #0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc8 <HAL_TIM_PWM_Stop+0x100>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	d10d      	bne.n	8002f30 <HAL_TIM_PWM_Stop+0x68>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4a2c      	ldr	r2, [pc, #176]	@ (8002fcc <HAL_TIM_PWM_Stop+0x104>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d107      	bne.n	8002f30 <HAL_TIM_PWM_Stop+0x68>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4929      	ldr	r1, [pc, #164]	@ (8002fd0 <HAL_TIM_PWM_Stop+0x108>)
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a24      	ldr	r2, [pc, #144]	@ (8002fc8 <HAL_TIM_PWM_Stop+0x100>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d10d      	bne.n	8002f58 <HAL_TIM_PWM_Stop+0x90>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a22      	ldr	r2, [pc, #136]	@ (8002fcc <HAL_TIM_PWM_Stop+0x104>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	d107      	bne.n	8002f58 <HAL_TIM_PWM_Stop+0x90>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2101      	movs	r1, #1
 8002f54:	438a      	bics	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d104      	bne.n	8002f68 <HAL_TIM_PWM_Stop+0xa0>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	223e      	movs	r2, #62	@ 0x3e
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]
 8002f66:	e023      	b.n	8002fb0 <HAL_TIM_PWM_Stop+0xe8>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d104      	bne.n	8002f78 <HAL_TIM_PWM_Stop+0xb0>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	223f      	movs	r2, #63	@ 0x3f
 8002f72:	2101      	movs	r1, #1
 8002f74:	5499      	strb	r1, [r3, r2]
 8002f76:	e01b      	b.n	8002fb0 <HAL_TIM_PWM_Stop+0xe8>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d104      	bne.n	8002f88 <HAL_TIM_PWM_Stop+0xc0>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2240      	movs	r2, #64	@ 0x40
 8002f82:	2101      	movs	r1, #1
 8002f84:	5499      	strb	r1, [r3, r2]
 8002f86:	e013      	b.n	8002fb0 <HAL_TIM_PWM_Stop+0xe8>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d104      	bne.n	8002f98 <HAL_TIM_PWM_Stop+0xd0>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2241      	movs	r2, #65	@ 0x41
 8002f92:	2101      	movs	r1, #1
 8002f94:	5499      	strb	r1, [r3, r2]
 8002f96:	e00b      	b.n	8002fb0 <HAL_TIM_PWM_Stop+0xe8>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b10      	cmp	r3, #16
 8002f9c:	d104      	bne.n	8002fa8 <HAL_TIM_PWM_Stop+0xe0>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2242      	movs	r2, #66	@ 0x42
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	5499      	strb	r1, [r3, r2]
 8002fa6:	e003      	b.n	8002fb0 <HAL_TIM_PWM_Stop+0xe8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2243      	movs	r2, #67	@ 0x43
 8002fac:	2101      	movs	r1, #1
 8002fae:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b002      	add	sp, #8
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	40012c00 	.word	0x40012c00
 8002fc0:	40014400 	.word	0x40014400
 8002fc4:	40014800 	.word	0x40014800
 8002fc8:	00001111 	.word	0x00001111
 8002fcc:	00000444 	.word	0x00000444
 8002fd0:	ffff7fff 	.word	0xffff7fff

08002fd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe0:	2317      	movs	r3, #23
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	223c      	movs	r2, #60	@ 0x3c
 8002fec:	5c9b      	ldrb	r3, [r3, r2]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e0e5      	b.n	80031c2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	223c      	movs	r2, #60	@ 0x3c
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b14      	cmp	r3, #20
 8003002:	d900      	bls.n	8003006 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003004:	e0d1      	b.n	80031aa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	009a      	lsls	r2, r3, #2
 800300a:	4b70      	ldr	r3, [pc, #448]	@ (80031cc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800300c:	18d3      	adds	r3, r2, r3
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	0011      	movs	r1, r2
 800301a:	0018      	movs	r0, r3
 800301c:	f000 f95e 	bl	80032dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2108      	movs	r1, #8
 800302c:	430a      	orrs	r2, r1
 800302e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2104      	movs	r1, #4
 800303c:	438a      	bics	r2, r1
 800303e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6999      	ldr	r1, [r3, #24]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	619a      	str	r2, [r3, #24]
      break;
 8003052:	e0af      	b.n	80031b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	0011      	movs	r1, r2
 800305c:	0018      	movs	r0, r3
 800305e:	f000 f9bd 	bl	80033dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699a      	ldr	r2, [r3, #24]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2180      	movs	r1, #128	@ 0x80
 800306e:	0109      	lsls	r1, r1, #4
 8003070:	430a      	orrs	r2, r1
 8003072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4954      	ldr	r1, [pc, #336]	@ (80031d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003080:	400a      	ands	r2, r1
 8003082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6999      	ldr	r1, [r3, #24]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	021a      	lsls	r2, r3, #8
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	619a      	str	r2, [r3, #24]
      break;
 8003098:	e08c      	b.n	80031b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	0011      	movs	r1, r2
 80030a2:	0018      	movs	r0, r3
 80030a4:	f000 fa18 	bl	80034d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2108      	movs	r1, #8
 80030b4:	430a      	orrs	r2, r1
 80030b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69da      	ldr	r2, [r3, #28]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2104      	movs	r1, #4
 80030c4:	438a      	bics	r2, r1
 80030c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69d9      	ldr	r1, [r3, #28]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	61da      	str	r2, [r3, #28]
      break;
 80030da:	e06b      	b.n	80031b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	0011      	movs	r1, r2
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 fa79 	bl	80035dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2180      	movs	r1, #128	@ 0x80
 80030f6:	0109      	lsls	r1, r1, #4
 80030f8:	430a      	orrs	r2, r1
 80030fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4932      	ldr	r1, [pc, #200]	@ (80031d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003108:	400a      	ands	r2, r1
 800310a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69d9      	ldr	r1, [r3, #28]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	021a      	lsls	r2, r3, #8
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	61da      	str	r2, [r3, #28]
      break;
 8003120:	e048      	b.n	80031b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	0011      	movs	r1, r2
 800312a:	0018      	movs	r0, r3
 800312c:	f000 faba 	bl	80036a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2108      	movs	r1, #8
 800313c:	430a      	orrs	r2, r1
 800313e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2104      	movs	r1, #4
 800314c:	438a      	bics	r2, r1
 800314e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003162:	e027      	b.n	80031b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	0011      	movs	r1, r2
 800316c:	0018      	movs	r0, r3
 800316e:	f000 faf3 	bl	8003758 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2180      	movs	r1, #128	@ 0x80
 800317e:	0109      	lsls	r1, r1, #4
 8003180:	430a      	orrs	r2, r1
 8003182:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4910      	ldr	r1, [pc, #64]	@ (80031d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003190:	400a      	ands	r2, r1
 8003192:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	021a      	lsls	r2, r3, #8
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80031a8:	e004      	b.n	80031b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80031aa:	2317      	movs	r3, #23
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
      break;
 80031b2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	223c      	movs	r2, #60	@ 0x3c
 80031b8:	2100      	movs	r1, #0
 80031ba:	5499      	strb	r1, [r3, r2]

  return status;
 80031bc:	2317      	movs	r3, #23
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	781b      	ldrb	r3, [r3, #0]
}
 80031c2:	0018      	movs	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b006      	add	sp, #24
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	08003978 	.word	0x08003978
 80031d0:	fffffbff 	.word	0xfffffbff

080031d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a37      	ldr	r2, [pc, #220]	@ (80032c4 <TIM_Base_SetConfig+0xf0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d008      	beq.n	80031fe <TIM_Base_SetConfig+0x2a>
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	2380      	movs	r3, #128	@ 0x80
 80031f0:	05db      	lsls	r3, r3, #23
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d003      	beq.n	80031fe <TIM_Base_SetConfig+0x2a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a33      	ldr	r2, [pc, #204]	@ (80032c8 <TIM_Base_SetConfig+0xf4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d108      	bne.n	8003210 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2270      	movs	r2, #112	@ 0x70
 8003202:	4393      	bics	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a2c      	ldr	r2, [pc, #176]	@ (80032c4 <TIM_Base_SetConfig+0xf0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d014      	beq.n	8003242 <TIM_Base_SetConfig+0x6e>
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	2380      	movs	r3, #128	@ 0x80
 800321c:	05db      	lsls	r3, r3, #23
 800321e:	429a      	cmp	r2, r3
 8003220:	d00f      	beq.n	8003242 <TIM_Base_SetConfig+0x6e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a28      	ldr	r2, [pc, #160]	@ (80032c8 <TIM_Base_SetConfig+0xf4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00b      	beq.n	8003242 <TIM_Base_SetConfig+0x6e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a27      	ldr	r2, [pc, #156]	@ (80032cc <TIM_Base_SetConfig+0xf8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <TIM_Base_SetConfig+0x6e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a26      	ldr	r2, [pc, #152]	@ (80032d0 <TIM_Base_SetConfig+0xfc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d003      	beq.n	8003242 <TIM_Base_SetConfig+0x6e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a25      	ldr	r2, [pc, #148]	@ (80032d4 <TIM_Base_SetConfig+0x100>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d108      	bne.n	8003254 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a24      	ldr	r2, [pc, #144]	@ (80032d8 <TIM_Base_SetConfig+0x104>)
 8003246:	4013      	ands	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2280      	movs	r2, #128	@ 0x80
 8003258:	4393      	bics	r3, r2
 800325a:	001a      	movs	r2, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a11      	ldr	r2, [pc, #68]	@ (80032c4 <TIM_Base_SetConfig+0xf0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d007      	beq.n	8003292 <TIM_Base_SetConfig+0xbe>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a12      	ldr	r2, [pc, #72]	@ (80032d0 <TIM_Base_SetConfig+0xfc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d003      	beq.n	8003292 <TIM_Base_SetConfig+0xbe>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a11      	ldr	r2, [pc, #68]	@ (80032d4 <TIM_Base_SetConfig+0x100>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d103      	bne.n	800329a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	2201      	movs	r2, #1
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d106      	bne.n	80032ba <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2201      	movs	r2, #1
 80032b2:	4393      	bics	r3, r2
 80032b4:	001a      	movs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	611a      	str	r2, [r3, #16]
  }
}
 80032ba:	46c0      	nop			@ (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b004      	add	sp, #16
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			@ (mov r8, r8)
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40000400 	.word	0x40000400
 80032cc:	40002000 	.word	0x40002000
 80032d0:	40014400 	.word	0x40014400
 80032d4:	40014800 	.word	0x40014800
 80032d8:	fffffcff 	.word	0xfffffcff

080032dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	2201      	movs	r2, #1
 80032f2:	4393      	bics	r3, r2
 80032f4:	001a      	movs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a2e      	ldr	r2, [pc, #184]	@ (80033c4 <TIM_OC1_SetConfig+0xe8>)
 800330a:	4013      	ands	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2203      	movs	r2, #3
 8003312:	4393      	bics	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2202      	movs	r2, #2
 8003324:	4393      	bics	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a24      	ldr	r2, [pc, #144]	@ (80033c8 <TIM_OC1_SetConfig+0xec>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <TIM_OC1_SetConfig+0x6e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a23      	ldr	r2, [pc, #140]	@ (80033cc <TIM_OC1_SetConfig+0xf0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d003      	beq.n	800334a <TIM_OC1_SetConfig+0x6e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a22      	ldr	r2, [pc, #136]	@ (80033d0 <TIM_OC1_SetConfig+0xf4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d10c      	bne.n	8003364 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2208      	movs	r2, #8
 800334e:	4393      	bics	r3, r2
 8003350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	2204      	movs	r2, #4
 8003360:	4393      	bics	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a18      	ldr	r2, [pc, #96]	@ (80033c8 <TIM_OC1_SetConfig+0xec>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d007      	beq.n	800337c <TIM_OC1_SetConfig+0xa0>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a17      	ldr	r2, [pc, #92]	@ (80033cc <TIM_OC1_SetConfig+0xf0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_OC1_SetConfig+0xa0>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a16      	ldr	r2, [pc, #88]	@ (80033d0 <TIM_OC1_SetConfig+0xf4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d111      	bne.n	80033a0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4a15      	ldr	r2, [pc, #84]	@ (80033d4 <TIM_OC1_SetConfig+0xf8>)
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4a14      	ldr	r2, [pc, #80]	@ (80033d8 <TIM_OC1_SetConfig+0xfc>)
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	621a      	str	r2, [r3, #32]
}
 80033ba:	46c0      	nop			@ (mov r8, r8)
 80033bc:	46bd      	mov	sp, r7
 80033be:	b006      	add	sp, #24
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	46c0      	nop			@ (mov r8, r8)
 80033c4:	fffeff8f 	.word	0xfffeff8f
 80033c8:	40012c00 	.word	0x40012c00
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40014800 	.word	0x40014800
 80033d4:	fffffeff 	.word	0xfffffeff
 80033d8:	fffffdff 	.word	0xfffffdff

080033dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	2210      	movs	r2, #16
 80033f2:	4393      	bics	r3, r2
 80033f4:	001a      	movs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a2c      	ldr	r2, [pc, #176]	@ (80034bc <TIM_OC2_SetConfig+0xe0>)
 800340a:	4013      	ands	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a2b      	ldr	r2, [pc, #172]	@ (80034c0 <TIM_OC2_SetConfig+0xe4>)
 8003412:	4013      	ands	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2220      	movs	r2, #32
 8003426:	4393      	bics	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a22      	ldr	r2, [pc, #136]	@ (80034c4 <TIM_OC2_SetConfig+0xe8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d10d      	bne.n	800345a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2280      	movs	r2, #128	@ 0x80
 8003442:	4393      	bics	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2240      	movs	r2, #64	@ 0x40
 8003456:	4393      	bics	r3, r2
 8003458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a19      	ldr	r2, [pc, #100]	@ (80034c4 <TIM_OC2_SetConfig+0xe8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d007      	beq.n	8003472 <TIM_OC2_SetConfig+0x96>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a18      	ldr	r2, [pc, #96]	@ (80034c8 <TIM_OC2_SetConfig+0xec>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d003      	beq.n	8003472 <TIM_OC2_SetConfig+0x96>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a17      	ldr	r2, [pc, #92]	@ (80034cc <TIM_OC2_SetConfig+0xf0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d113      	bne.n	800349a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4a16      	ldr	r2, [pc, #88]	@ (80034d0 <TIM_OC2_SetConfig+0xf4>)
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4a15      	ldr	r2, [pc, #84]	@ (80034d4 <TIM_OC2_SetConfig+0xf8>)
 800347e:	4013      	ands	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	621a      	str	r2, [r3, #32]
}
 80034b4:	46c0      	nop			@ (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b006      	add	sp, #24
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	feff8fff 	.word	0xfeff8fff
 80034c0:	fffffcff 	.word	0xfffffcff
 80034c4:	40012c00 	.word	0x40012c00
 80034c8:	40014400 	.word	0x40014400
 80034cc:	40014800 	.word	0x40014800
 80034d0:	fffffbff 	.word	0xfffffbff
 80034d4:	fffff7ff 	.word	0xfffff7ff

080034d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4a31      	ldr	r2, [pc, #196]	@ (80035b4 <TIM_OC3_SetConfig+0xdc>)
 80034ee:	401a      	ands	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a2d      	ldr	r2, [pc, #180]	@ (80035b8 <TIM_OC3_SetConfig+0xe0>)
 8003504:	4013      	ands	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2203      	movs	r2, #3
 800350c:	4393      	bics	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	4a27      	ldr	r2, [pc, #156]	@ (80035bc <TIM_OC3_SetConfig+0xe4>)
 800351e:	4013      	ands	r3, r2
 8003520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a23      	ldr	r2, [pc, #140]	@ (80035c0 <TIM_OC3_SetConfig+0xe8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10d      	bne.n	8003552 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	4a22      	ldr	r2, [pc, #136]	@ (80035c4 <TIM_OC3_SetConfig+0xec>)
 800353a:	4013      	ands	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	4a1e      	ldr	r2, [pc, #120]	@ (80035c8 <TIM_OC3_SetConfig+0xf0>)
 800354e:	4013      	ands	r3, r2
 8003550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a1a      	ldr	r2, [pc, #104]	@ (80035c0 <TIM_OC3_SetConfig+0xe8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d007      	beq.n	800356a <TIM_OC3_SetConfig+0x92>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a1b      	ldr	r2, [pc, #108]	@ (80035cc <TIM_OC3_SetConfig+0xf4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_OC3_SetConfig+0x92>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1a      	ldr	r2, [pc, #104]	@ (80035d0 <TIM_OC3_SetConfig+0xf8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d113      	bne.n	8003592 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4a19      	ldr	r2, [pc, #100]	@ (80035d4 <TIM_OC3_SetConfig+0xfc>)
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4a18      	ldr	r2, [pc, #96]	@ (80035d8 <TIM_OC3_SetConfig+0x100>)
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	621a      	str	r2, [r3, #32]
}
 80035ac:	46c0      	nop			@ (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b006      	add	sp, #24
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	fffffeff 	.word	0xfffffeff
 80035b8:	fffeff8f 	.word	0xfffeff8f
 80035bc:	fffffdff 	.word	0xfffffdff
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	fffff7ff 	.word	0xfffff7ff
 80035c8:	fffffbff 	.word	0xfffffbff
 80035cc:	40014400 	.word	0x40014400
 80035d0:	40014800 	.word	0x40014800
 80035d4:	ffffefff 	.word	0xffffefff
 80035d8:	ffffdfff 	.word	0xffffdfff

080035dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4a24      	ldr	r2, [pc, #144]	@ (8003684 <TIM_OC4_SetConfig+0xa8>)
 80035f2:	401a      	ands	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a20      	ldr	r2, [pc, #128]	@ (8003688 <TIM_OC4_SetConfig+0xac>)
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a1f      	ldr	r2, [pc, #124]	@ (800368c <TIM_OC4_SetConfig+0xb0>)
 8003610:	4013      	ands	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4a1b      	ldr	r2, [pc, #108]	@ (8003690 <TIM_OC4_SetConfig+0xb4>)
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	031b      	lsls	r3, r3, #12
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a17      	ldr	r2, [pc, #92]	@ (8003694 <TIM_OC4_SetConfig+0xb8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d007      	beq.n	800364c <TIM_OC4_SetConfig+0x70>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a16      	ldr	r2, [pc, #88]	@ (8003698 <TIM_OC4_SetConfig+0xbc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_OC4_SetConfig+0x70>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a15      	ldr	r2, [pc, #84]	@ (800369c <TIM_OC4_SetConfig+0xc0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d109      	bne.n	8003660 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	4a14      	ldr	r2, [pc, #80]	@ (80036a0 <TIM_OC4_SetConfig+0xc4>)
 8003650:	4013      	ands	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	019b      	lsls	r3, r3, #6
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b006      	add	sp, #24
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	ffffefff 	.word	0xffffefff
 8003688:	feff8fff 	.word	0xfeff8fff
 800368c:	fffffcff 	.word	0xfffffcff
 8003690:	ffffdfff 	.word	0xffffdfff
 8003694:	40012c00 	.word	0x40012c00
 8003698:	40014400 	.word	0x40014400
 800369c:	40014800 	.word	0x40014800
 80036a0:	ffffbfff 	.word	0xffffbfff

080036a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	4a21      	ldr	r2, [pc, #132]	@ (8003740 <TIM_OC5_SetConfig+0x9c>)
 80036ba:	401a      	ands	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003744 <TIM_OC5_SetConfig+0xa0>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4a19      	ldr	r2, [pc, #100]	@ (8003748 <TIM_OC5_SetConfig+0xa4>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	041b      	lsls	r3, r3, #16
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a15      	ldr	r2, [pc, #84]	@ (800374c <TIM_OC5_SetConfig+0xa8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <TIM_OC5_SetConfig+0x66>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a14      	ldr	r2, [pc, #80]	@ (8003750 <TIM_OC5_SetConfig+0xac>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d003      	beq.n	800370a <TIM_OC5_SetConfig+0x66>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a13      	ldr	r2, [pc, #76]	@ (8003754 <TIM_OC5_SetConfig+0xb0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d109      	bne.n	800371e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	4a0c      	ldr	r2, [pc, #48]	@ (8003740 <TIM_OC5_SetConfig+0x9c>)
 800370e:	4013      	ands	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	621a      	str	r2, [r3, #32]
}
 8003738:	46c0      	nop			@ (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b006      	add	sp, #24
 800373e:	bd80      	pop	{r7, pc}
 8003740:	fffeffff 	.word	0xfffeffff
 8003744:	fffeff8f 	.word	0xfffeff8f
 8003748:	fffdffff 	.word	0xfffdffff
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40014400 	.word	0x40014400
 8003754:	40014800 	.word	0x40014800

08003758 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4a22      	ldr	r2, [pc, #136]	@ (80037f8 <TIM_OC6_SetConfig+0xa0>)
 800376e:	401a      	ands	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a1e      	ldr	r2, [pc, #120]	@ (80037fc <TIM_OC6_SetConfig+0xa4>)
 8003784:	4013      	ands	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4a1a      	ldr	r2, [pc, #104]	@ (8003800 <TIM_OC6_SetConfig+0xa8>)
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	051b      	lsls	r3, r3, #20
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a16      	ldr	r2, [pc, #88]	@ (8003804 <TIM_OC6_SetConfig+0xac>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <TIM_OC6_SetConfig+0x68>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a15      	ldr	r2, [pc, #84]	@ (8003808 <TIM_OC6_SetConfig+0xb0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_OC6_SetConfig+0x68>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a14      	ldr	r2, [pc, #80]	@ (800380c <TIM_OC6_SetConfig+0xb4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d109      	bne.n	80037d4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	4a13      	ldr	r2, [pc, #76]	@ (8003810 <TIM_OC6_SetConfig+0xb8>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	029b      	lsls	r3, r3, #10
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	621a      	str	r2, [r3, #32]
}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b006      	add	sp, #24
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	ffefffff 	.word	0xffefffff
 80037fc:	feff8fff 	.word	0xfeff8fff
 8003800:	ffdfffff 	.word	0xffdfffff
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40014400 	.word	0x40014400
 800380c:	40014800 	.word	0x40014800
 8003810:	fffbffff 	.word	0xfffbffff

08003814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	221f      	movs	r2, #31
 8003824:	4013      	ands	r3, r2
 8003826:	2201      	movs	r2, #1
 8003828:	409a      	lsls	r2, r3
 800382a:	0013      	movs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	43d2      	mvns	r2, r2
 8003836:	401a      	ands	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	211f      	movs	r1, #31
 8003844:	400b      	ands	r3, r1
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4099      	lsls	r1, r3
 800384a:	000b      	movs	r3, r1
 800384c:	431a      	orrs	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	621a      	str	r2, [r3, #32]
}
 8003852:	46c0      	nop			@ (mov r8, r8)
 8003854:	46bd      	mov	sp, r7
 8003856:	b006      	add	sp, #24
 8003858:	bd80      	pop	{r7, pc}

0800385a <memset>:
 800385a:	0003      	movs	r3, r0
 800385c:	1882      	adds	r2, r0, r2
 800385e:	4293      	cmp	r3, r2
 8003860:	d100      	bne.n	8003864 <memset+0xa>
 8003862:	4770      	bx	lr
 8003864:	7019      	strb	r1, [r3, #0]
 8003866:	3301      	adds	r3, #1
 8003868:	e7f9      	b.n	800385e <memset+0x4>
	...

0800386c <__libc_init_array>:
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	2600      	movs	r6, #0
 8003870:	4c0c      	ldr	r4, [pc, #48]	@ (80038a4 <__libc_init_array+0x38>)
 8003872:	4d0d      	ldr	r5, [pc, #52]	@ (80038a8 <__libc_init_array+0x3c>)
 8003874:	1b64      	subs	r4, r4, r5
 8003876:	10a4      	asrs	r4, r4, #2
 8003878:	42a6      	cmp	r6, r4
 800387a:	d109      	bne.n	8003890 <__libc_init_array+0x24>
 800387c:	2600      	movs	r6, #0
 800387e:	f000 f823 	bl	80038c8 <_init>
 8003882:	4c0a      	ldr	r4, [pc, #40]	@ (80038ac <__libc_init_array+0x40>)
 8003884:	4d0a      	ldr	r5, [pc, #40]	@ (80038b0 <__libc_init_array+0x44>)
 8003886:	1b64      	subs	r4, r4, r5
 8003888:	10a4      	asrs	r4, r4, #2
 800388a:	42a6      	cmp	r6, r4
 800388c:	d105      	bne.n	800389a <__libc_init_array+0x2e>
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	00b3      	lsls	r3, r6, #2
 8003892:	58eb      	ldr	r3, [r5, r3]
 8003894:	4798      	blx	r3
 8003896:	3601      	adds	r6, #1
 8003898:	e7ee      	b.n	8003878 <__libc_init_array+0xc>
 800389a:	00b3      	lsls	r3, r6, #2
 800389c:	58eb      	ldr	r3, [r5, r3]
 800389e:	4798      	blx	r3
 80038a0:	3601      	adds	r6, #1
 80038a2:	e7f2      	b.n	800388a <__libc_init_array+0x1e>
 80038a4:	080039cc 	.word	0x080039cc
 80038a8:	080039cc 	.word	0x080039cc
 80038ac:	080039d0 	.word	0x080039d0
 80038b0:	080039cc 	.word	0x080039cc

080038b4 <memcpy>:
 80038b4:	2300      	movs	r3, #0
 80038b6:	b510      	push	{r4, lr}
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d100      	bne.n	80038be <memcpy+0xa>
 80038bc:	bd10      	pop	{r4, pc}
 80038be:	5ccc      	ldrb	r4, [r1, r3]
 80038c0:	54c4      	strb	r4, [r0, r3]
 80038c2:	3301      	adds	r3, #1
 80038c4:	e7f8      	b.n	80038b8 <memcpy+0x4>
	...

080038c8 <_init>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr

080038d4 <_fini>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	46c0      	nop			@ (mov r8, r8)
 80038d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038da:	bc08      	pop	{r3}
 80038dc:	469e      	mov	lr, r3
 80038de:	4770      	bx	lr
